/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface AjnaPoolERC20Interface extends utils.Interface {
  functions: {
    "addCollateral(uint256,uint256)": FunctionFragment;
    "addQuoteToken(uint256,uint256)": FunctionFragment;
    "approveLpOwnership(address,uint256,uint256)": FunctionFragment;
    "auctionInfo(address)": FunctionFragment;
    "borrowerInfo(address)": FunctionFragment;
    "bucketCollateralDust(uint256)": FunctionFragment;
    "bucketExchangeRate(uint256)": FunctionFragment;
    "bucketInfo(uint256)": FunctionFragment;
    "bucketTake(address,bool,uint256)": FunctionFragment;
    "burnInfo(uint256)": FunctionFragment;
    "collateralAddress()": FunctionFragment;
    "collateralScale()": FunctionFragment;
    "currentBurnEpoch()": FunctionFragment;
    "debtInfo()": FunctionFragment;
    "depositIndex(uint256)": FunctionFragment;
    "depositSize()": FunctionFragment;
    "depositUtilization(uint256,uint256)": FunctionFragment;
    "drawDebt(address,uint256,uint256,uint256)": FunctionFragment;
    "emasInfo()": FunctionFragment;
    "flashFee(address,uint256)": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "inflatorInfo()": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "interestRateInfo()": FunctionFragment;
    "kick(address)": FunctionFragment;
    "kickWithDeposit(uint256)": FunctionFragment;
    "kickerInfo(address)": FunctionFragment;
    "lenderInfo(uint256,address)": FunctionFragment;
    "loanInfo(uint256)": FunctionFragment;
    "loansInfo()": FunctionFragment;
    "maxFlashLoan(address)": FunctionFragment;
    "moveQuoteToken(uint256,uint256,uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "pledgedCollateral()": FunctionFragment;
    "poolType()": FunctionFragment;
    "quoteTokenAddress()": FunctionFragment;
    "quoteTokenDust()": FunctionFragment;
    "quoteTokenScale()": FunctionFragment;
    "removeCollateral(uint256,uint256)": FunctionFragment;
    "removeQuoteToken(uint256,uint256)": FunctionFragment;
    "repayDebt(address,uint256,uint256)": FunctionFragment;
    "reservesInfo()": FunctionFragment;
    "settle(address,uint256)": FunctionFragment;
    "startClaimableReserveAuction()": FunctionFragment;
    "take(address,uint256,address,bytes)": FunctionFragment;
    "takeReserves(uint256)": FunctionFragment;
    "transferLPs(address,address,uint256[])": FunctionFragment;
    "withdrawBonds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollateral"
      | "addQuoteToken"
      | "approveLpOwnership"
      | "auctionInfo"
      | "borrowerInfo"
      | "bucketCollateralDust"
      | "bucketExchangeRate"
      | "bucketInfo"
      | "bucketTake"
      | "burnInfo"
      | "collateralAddress"
      | "collateralScale"
      | "currentBurnEpoch"
      | "debtInfo"
      | "depositIndex"
      | "depositSize"
      | "depositUtilization"
      | "drawDebt"
      | "emasInfo"
      | "flashFee"
      | "flashLoan"
      | "inflatorInfo"
      | "initialize"
      | "interestRateInfo"
      | "kick"
      | "kickWithDeposit"
      | "kickerInfo"
      | "lenderInfo"
      | "loanInfo"
      | "loansInfo"
      | "maxFlashLoan"
      | "moveQuoteToken"
      | "multicall"
      | "pledgedCollateral"
      | "poolType"
      | "quoteTokenAddress"
      | "quoteTokenDust"
      | "quoteTokenScale"
      | "removeCollateral"
      | "removeQuoteToken"
      | "repayDebt"
      | "reservesInfo"
      | "settle"
      | "startClaimableReserveAuction"
      | "take"
      | "takeReserves"
      | "transferLPs"
      | "withdrawBonds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addQuoteToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveLpOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketCollateralDust",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketExchangeRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketTake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBurnEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositUtilization",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "emasInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "inflatorInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "kickWithDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "kickerInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loanInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "loansInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuoteToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgedCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenDust",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeQuoteToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reservesInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startClaimableReserveAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeReserves",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLPs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBonds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLpOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bucketCollateralDust",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bucketExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bucketInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bucketTake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBurnEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emasInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inflatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickWithDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kickerInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenderInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loansInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenDust",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reservesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startClaimableReserveAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLPs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBonds",
    data: BytesLike
  ): Result;

  events: {
    "AddCollateral(address,uint256,uint256,uint256)": EventFragment;
    "AddQuoteToken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "AuctionNFTSettle(address,uint256,uint256,uint256)": EventFragment;
    "AuctionSettle(address,uint256)": EventFragment;
    "BucketBankruptcy(uint256,uint256)": EventFragment;
    "BucketTake(address,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "BucketTakeLPAwarded(address,address,uint256,uint256)": EventFragment;
    "DrawDebt(address,uint256,uint256,uint256)": EventFragment;
    "Kick(address,uint256,uint256,uint256)": EventFragment;
    "MoveQuoteToken(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveCollateral(address,uint256,uint256,uint256)": EventFragment;
    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "RepayDebt(address,uint256,uint256,uint256)": EventFragment;
    "ReserveAuction(uint256,uint256)": EventFragment;
    "Settle(address,uint256)": EventFragment;
    "Take(address,uint256,uint256,uint256,bool)": EventFragment;
    "TransferLPTokens(address,address,uint256[],uint256)": EventFragment;
    "UpdateInterestRate(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddQuoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionNFTSettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketBankruptcy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketTake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketTakeLPAwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Kick"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveQuoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveQuoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Take"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferLPTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateInterestRate"): EventFragment;
}

export interface AddCollateralEventObject {
  actor: string;
  price: BigNumber;
  amount: BigNumber;
  lpAwarded: BigNumber;
}
export type AddCollateralEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AddCollateralEventObject
>;

export type AddCollateralEventFilter = TypedEventFilter<AddCollateralEvent>;

export interface AddQuoteTokenEventObject {
  lender: string;
  price: BigNumber;
  amount: BigNumber;
  lpAwarded: BigNumber;
  lup: BigNumber;
}
export type AddQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  AddQuoteTokenEventObject
>;

export type AddQuoteTokenEventFilter = TypedEventFilter<AddQuoteTokenEvent>;

export interface AuctionNFTSettleEventObject {
  borrower: string;
  collateral: BigNumber;
  lps: BigNumber;
  index: BigNumber;
}
export type AuctionNFTSettleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AuctionNFTSettleEventObject
>;

export type AuctionNFTSettleEventFilter =
  TypedEventFilter<AuctionNFTSettleEvent>;

export interface AuctionSettleEventObject {
  borrower: string;
  collateral: BigNumber;
}
export type AuctionSettleEvent = TypedEvent<
  [string, BigNumber],
  AuctionSettleEventObject
>;

export type AuctionSettleEventFilter = TypedEventFilter<AuctionSettleEvent>;

export interface BucketBankruptcyEventObject {
  index: BigNumber;
  lpForfeited: BigNumber;
}
export type BucketBankruptcyEvent = TypedEvent<
  [BigNumber, BigNumber],
  BucketBankruptcyEventObject
>;

export type BucketBankruptcyEventFilter =
  TypedEventFilter<BucketBankruptcyEvent>;

export interface BucketTakeEventObject {
  borrower: string;
  index: BigNumber;
  amount: BigNumber;
  collateral: BigNumber;
  bondChange: BigNumber;
  isReward: boolean;
}
export type BucketTakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  BucketTakeEventObject
>;

export type BucketTakeEventFilter = TypedEventFilter<BucketTakeEvent>;

export interface BucketTakeLPAwardedEventObject {
  taker: string;
  kicker: string;
  lpAwardedTaker: BigNumber;
  lpAwardedKicker: BigNumber;
}
export type BucketTakeLPAwardedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BucketTakeLPAwardedEventObject
>;

export type BucketTakeLPAwardedEventFilter =
  TypedEventFilter<BucketTakeLPAwardedEvent>;

export interface DrawDebtEventObject {
  borrower: string;
  amountBorrowed: BigNumber;
  collateralPledged: BigNumber;
  lup: BigNumber;
}
export type DrawDebtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DrawDebtEventObject
>;

export type DrawDebtEventFilter = TypedEventFilter<DrawDebtEvent>;

export interface KickEventObject {
  borrower: string;
  debt: BigNumber;
  collateral: BigNumber;
  bond: BigNumber;
}
export type KickEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  KickEventObject
>;

export type KickEventFilter = TypedEventFilter<KickEvent>;

export interface MoveQuoteTokenEventObject {
  lender: string;
  from: BigNumber;
  to: BigNumber;
  amount: BigNumber;
  lpRedeemedFrom: BigNumber;
  lpAwardedTo: BigNumber;
  lup: BigNumber;
}
export type MoveQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MoveQuoteTokenEventObject
>;

export type MoveQuoteTokenEventFilter = TypedEventFilter<MoveQuoteTokenEvent>;

export interface RemoveCollateralEventObject {
  claimer: string;
  price: BigNumber;
  amount: BigNumber;
  lpRedeemed: BigNumber;
}
export type RemoveCollateralEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RemoveCollateralEventObject
>;

export type RemoveCollateralEventFilter =
  TypedEventFilter<RemoveCollateralEvent>;

export interface RemoveQuoteTokenEventObject {
  lender: string;
  price: BigNumber;
  amount: BigNumber;
  lpRedeemed: BigNumber;
  lup: BigNumber;
}
export type RemoveQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveQuoteTokenEventObject
>;

export type RemoveQuoteTokenEventFilter =
  TypedEventFilter<RemoveQuoteTokenEvent>;

export interface RepayDebtEventObject {
  borrower: string;
  quoteRepaid: BigNumber;
  collateralPulled: BigNumber;
  lup: BigNumber;
}
export type RepayDebtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RepayDebtEventObject
>;

export type RepayDebtEventFilter = TypedEventFilter<RepayDebtEvent>;

export interface ReserveAuctionEventObject {
  claimableReservesRemaining: BigNumber;
  auctionPrice: BigNumber;
}
export type ReserveAuctionEvent = TypedEvent<
  [BigNumber, BigNumber],
  ReserveAuctionEventObject
>;

export type ReserveAuctionEventFilter = TypedEventFilter<ReserveAuctionEvent>;

export interface SettleEventObject {
  borrower: string;
  settledDebt: BigNumber;
}
export type SettleEvent = TypedEvent<[string, BigNumber], SettleEventObject>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface TakeEventObject {
  borrower: string;
  amount: BigNumber;
  collateral: BigNumber;
  bondChange: BigNumber;
  isReward: boolean;
}
export type TakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean],
  TakeEventObject
>;

export type TakeEventFilter = TypedEventFilter<TakeEvent>;

export interface TransferLPTokensEventObject {
  owner: string;
  newOwner: string;
  indexes: BigNumber[];
  lpTokens: BigNumber;
}
export type TransferLPTokensEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber],
  TransferLPTokensEventObject
>;

export type TransferLPTokensEventFilter =
  TypedEventFilter<TransferLPTokensEvent>;

export interface UpdateInterestRateEventObject {
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type UpdateInterestRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateInterestRateEventObject
>;

export type UpdateInterestRateEventFilter =
  TypedEventFilter<UpdateInterestRateEvent>;

export interface AjnaPoolERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AjnaPoolERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateral(
      amountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addQuoteToken(
      quoteTokenAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveLpOwnership(
      allowedNewOwner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      lpsAmountToApprove_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    auctionInfo(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        kicker: string;
        bondFactor: BigNumber;
        bondSize: BigNumber;
        kickTime: BigNumber;
        kickMomp: BigNumber;
        neutralPrice: BigNumber;
        head: string;
        next: string;
        prev: string;
      }
    >;

    borrowerInfo(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    bucketCollateralDust(
      bucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bucketExchangeRate(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exchangeRate_: BigNumber }>;

    bucketInfo(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    bucketTake(
      borrowerAddress_: PromiseOrValue<string>,
      depositTake_: PromiseOrValue<boolean>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnInfo(
      burnEventEpoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    collateralAddress(overrides?: CallOverrides): Promise<[string]>;

    collateralScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentBurnEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    depositIndex(
      debt_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositUtilization(
      debt_: PromiseOrValue<BigNumberish>,
      collateral_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    drawDebt(
      borrowerAddress_: PromiseOrValue<string>,
      amountToBorrow_: PromiseOrValue<BigNumberish>,
      limitIndex_: PromiseOrValue<BigNumberish>,
      collateralToPledge_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emasInfo(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    flashFee(
      token_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flashLoan(
      receiver_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    inflatorInfo(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    initialize(
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interestRateInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    kick(
      borrowerAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kickWithDeposit(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kickerInfo(
      kicker_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    lenderInfo(
      index_: PromiseOrValue<BigNumberish>,
      lender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lpBalance_: BigNumber;
        depositTime_: BigNumber;
      }
    >;

    loanInfo(
      loanId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    loansInfo(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    maxFlashLoan(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxLoan_: BigNumber }>;

    moveQuoteToken(
      maxAmountToMove_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pledgedCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolType(overrides?: CallOverrides): Promise<[number]>;

    quoteTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    quoteTokenDust(overrides?: CallOverrides): Promise<[BigNumber]>;

    quoteTokenScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayDebt(
      borrowerAddress_: PromiseOrValue<string>,
      maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
      collateralAmountToPull_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reservesInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    settle(
      borrowerAddress_: PromiseOrValue<string>,
      maxDepth_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startClaimableReserveAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    take(
      borrowerAddress_: PromiseOrValue<string>,
      collateral_: PromiseOrValue<BigNumberish>,
      callee_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeReserves(
      maxAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferLPs(
      owner_: PromiseOrValue<string>,
      newOwner_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBonds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateral(
    amountToAdd_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addQuoteToken(
    quoteTokenAmountToAdd_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveLpOwnership(
    allowedNewOwner_: PromiseOrValue<string>,
    index_: PromiseOrValue<BigNumberish>,
    lpsAmountToApprove_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  auctionInfo(
    borrower_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      kicker: string;
      bondFactor: BigNumber;
      bondSize: BigNumber;
      kickTime: BigNumber;
      kickMomp: BigNumber;
      neutralPrice: BigNumber;
      head: string;
      next: string;
      prev: string;
    }
  >;

  borrowerInfo(
    borrower_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  bucketCollateralDust(
    bucketIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bucketExchangeRate(
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bucketInfo(
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  bucketTake(
    borrowerAddress_: PromiseOrValue<string>,
    depositTake_: PromiseOrValue<boolean>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnInfo(
    burnEventEpoch_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  collateralAddress(overrides?: CallOverrides): Promise<string>;

  collateralScale(overrides?: CallOverrides): Promise<BigNumber>;

  currentBurnEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  debtInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  depositIndex(
    debt_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositSize(overrides?: CallOverrides): Promise<BigNumber>;

  depositUtilization(
    debt_: PromiseOrValue<BigNumberish>,
    collateral_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  drawDebt(
    borrowerAddress_: PromiseOrValue<string>,
    amountToBorrow_: PromiseOrValue<BigNumberish>,
    limitIndex_: PromiseOrValue<BigNumberish>,
    collateralToPledge_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emasInfo(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  flashFee(
    token_: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashLoan(
    receiver_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  inflatorInfo(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  initialize(
    rate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interestRateInfo(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  kick(
    borrowerAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kickWithDeposit(
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kickerInfo(
    kicker_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  lenderInfo(
    index_: PromiseOrValue<BigNumberish>,
    lender_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { lpBalance_: BigNumber; depositTime_: BigNumber }
  >;

  loanInfo(
    loanId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  loansInfo(overrides?: CallOverrides): Promise<[string, BigNumber, BigNumber]>;

  maxFlashLoan(
    token_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  moveQuoteToken(
    maxAmountToMove_: PromiseOrValue<BigNumberish>,
    fromIndex_: PromiseOrValue<BigNumberish>,
    toIndex_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pledgedCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  poolType(overrides?: CallOverrides): Promise<number>;

  quoteTokenAddress(overrides?: CallOverrides): Promise<string>;

  quoteTokenDust(overrides?: CallOverrides): Promise<BigNumber>;

  quoteTokenScale(overrides?: CallOverrides): Promise<BigNumber>;

  removeCollateral(
    maxAmount_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeQuoteToken(
    maxAmount_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayDebt(
    borrowerAddress_: PromiseOrValue<string>,
    maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
    collateralAmountToPull_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reservesInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  settle(
    borrowerAddress_: PromiseOrValue<string>,
    maxDepth_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startClaimableReserveAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  take(
    borrowerAddress_: PromiseOrValue<string>,
    collateral_: PromiseOrValue<BigNumberish>,
    callee_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeReserves(
    maxAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferLPs(
    owner_: PromiseOrValue<string>,
    newOwner_: PromiseOrValue<string>,
    indexes_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBonds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateral(
      amountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addQuoteToken(
      quoteTokenAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveLpOwnership(
      allowedNewOwner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      lpsAmountToApprove_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionInfo(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        kicker: string;
        bondFactor: BigNumber;
        bondSize: BigNumber;
        kickTime: BigNumber;
        kickMomp: BigNumber;
        neutralPrice: BigNumber;
        head: string;
        next: string;
        prev: string;
      }
    >;

    borrowerInfo(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    bucketCollateralDust(
      bucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketExchangeRate(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketInfo(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    bucketTake(
      borrowerAddress_: PromiseOrValue<string>,
      depositTake_: PromiseOrValue<boolean>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnInfo(
      burnEventEpoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    collateralAddress(overrides?: CallOverrides): Promise<string>;

    collateralScale(overrides?: CallOverrides): Promise<BigNumber>;

    currentBurnEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    debtInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    depositIndex(
      debt_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositSize(overrides?: CallOverrides): Promise<BigNumber>;

    depositUtilization(
      debt_: PromiseOrValue<BigNumberish>,
      collateral_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawDebt(
      borrowerAddress_: PromiseOrValue<string>,
      amountToBorrow_: PromiseOrValue<BigNumberish>,
      limitIndex_: PromiseOrValue<BigNumberish>,
      collateralToPledge_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emasInfo(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    flashFee(
      token_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inflatorInfo(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    initialize(
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRateInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    kick(
      borrowerAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    kickWithDeposit(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    kickerInfo(
      kicker_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    lenderInfo(
      index_: PromiseOrValue<BigNumberish>,
      lender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lpBalance_: BigNumber;
        depositTime_: BigNumber;
      }
    >;

    loanInfo(
      loanId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    loansInfo(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    maxFlashLoan(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveQuoteToken(
      maxAmountToMove_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fromBucketLPs_: BigNumber;
        toBucketLPs_: BigNumber;
      }
    >;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    pledgedCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<number>;

    quoteTokenAddress(overrides?: CallOverrides): Promise<string>;

    quoteTokenDust(overrides?: CallOverrides): Promise<BigNumber>;

    quoteTokenScale(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmount_: BigNumber;
        lpAmount_: BigNumber;
      }
    >;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        removedAmount_: BigNumber;
        redeemedLPs_: BigNumber;
      }
    >;

    repayDebt(
      borrowerAddress_: PromiseOrValue<string>,
      maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
      collateralAmountToPull_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reservesInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    settle(
      borrowerAddress_: PromiseOrValue<string>,
      maxDepth_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startClaimableReserveAuction(overrides?: CallOverrides): Promise<void>;

    take(
      borrowerAddress_: PromiseOrValue<string>,
      collateral_: PromiseOrValue<BigNumberish>,
      callee_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeReserves(
      maxAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferLPs(
      owner_: PromiseOrValue<string>,
      newOwner_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBonds(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddCollateral(address,uint256,uint256,uint256)"(
      actor?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null
    ): AddCollateralEventFilter;
    AddCollateral(
      actor?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null
    ): AddCollateralEventFilter;

    "AddQuoteToken(address,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null,
      lup?: null
    ): AddQuoteTokenEventFilter;
    AddQuoteToken(
      lender?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null,
      lup?: null
    ): AddQuoteTokenEventFilter;

    "AuctionNFTSettle(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null,
      lps?: null,
      index?: null
    ): AuctionNFTSettleEventFilter;
    AuctionNFTSettle(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null,
      lps?: null,
      index?: null
    ): AuctionNFTSettleEventFilter;

    "AuctionSettle(address,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null
    ): AuctionSettleEventFilter;
    AuctionSettle(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null
    ): AuctionSettleEventFilter;

    "BucketBankruptcy(uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;
    BucketBankruptcy(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;

    "BucketTake(address,uint256,uint256,uint256,uint256,bool)"(
      borrower?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): BucketTakeEventFilter;
    BucketTake(
      borrower?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): BucketTakeEventFilter;

    "BucketTakeLPAwarded(address,address,uint256,uint256)"(
      taker?: PromiseOrValue<string> | null,
      kicker?: PromiseOrValue<string> | null,
      lpAwardedTaker?: null,
      lpAwardedKicker?: null
    ): BucketTakeLPAwardedEventFilter;
    BucketTakeLPAwarded(
      taker?: PromiseOrValue<string> | null,
      kicker?: PromiseOrValue<string> | null,
      lpAwardedTaker?: null,
      lpAwardedKicker?: null
    ): BucketTakeLPAwardedEventFilter;

    "DrawDebt(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      amountBorrowed?: null,
      collateralPledged?: null,
      lup?: null
    ): DrawDebtEventFilter;
    DrawDebt(
      borrower?: PromiseOrValue<string> | null,
      amountBorrowed?: null,
      collateralPledged?: null,
      lup?: null
    ): DrawDebtEventFilter;

    "Kick(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      debt?: null,
      collateral?: null,
      bond?: null
    ): KickEventFilter;
    Kick(
      borrower?: PromiseOrValue<string> | null,
      debt?: null,
      collateral?: null,
      bond?: null
    ): KickEventFilter;

    "MoveQuoteToken(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null,
      lup?: null
    ): MoveQuoteTokenEventFilter;
    MoveQuoteToken(
      lender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null,
      lup?: null
    ): MoveQuoteTokenEventFilter;

    "RemoveCollateral(address,uint256,uint256,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null
    ): RemoveCollateralEventFilter;
    RemoveCollateral(
      claimer?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null
    ): RemoveCollateralEventFilter;

    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null,
      lup?: null
    ): RemoveQuoteTokenEventFilter;
    RemoveQuoteToken(
      lender?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null,
      lup?: null
    ): RemoveQuoteTokenEventFilter;

    "RepayDebt(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      quoteRepaid?: null,
      collateralPulled?: null,
      lup?: null
    ): RepayDebtEventFilter;
    RepayDebt(
      borrower?: PromiseOrValue<string> | null,
      quoteRepaid?: null,
      collateralPulled?: null,
      lup?: null
    ): RepayDebtEventFilter;

    "ReserveAuction(uint256,uint256)"(
      claimableReservesRemaining?: null,
      auctionPrice?: null
    ): ReserveAuctionEventFilter;
    ReserveAuction(
      claimableReservesRemaining?: null,
      auctionPrice?: null
    ): ReserveAuctionEventFilter;

    "Settle(address,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      settledDebt?: null
    ): SettleEventFilter;
    Settle(
      borrower?: PromiseOrValue<string> | null,
      settledDebt?: null
    ): SettleEventFilter;

    "Take(address,uint256,uint256,uint256,bool)"(
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): TakeEventFilter;
    Take(
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): TakeEventFilter;

    "TransferLPTokens(address,address,uint256[],uint256)"(
      owner?: null,
      newOwner?: null,
      indexes?: null,
      lpTokens?: null
    ): TransferLPTokensEventFilter;
    TransferLPTokens(
      owner?: null,
      newOwner?: null,
      indexes?: null,
      lpTokens?: null
    ): TransferLPTokensEventFilter;

    "UpdateInterestRate(uint256,uint256)"(
      oldRate?: null,
      newRate?: null
    ): UpdateInterestRateEventFilter;
    UpdateInterestRate(
      oldRate?: null,
      newRate?: null
    ): UpdateInterestRateEventFilter;
  };

  estimateGas: {
    addCollateral(
      amountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addQuoteToken(
      quoteTokenAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveLpOwnership(
      allowedNewOwner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      lpsAmountToApprove_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    auctionInfo(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowerInfo(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketCollateralDust(
      bucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketExchangeRate(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketInfo(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketTake(
      borrowerAddress_: PromiseOrValue<string>,
      depositTake_: PromiseOrValue<boolean>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnInfo(
      burnEventEpoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAddress(overrides?: CallOverrides): Promise<BigNumber>;

    collateralScale(overrides?: CallOverrides): Promise<BigNumber>;

    currentBurnEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    debtInfo(overrides?: CallOverrides): Promise<BigNumber>;

    depositIndex(
      debt_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositSize(overrides?: CallOverrides): Promise<BigNumber>;

    depositUtilization(
      debt_: PromiseOrValue<BigNumberish>,
      collateral_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawDebt(
      borrowerAddress_: PromiseOrValue<string>,
      amountToBorrow_: PromiseOrValue<BigNumberish>,
      limitIndex_: PromiseOrValue<BigNumberish>,
      collateralToPledge_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emasInfo(overrides?: CallOverrides): Promise<BigNumber>;

    flashFee(
      token_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    inflatorInfo(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interestRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

    kick(
      borrowerAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kickWithDeposit(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kickerInfo(
      kicker_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderInfo(
      index_: PromiseOrValue<BigNumberish>,
      lender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanInfo(
      loanId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loansInfo(overrides?: CallOverrides): Promise<BigNumber>;

    maxFlashLoan(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveQuoteToken(
      maxAmountToMove_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pledgedCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<BigNumber>;

    quoteTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    quoteTokenDust(overrides?: CallOverrides): Promise<BigNumber>;

    quoteTokenScale(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayDebt(
      borrowerAddress_: PromiseOrValue<string>,
      maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
      collateralAmountToPull_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reservesInfo(overrides?: CallOverrides): Promise<BigNumber>;

    settle(
      borrowerAddress_: PromiseOrValue<string>,
      maxDepth_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startClaimableReserveAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    take(
      borrowerAddress_: PromiseOrValue<string>,
      collateral_: PromiseOrValue<BigNumberish>,
      callee_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeReserves(
      maxAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferLPs(
      owner_: PromiseOrValue<string>,
      newOwner_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBonds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateral(
      amountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addQuoteToken(
      quoteTokenAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveLpOwnership(
      allowedNewOwner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      lpsAmountToApprove_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    auctionInfo(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowerInfo(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketCollateralDust(
      bucketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketExchangeRate(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketInfo(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketTake(
      borrowerAddress_: PromiseOrValue<string>,
      depositTake_: PromiseOrValue<boolean>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnInfo(
      burnEventEpoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBurnEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositIndex(
      debt_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositUtilization(
      debt_: PromiseOrValue<BigNumberish>,
      collateral_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawDebt(
      borrowerAddress_: PromiseOrValue<string>,
      amountToBorrow_: PromiseOrValue<BigNumberish>,
      limitIndex_: PromiseOrValue<BigNumberish>,
      collateralToPledge_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emasInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashFee(
      token_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiver_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    inflatorInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interestRateInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kick(
      borrowerAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kickWithDeposit(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kickerInfo(
      kicker_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderInfo(
      index_: PromiseOrValue<BigNumberish>,
      lender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanInfo(
      loanId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loansInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFlashLoan(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveQuoteToken(
      maxAmountToMove_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pledgedCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteTokenDust(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteTokenScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayDebt(
      borrowerAddress_: PromiseOrValue<string>,
      maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
      collateralAmountToPull_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reservesInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settle(
      borrowerAddress_: PromiseOrValue<string>,
      maxDepth_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startClaimableReserveAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    take(
      borrowerAddress_: PromiseOrValue<string>,
      collateral_: PromiseOrValue<BigNumberish>,
      callee_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeReserves(
      maxAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferLPs(
      owner_: PromiseOrValue<string>,
      newOwner_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBonds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
