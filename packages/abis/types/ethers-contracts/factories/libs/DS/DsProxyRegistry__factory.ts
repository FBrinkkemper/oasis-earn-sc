/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  DsProxyRegistry,
  DsProxyRegistryInterface,
} from "../../../libs/DS/DsProxyRegistry";

const _abi = [
  {
    constant: false,
    inputs: [],
    name: "build",
    outputs: [
      {
        name: "proxy",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "",
        type: "address",
      },
    ],
    name: "proxies",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "owner",
        type: "address",
      },
    ],
    name: "build",
    outputs: [
      {
        name: "proxy",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        name: "factory_",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

export class DsProxyRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): DsProxyRegistryInterface {
    return new Interface(_abi) as DsProxyRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DsProxyRegistry {
    return new Contract(address, _abi, runner) as unknown as DsProxyRegistry;
  }
}
