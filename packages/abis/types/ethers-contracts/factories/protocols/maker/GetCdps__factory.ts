/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  GetCdps,
  GetCdpsInterface,
} from "../../../protocols/maker/GetCdps";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "manager",
        type: "address",
      },
      {
        internalType: "address",
        name: "guy",
        type: "address",
      },
    ],
    name: "getCdpsAsc",
    outputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "address[]",
        name: "urns",
        type: "address[]",
      },
      {
        internalType: "bytes32[]",
        name: "ilks",
        type: "bytes32[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "manager",
        type: "address",
      },
      {
        internalType: "address",
        name: "guy",
        type: "address",
      },
    ],
    name: "getCdpsDesc",
    outputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "address[]",
        name: "urns",
        type: "address[]",
      },
      {
        internalType: "bytes32[]",
        name: "ilks",
        type: "bytes32[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
] as const;

export class GetCdps__factory {
  static readonly abi = _abi;
  static createInterface(): GetCdpsInterface {
    return new Interface(_abi) as GetCdpsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): GetCdps {
    return new Contract(address, _abi, runner) as unknown as GetCdps;
  }
}
