/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAccountImplementation,
  IAccountImplementationInterface,
} from "../../../../../system/contracts/interfaces/dpm/IAccountImplementation";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes32",
        name: "response",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "guard",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IAccountImplementation__factory {
  static readonly abi = _abi;
  static createInterface(): IAccountImplementationInterface {
    return new utils.Interface(_abi) as IAccountImplementationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAccountImplementation {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IAccountImplementation;
  }
}
