/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  DSProxyFactory,
  DSProxyFactoryInterface,
} from "../../../../../../system/contracts/libs/DS/DSProxy.sol/DSProxyFactory";

const _abi = [
  {
    inputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "cache",
        type: "address",
      },
    ],
    name: "Created",
    type: "event",
  },
  {
    constant: false,
    inputs: [],
    name: "build",
    outputs: [
      {
        internalType: "address payable",
        name: "proxy",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "build",
    outputs: [
      {
        internalType: "address payable",
        name: "proxy",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "cache",
    outputs: [
      {
        internalType: "contract DSProxyCache",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isProxy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
] as const;

export class DSProxyFactory__factory {
  static readonly abi = _abi;
  static createInterface(): DSProxyFactoryInterface {
    return new Interface(_abi) as DSProxyFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DSProxyFactory {
    return new Contract(address, _abi, runner) as unknown as DSProxyFactory;
  }
}
