/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ProxyPermission,
  ProxyPermissionInterface,
} from "../../../../../system/contracts/libs/DS/ProxyPermission";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dsGuardFactory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ALLOWED_METHOD_HASH",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isDPMProxy",
        type: "bool",
      },
      {
        internalType: "address",
        name: "_contractAddr",
        type: "address",
      },
    ],
    name: "givePermission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isDPMProxy",
        type: "bool",
      },
      {
        internalType: "address",
        name: "_contractAddr",
        type: "address",
      },
    ],
    name: "removePermission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ProxyPermission__factory {
  static readonly abi = _abi;
  static createInterface(): ProxyPermissionInterface {
    return new utils.Interface(_abi) as ProxyPermissionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyPermission {
    return new Contract(address, _abi, signerOrProvider) as ProxyPermission;
  }
}
