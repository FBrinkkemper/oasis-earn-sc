/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  DSProxyCache,
  DSProxyCacheInterface,
} from "../../../../../../system/contracts/libs/DS/DSProxy.sol/DSProxyCache";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes",
        name: "_code",
        type: "bytes",
      },
    ],
    name: "read",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes",
        name: "_code",
        type: "bytes",
      },
    ],
    name: "write",
    outputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class DSProxyCache__factory {
  static readonly abi = _abi;
  static createInterface(): DSProxyCacheInterface {
    return new Interface(_abi) as DSProxyCacheInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DSProxyCache {
    return new Contract(address, _abi, runner) as unknown as DSProxyCache;
  }
}
