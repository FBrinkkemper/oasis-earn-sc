/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TakerActions,
  TakerActionsInterface,
} from "../../../../../../system/contracts/ajna/libraries/external/TakerActions";

const _abi = [
  {
    inputs: [],
    name: "AmountLTMinDebt",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionNotTakeable",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionPriceGtBucketPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "BucketBankruptcyBlock",
    type: "error",
  },
  {
    inputs: [],
    name: "BucketIndexOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "BucketPriceOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "CollateralRoundingNeededButNotPossible",
    type: "error",
  },
  {
    inputs: [],
    name: "DustAmountNotExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientCollateral",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientLiquidity",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAuction",
    type: "error",
  },
  {
    inputs: [],
    name: "NoReservesAuction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__CeilOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "PRBMathSD59x18__DivInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rAbs",
        type: "uint256",
      },
    ],
    name: "PRBMathSD59x18__DivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__Exp2InputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__FromIntOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__FromIntUnderflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__LogInputTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "PRBMathSD59x18__MulInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rAbs",
        type: "uint256",
      },
    ],
    name: "PRBMathSD59x18__MulOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__SqrtNegativeInput",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__SqrtOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroDebtToCollateral",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bondChange",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isReward",
        type: "bool",
      },
    ],
    name: "BucketTake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "kicker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lpAwardedTaker",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lpAwardedKicker",
        type: "uint256",
      },
    ],
    name: "BucketTakeLPAwarded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "claimableReservesRemaining",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "auctionPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "currentBurnEpoch",
        type: "uint256",
      },
    ],
    name: "ReserveAuction",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bondChange",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isReward",
        type: "bool",
      },
    ],
    name: "Take",
    type: "event",
  },
] as const;

export class TakerActions__factory {
  static readonly abi = _abi;
  static createInterface(): TakerActionsInterface {
    return new utils.Interface(_abi) as TakerActionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TakerActions {
    return new Contract(address, _abi, signerOrProvider) as TakerActions;
  }
}
