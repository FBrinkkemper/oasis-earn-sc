/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IAjnaPool,
  IAjnaPoolInterface,
} from "../../../../../system/contracts/ajna/ajna-actions/IAjnaPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralAmountToAdd_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
    ],
    name: "addCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "bucketLPs_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralAmountToAdd_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
    ],
    name: "addQuoteToken",
    outputs: [
      {
        internalType: "uint256",
        name: "bucketLPs_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "allowedNewOwner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveLpOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralScale",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "currentBurnEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "borrowerAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountToBorrow_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limitIndex_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralToPledge_",
        type: "uint256",
      },
    ],
    name: "drawDebt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "lender_",
        type: "address",
      },
    ],
    name: "lenderInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fromIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toIndex",
        type: "uint256",
      },
    ],
    name: "moveQuoteToken",
    outputs: [
      {
        internalType: "uint256",
        name: "lpbAmountFrom",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lpbAmountTo",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "quoteTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "quoteTokenScale",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxAmount_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
    ],
    name: "removeCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralAmount_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lpAmount_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxAmount_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
    ],
    name: "removeQuoteToken",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralAmount_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lpAmount_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "borrowerAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxQuoteTokenAmountToRepay_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralAmountToPull_",
        type: "uint256",
      },
    ],
    name: "repayDebt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IAjnaPool__factory {
  static readonly abi = _abi;
  static createInterface(): IAjnaPoolInterface {
    return new Interface(_abi) as IAjnaPoolInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IAjnaPool {
    return new Contract(address, _abi, runner) as unknown as IAjnaPool;
  }
}
