/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  PoolCommons,
  PoolCommonsInterface,
} from "../../../../../../system/contracts/ajna/libraries/external/PoolCommons";

const _abi = [
  {
    inputs: [],
    name: "BucketPriceOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "FlashloanCallbackFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "FlashloanIncorrectBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__CeilOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "PRBMathSD59x18__DivInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rAbs",
        type: "uint256",
      },
    ],
    name: "PRBMathSD59x18__DivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__Exp2InputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__ExpInputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "PRBMathSD59x18__LogInputTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "PRBMathSD59x18__MulInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rAbs",
        type: "uint256",
      },
    ],
    name: "PRBMathSD59x18__MulOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__Exp2InputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__ExpInputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__LogInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivOverflow",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Flashloan",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldRate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newRate",
        type: "uint256",
      },
    ],
    name: "ResetInterestRate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldRate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newRate",
        type: "uint256",
      },
    ],
    name: "UpdateInterestRate",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "pledgedCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "t0DebtInAuction",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "t0Debt",
            type: "uint256",
          },
        ],
        internalType: "struct PoolBalancesState",
        name: "poolBalances_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint208",
            name: "inflator",
            type: "uint208",
          },
          {
            internalType: "uint48",
            name: "inflatorUpdate",
            type: "uint48",
          },
        ],
        internalType: "struct InflatorState",
        name: "inflatorState_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint208",
            name: "interestRate",
            type: "uint208",
          },
          {
            internalType: "uint48",
            name: "interestRateUpdate",
            type: "uint48",
          },
          {
            internalType: "uint256",
            name: "debt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "meaningfulDeposit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "t0Debt2ToCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "debtCol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lupt0Debt",
            type: "uint256",
          },
        ],
        internalType: "struct InterestState",
        name: "interestState_",
        type: "tuple",
      },
    ],
    name: "debtInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "mau_",
        type: "uint256",
      },
    ],
    name: "lenderInterestMargin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "inflator_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "inflatorUpdate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestRate_",
        type: "uint256",
      },
    ],
    name: "pendingInflator",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "interestRate_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "elapsed_",
        type: "uint256",
      },
    ],
    name: "pendingInterestFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

export class PoolCommons__factory {
  static readonly abi = _abi;
  static createInterface(): PoolCommonsInterface {
    return new utils.Interface(_abi) as PoolCommonsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PoolCommons {
    return new Contract(address, _abi, signerOrProvider) as PoolCommons;
  }
}
