/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPoolErrors,
  IPoolErrorsInterface,
} from "../../../../../../../system/contracts/ajna/interfaces/pool/commons/IPoolErrors";

const _abi = [
  {
    inputs: [],
    name: "AddAboveAuctionPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "AmountLTMinDebt",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionActive",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionNotClearable",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionNotCleared",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionNotTakeable",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionPriceGtBucketPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "BorrowerNotSender",
    type: "error",
  },
  {
    inputs: [],
    name: "BorrowerOk",
    type: "error",
  },
  {
    inputs: [],
    name: "BorrowerUnderCollateralized",
    type: "error",
  },
  {
    inputs: [],
    name: "BucketBankruptcyBlock",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotMergeToHigherPrice",
    type: "error",
  },
  {
    inputs: [],
    name: "DustAmountNotExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "FlashloanCallbackFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "FlashloanIncorrectBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FlashloanUnavailableForToken",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientCollateral",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientLP",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientLiquidity",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAllowancesInput",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidIndex",
    type: "error",
  },
  {
    inputs: [],
    name: "LUPBelowHTP",
    type: "error",
  },
  {
    inputs: [],
    name: "LimitIndexExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "MoveToSameIndex",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAuction",
    type: "error",
  },
  {
    inputs: [],
    name: "NoClaim",
    type: "error",
  },
  {
    inputs: [],
    name: "NoDebt",
    type: "error",
  },
  {
    inputs: [],
    name: "NoReserves",
    type: "error",
  },
  {
    inputs: [],
    name: "NoReservesAuction",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceBelowLUP",
    type: "error",
  },
  {
    inputs: [],
    name: "RemoveDepositLockedByAuctionDebt",
    type: "error",
  },
  {
    inputs: [],
    name: "ReserveAuctionTooSoon",
    type: "error",
  },
  {
    inputs: [],
    name: "TransactionExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToSameOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferorNotApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroDebtToCollateral",
    type: "error",
  },
] as const;

export class IPoolErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IPoolErrorsInterface {
    return new utils.Interface(_abi) as IPoolErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPoolErrors {
    return new Contract(address, _abi, signerOrProvider) as IPoolErrors;
  }
}
