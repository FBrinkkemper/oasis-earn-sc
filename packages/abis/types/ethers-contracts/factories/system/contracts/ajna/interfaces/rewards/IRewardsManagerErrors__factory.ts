/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IRewardsManagerErrors,
  IRewardsManagerErrorsInterface,
} from "../../../../../../system/contracts/ajna/interfaces/rewards/IRewardsManagerErrors";

const _abi = [
  {
    inputs: [],
    name: "AlreadyClaimed",
    type: "error",
  },
  {
    inputs: [],
    name: "DeployWithZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "EpochNotAvailable",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientLiquidity",
    type: "error",
  },
  {
    inputs: [],
    name: "MoveStakedLiquidityInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAjnaPool",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwnerOfDeposit",
    type: "error",
  },
] as const;

export class IRewardsManagerErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IRewardsManagerErrorsInterface {
    return new utils.Interface(_abi) as IRewardsManagerErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRewardsManagerErrors {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IRewardsManagerErrors;
  }
}
