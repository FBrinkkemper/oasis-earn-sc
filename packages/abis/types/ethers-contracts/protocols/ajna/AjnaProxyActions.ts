/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface AjnaProxyActionsInterface extends utils.Interface {
  functions: {
    "ARC()": FunctionFragment;
    "GUARD()": FunctionFragment;
    "WETH()": FunctionFragment;
    "ajnaToken()": FunctionFragment;
    "ajnaVersion()": FunctionFragment;
    "claimRewardsAndSendToOwner(address,uint256)": FunctionFragment;
    "convertPriceToIndex(uint256)": FunctionFragment;
    "deployer()": FunctionFragment;
    "depositAndDraw(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "depositCollateral(address,uint256,uint256,bool)": FunctionFragment;
    "depositCollateralAndDrawDebt(address,uint256,uint256,uint256)": FunctionFragment;
    "drawDebt(address,uint256,uint256)": FunctionFragment;
    "getQuoteAmount(address,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "moveQuote(address,uint256,uint256)": FunctionFragment;
    "moveQuoteNft(address,uint256,uint256,uint256)": FunctionFragment;
    "openEarnPosition(address,uint256,uint256)": FunctionFragment;
    "openEarnPositionNft(address,uint256,uint256)": FunctionFragment;
    "openPosition(address,uint256,uint256,uint256)": FunctionFragment;
    "optInStaking(address,uint256)": FunctionFragment;
    "optOutStaking(address,uint256,uint256)": FunctionFragment;
    "poolInfoUtils()": FunctionFragment;
    "positionManager()": FunctionFragment;
    "removeCollateral(address,uint256)": FunctionFragment;
    "repayAndClose(address)": FunctionFragment;
    "repayDebt(address,uint256,bool)": FunctionFragment;
    "repayDebtAndWithdrawCollateral(address,uint256,uint256)": FunctionFragment;
    "repayWithdraw(address,uint256,uint256,bool)": FunctionFragment;
    "rewardsManager()": FunctionFragment;
    "self()": FunctionFragment;
    "supplyAndMoveQuote(address,uint256,uint256,uint256)": FunctionFragment;
    "supplyAndMoveQuoteNft(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "supplyQuote(address,uint256,uint256)": FunctionFragment;
    "supplyQuoteMintNftAndStake(address,uint256,uint256)": FunctionFragment;
    "supplyQuoteNft(address,uint256,uint256,uint256)": FunctionFragment;
    "unstakeNftAndClaimCollateral(address,uint256,uint256)": FunctionFragment;
    "unstakeNftAndWithdrawQuote(address,uint256,uint256)": FunctionFragment;
    "withdrawAndMoveQuote(address,uint256,uint256,uint256)": FunctionFragment;
    "withdrawAndMoveQuoteNft(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawCollateral(address,uint256)": FunctionFragment;
    "withdrawQuote(address,uint256,uint256)": FunctionFragment;
    "withdrawQuoteNft(address,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ARC"
      | "GUARD"
      | "WETH"
      | "ajnaToken"
      | "ajnaVersion"
      | "claimRewardsAndSendToOwner"
      | "convertPriceToIndex"
      | "deployer"
      | "depositAndDraw"
      | "depositCollateral"
      | "depositCollateralAndDrawDebt"
      | "drawDebt"
      | "getQuoteAmount"
      | "initialize"
      | "moveQuote"
      | "moveQuoteNft"
      | "openEarnPosition"
      | "openEarnPositionNft"
      | "openPosition"
      | "optInStaking"
      | "optOutStaking"
      | "poolInfoUtils"
      | "positionManager"
      | "removeCollateral"
      | "repayAndClose"
      | "repayDebt"
      | "repayDebtAndWithdrawCollateral"
      | "repayWithdraw"
      | "rewardsManager"
      | "self"
      | "supplyAndMoveQuote"
      | "supplyAndMoveQuoteNft"
      | "supplyQuote"
      | "supplyQuoteMintNftAndStake"
      | "supplyQuoteNft"
      | "unstakeNftAndClaimCollateral"
      | "unstakeNftAndWithdrawQuote"
      | "withdrawAndMoveQuote"
      | "withdrawAndMoveQuoteNft"
      | "withdrawCollateral"
      | "withdrawQuote"
      | "withdrawQuoteNft"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ARC", values?: undefined): string;
  encodeFunctionData(functionFragment: "GUARD", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "ajnaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ajnaVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsAndSendToOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertPriceToIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositAndDraw",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralAndDrawDebt",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawDebt",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuoteNft",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openEarnPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openEarnPositionNft",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optInStaking",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optOutStaking",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfoUtils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAndClose",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebtAndWithdrawCollateral",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithdraw",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "self", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyAndMoveQuote",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyAndMoveQuoteNft",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQuote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQuoteMintNftAndStake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQuoteNft",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNftAndClaimCollateral",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNftAndWithdrawQuote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMoveQuote",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMoveQuoteNft",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQuote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQuoteNft",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ARC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GUARD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ajnaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ajnaVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsAndSendToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertPriceToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralAndDrawDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveQuoteNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openEarnPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openEarnPositionNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optInStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optOutStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolInfoUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAndClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtAndWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "self", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyAndMoveQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyAndMoveQuoteNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQuoteMintNftAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQuoteNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNftAndClaimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNftAndWithdrawQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMoveQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMoveQuoteNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQuoteNft",
    data: BytesLike
  ): Result;

  events: {
    "CreatePosition(address,string,string,address,address)": EventFragment;
    "ProxyActionsOperation(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyActionsOperation"): EventFragment;
}

export interface CreatePositionEventObject {
  proxyAddress: string;
  protocol: string;
  positionType: string;
  collateralToken: string;
  debtToken: string;
}
export type CreatePositionEvent = TypedEvent<
  [string, string, string, string, string],
  CreatePositionEventObject
>;

export type CreatePositionEventFilter = TypedEventFilter<CreatePositionEvent>;

export interface ProxyActionsOperationEventObject {
  name: string;
}
export type ProxyActionsOperationEvent = TypedEvent<
  [string],
  ProxyActionsOperationEventObject
>;

export type ProxyActionsOperationEventFilter =
  TypedEventFilter<ProxyActionsOperationEvent>;

export interface AjnaProxyActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AjnaProxyActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ARC(overrides?: CallOverrides): Promise<[string]>;

    GUARD(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    ajnaToken(overrides?: CallOverrides): Promise<[string]>;

    ajnaVersion(overrides?: CallOverrides): Promise<[string]>;

    claimRewardsAndSendToOwner(
      pool: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    convertPriceToIndex(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    depositAndDraw(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositCollateral(
      pool: string,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositCollateralAndDrawDebt(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    drawDebt(
      pool: string,
      debtAmount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getQuoteAmount(
      pool: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount: BigNumber }>;

    initialize(
      _positionManager: string,
      _rewardsManager: string,
      _ARC: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    moveQuote(
      pool: string,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    moveQuoteNft(
      pool: string,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    openEarnPosition(
      pool: string,
      depositAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    openEarnPositionNft(
      pool: string,
      depositAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    openPosition(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    optInStaking(
      pool: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    optOutStaking(
      pool: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    poolInfoUtils(overrides?: CallOverrides): Promise<[string]>;

    positionManager(overrides?: CallOverrides): Promise<[string]>;

    removeCollateral(
      pool: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayAndClose(
      pool: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayDebt(
      pool: string,
      amount: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayDebtAndWithdrawCollateral(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayWithdraw(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardsManager(overrides?: CallOverrides): Promise<[string]>;

    self(overrides?: CallOverrides): Promise<[string]>;

    supplyAndMoveQuote(
      pool: string,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    supplyAndMoveQuoteNft(
      pool: string,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    supplyQuote(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    supplyQuoteMintNftAndStake(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    supplyQuoteNft(
      pool: string,
      amountToAdd: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeNftAndClaimCollateral(
      pool: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeNftAndWithdrawQuote(
      pool: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAndMoveQuote(
      pool: string,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAndMoveQuoteNft(
      pool: string,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawQuote(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawQuoteNft(
      pool: string,
      amountToWithdraw: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ARC(overrides?: CallOverrides): Promise<string>;

  GUARD(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  ajnaToken(overrides?: CallOverrides): Promise<string>;

  ajnaVersion(overrides?: CallOverrides): Promise<string>;

  claimRewardsAndSendToOwner(
    pool: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  convertPriceToIndex(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  depositAndDraw(
    pool: string,
    debtAmount: BigNumberish,
    collateralAmount: BigNumberish,
    price: BigNumberish,
    stamploanEnabled: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositCollateral(
    pool: string,
    collateralAmount: BigNumberish,
    price: BigNumberish,
    stamploanEnabled: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositCollateralAndDrawDebt(
    pool: string,
    debtAmount: BigNumberish,
    collateralAmount: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  drawDebt(
    pool: string,
    debtAmount: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getQuoteAmount(
    pool: string,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _positionManager: string,
    _rewardsManager: string,
    _ARC: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  moveQuote(
    pool: string,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  moveQuoteNft(
    pool: string,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  openEarnPosition(
    pool: string,
    depositAmount: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  openEarnPositionNft(
    pool: string,
    depositAmount: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  openPosition(
    pool: string,
    debtAmount: BigNumberish,
    collateralAmount: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  optInStaking(
    pool: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  optOutStaking(
    pool: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  poolInfoUtils(overrides?: CallOverrides): Promise<string>;

  positionManager(overrides?: CallOverrides): Promise<string>;

  removeCollateral(
    pool: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayAndClose(
    pool: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayDebt(
    pool: string,
    amount: BigNumberish,
    stamploanEnabled: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayDebtAndWithdrawCollateral(
    pool: string,
    debtAmount: BigNumberish,
    collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayWithdraw(
    pool: string,
    debtAmount: BigNumberish,
    collateralAmount: BigNumberish,
    stamploanEnabled: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardsManager(overrides?: CallOverrides): Promise<string>;

  self(overrides?: CallOverrides): Promise<string>;

  supplyAndMoveQuote(
    pool: string,
    amountToAdd: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  supplyAndMoveQuoteNft(
    pool: string,
    amountToAdd: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  supplyQuote(
    pool: string,
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  supplyQuoteMintNftAndStake(
    pool: string,
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  supplyQuoteNft(
    pool: string,
    amountToAdd: BigNumberish,
    price: BigNumberish,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeNftAndClaimCollateral(
    pool: string,
    price: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeNftAndWithdrawQuote(
    pool: string,
    price: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAndMoveQuote(
    pool: string,
    amountToWithdraw: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAndMoveQuoteNft(
    pool: string,
    amountToWithdraw: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    pool: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawQuote(
    pool: string,
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawQuoteNft(
    pool: string,
    amountToWithdraw: BigNumberish,
    price: BigNumberish,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ARC(overrides?: CallOverrides): Promise<string>;

    GUARD(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    ajnaToken(overrides?: CallOverrides): Promise<string>;

    ajnaVersion(overrides?: CallOverrides): Promise<string>;

    claimRewardsAndSendToOwner(
      pool: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    convertPriceToIndex(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    depositAndDraw(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateral(
      pool: string,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateralAndDrawDebt(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    drawDebt(
      pool: string,
      debtAmount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getQuoteAmount(
      pool: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _positionManager: string,
      _rewardsManager: string,
      _ARC: string,
      overrides?: CallOverrides
    ): Promise<void>;

    moveQuote(
      pool: string,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    moveQuoteNft(
      pool: string,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openEarnPosition(
      pool: string,
      depositAmount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openEarnPositionNft(
      pool: string,
      depositAmount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    optInStaking(
      pool: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optOutStaking(
      pool: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolInfoUtils(overrides?: CallOverrides): Promise<string>;

    positionManager(overrides?: CallOverrides): Promise<string>;

    removeCollateral(
      pool: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayAndClose(pool: string, overrides?: CallOverrides): Promise<void>;

    repayDebt(
      pool: string,
      amount: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    repayDebtAndWithdrawCollateral(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayWithdraw(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsManager(overrides?: CallOverrides): Promise<string>;

    self(overrides?: CallOverrides): Promise<string>;

    supplyAndMoveQuote(
      pool: string,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyAndMoveQuoteNft(
      pool: string,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyQuote(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyQuoteMintNftAndStake(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyQuoteNft(
      pool: string,
      amountToAdd: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeNftAndClaimCollateral(
      pool: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeNftAndWithdrawQuote(
      pool: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndMoveQuote(
      pool: string,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndMoveQuoteNft(
      pool: string,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      pool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawQuote(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawQuoteNft(
      pool: string,
      amountToWithdraw: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreatePosition(address,string,string,address,address)"(
      proxyAddress?: string | null,
      protocol?: null,
      positionType?: null,
      collateralToken?: null,
      debtToken?: null
    ): CreatePositionEventFilter;
    CreatePosition(
      proxyAddress?: string | null,
      protocol?: null,
      positionType?: null,
      collateralToken?: null,
      debtToken?: null
    ): CreatePositionEventFilter;

    "ProxyActionsOperation(bytes32)"(
      name?: BytesLike | null
    ): ProxyActionsOperationEventFilter;
    ProxyActionsOperation(
      name?: BytesLike | null
    ): ProxyActionsOperationEventFilter;
  };

  estimateGas: {
    ARC(overrides?: CallOverrides): Promise<BigNumber>;

    GUARD(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    ajnaToken(overrides?: CallOverrides): Promise<BigNumber>;

    ajnaVersion(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewardsAndSendToOwner(
      pool: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    convertPriceToIndex(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndDraw(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositCollateral(
      pool: string,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositCollateralAndDrawDebt(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    drawDebt(
      pool: string,
      debtAmount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getQuoteAmount(
      pool: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _positionManager: string,
      _rewardsManager: string,
      _ARC: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    moveQuote(
      pool: string,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    moveQuoteNft(
      pool: string,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    openEarnPosition(
      pool: string,
      depositAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    openEarnPositionNft(
      pool: string,
      depositAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    openPosition(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    optInStaking(
      pool: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    optOutStaking(
      pool: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    poolInfoUtils(overrides?: CallOverrides): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      pool: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayAndClose(
      pool: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    repayDebt(
      pool: string,
      amount: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    repayDebtAndWithdrawCollateral(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayWithdraw(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    rewardsManager(overrides?: CallOverrides): Promise<BigNumber>;

    self(overrides?: CallOverrides): Promise<BigNumber>;

    supplyAndMoveQuote(
      pool: string,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    supplyAndMoveQuoteNft(
      pool: string,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    supplyQuote(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    supplyQuoteMintNftAndStake(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    supplyQuoteNft(
      pool: string,
      amountToAdd: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeNftAndClaimCollateral(
      pool: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeNftAndWithdrawQuote(
      pool: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAndMoveQuote(
      pool: string,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAndMoveQuoteNft(
      pool: string,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawCollateral(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawQuote(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawQuoteNft(
      pool: string,
      amountToWithdraw: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ARC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ajnaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ajnaVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewardsAndSendToOwner(
      pool: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    convertPriceToIndex(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositAndDraw(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      pool: string,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositCollateralAndDrawDebt(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    drawDebt(
      pool: string,
      debtAmount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getQuoteAmount(
      pool: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _positionManager: string,
      _rewardsManager: string,
      _ARC: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    moveQuote(
      pool: string,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    moveQuoteNft(
      pool: string,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    openEarnPosition(
      pool: string,
      depositAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    openEarnPositionNft(
      pool: string,
      depositAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    openPosition(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    optInStaking(
      pool: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    optOutStaking(
      pool: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    poolInfoUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateral(
      pool: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayAndClose(
      pool: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayDebt(
      pool: string,
      amount: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayDebtAndWithdrawCollateral(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayWithdraw(
      pool: string,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      stamploanEnabled: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    self(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyAndMoveQuote(
      pool: string,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supplyAndMoveQuoteNft(
      pool: string,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supplyQuote(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supplyQuoteMintNftAndStake(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supplyQuoteNft(
      pool: string,
      amountToAdd: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeNftAndClaimCollateral(
      pool: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeNftAndWithdrawQuote(
      pool: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAndMoveQuote(
      pool: string,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAndMoveQuoteNft(
      pool: string,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      pool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawQuote(
      pool: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawQuoteNft(
      pool: string,
      amountToWithdraw: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
