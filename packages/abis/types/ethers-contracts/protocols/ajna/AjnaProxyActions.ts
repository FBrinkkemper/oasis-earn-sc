/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AjnaProxyActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ARC"
      | "GUARD"
      | "WETH"
      | "ajnaToken"
      | "claimRewardsAndSendToOwner"
      | "convertPriceToIndex"
      | "deployer"
      | "depositAndDraw"
      | "depositCollateral"
      | "depositCollateralAndDrawDebt"
      | "drawDebt"
      | "getQuoteAmount"
      | "initialize"
      | "moveQuote"
      | "moveQuoteNft"
      | "openEarnPosition"
      | "openEarnPositionNft"
      | "openPosition"
      | "optInStaking"
      | "optOutStaking"
      | "poolInfoUtils"
      | "positionManager"
      | "removeCollateral"
      | "repayAndClose"
      | "repayDebt"
      | "repayDebtAndWithdrawCollateral"
      | "repayWithdraw"
      | "rewardsManager"
      | "self"
      | "supplyAndMoveQuote"
      | "supplyAndMoveQuoteNft"
      | "supplyQuote"
      | "supplyQuoteMintNftAndStake"
      | "supplyQuoteNft"
      | "unstakeNftAndClaimCollateral"
      | "unstakeNftAndWithdrawQuote"
      | "withdrawAndMoveQuote"
      | "withdrawAndMoveQuoteNft"
      | "withdrawCollateral"
      | "withdrawQuote"
      | "withdrawQuoteNft"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CreatePosition" | "ProxyActionsOperation"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ARC", values?: undefined): string;
  encodeFunctionData(functionFragment: "GUARD", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "ajnaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRewardsAndSendToOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertPriceToIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositAndDraw",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralAndDrawDebt",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawDebt",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuote",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuoteNft",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "openEarnPosition",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "openEarnPositionNft",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optInStaking",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optOutStaking",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfoUtils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAndClose",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebtAndWithdrawCollateral",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithdraw",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "self", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyAndMoveQuote",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyAndMoveQuoteNft",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQuote",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQuoteMintNftAndStake",
    values: [AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQuoteNft",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNftAndClaimCollateral",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeNftAndWithdrawQuote",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMoveQuote",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMoveQuoteNft",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQuote",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQuoteNft",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ARC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GUARD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ajnaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsAndSendToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertPriceToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralAndDrawDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveQuoteNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openEarnPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openEarnPositionNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optInStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optOutStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolInfoUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAndClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtAndWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "self", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyAndMoveQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyAndMoveQuoteNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQuoteMintNftAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQuoteNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNftAndClaimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNftAndWithdrawQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMoveQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMoveQuoteNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQuoteNft",
    data: BytesLike
  ): Result;
}

export namespace CreatePositionEvent {
  export type InputTuple = [
    proxyAddress: AddressLike,
    protocol: string,
    positionType: string,
    collateralToken: AddressLike,
    debtToken: AddressLike
  ];
  export type OutputTuple = [
    proxyAddress: string,
    protocol: string,
    positionType: string,
    collateralToken: string,
    debtToken: string
  ];
  export interface OutputObject {
    proxyAddress: string;
    protocol: string;
    positionType: string;
    collateralToken: string;
    debtToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyActionsOperationEvent {
  export type InputTuple = [name: BytesLike];
  export type OutputTuple = [name: string];
  export interface OutputObject {
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AjnaProxyActions extends BaseContract {
  connect(runner?: ContractRunner | null): AjnaProxyActions;
  waitForDeployment(): Promise<this>;

  interface: AjnaProxyActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ARC: TypedContractMethod<[], [string], "view">;

  GUARD: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  ajnaToken: TypedContractMethod<[], [string], "view">;

  claimRewardsAndSendToOwner: TypedContractMethod<
    [pool: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  convertPriceToIndex: TypedContractMethod<
    [price: BigNumberish],
    [bigint],
    "view"
  >;

  deployer: TypedContractMethod<[], [string], "view">;

  depositAndDraw: TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean
    ],
    [void],
    "payable"
  >;

  depositCollateral: TypedContractMethod<
    [
      pool: AddressLike,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean
    ],
    [void],
    "payable"
  >;

  depositCollateralAndDrawDebt: TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  drawDebt: TypedContractMethod<
    [pool: AddressLike, debtAmount: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getQuoteAmount: TypedContractMethod<
    [pool: AddressLike, price: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _positionManager: AddressLike,
      _rewardsManager: AddressLike,
      _ARC: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  moveQuote: TypedContractMethod<
    [
      pool: AddressLike,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "nonpayable"
  >;

  moveQuoteNft: TypedContractMethod<
    [
      pool: AddressLike,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;

  openEarnPosition: TypedContractMethod<
    [
      pool: AddressLike,
      depositAmount: BigNumberish,
      price: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;

  openEarnPositionNft: TypedContractMethod<
    [
      pool: AddressLike,
      depositAmount: BigNumberish,
      price: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;

  openPosition: TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "payable"
  >;

  optInStaking: TypedContractMethod<
    [pool: AddressLike, price: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  optOutStaking: TypedContractMethod<
    [pool: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  poolInfoUtils: TypedContractMethod<[], [string], "view">;

  positionManager: TypedContractMethod<[], [string], "view">;

  removeCollateral: TypedContractMethod<
    [pool: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  repayAndClose: TypedContractMethod<[pool: AddressLike], [void], "payable">;

  repayDebt: TypedContractMethod<
    [pool: AddressLike, amount: BigNumberish, stamploanEnabled: boolean],
    [void],
    "payable"
  >;

  repayDebtAndWithdrawCollateral: TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  repayWithdraw: TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      stamploanEnabled: boolean
    ],
    [void],
    "payable"
  >;

  rewardsManager: TypedContractMethod<[], [string], "view">;

  self: TypedContractMethod<[], [string], "view">;

  supplyAndMoveQuote: TypedContractMethod<
    [
      pool: AddressLike,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;

  supplyAndMoveQuoteNft: TypedContractMethod<
    [
      pool: AddressLike,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;

  supplyQuote: TypedContractMethod<
    [
      pool: AddressLike,
      amount: BigNumberish,
      price: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;

  supplyQuoteMintNftAndStake: TypedContractMethod<
    [
      pool: AddressLike,
      amount: BigNumberish,
      price: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [bigint],
    "payable"
  >;

  supplyQuoteNft: TypedContractMethod<
    [
      pool: AddressLike,
      amountToAdd: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;

  unstakeNftAndClaimCollateral: TypedContractMethod<
    [pool: AddressLike, price: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unstakeNftAndWithdrawQuote: TypedContractMethod<
    [pool: AddressLike, price: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAndMoveQuote: TypedContractMethod<
    [
      pool: AddressLike,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "nonpayable"
  >;

  withdrawAndMoveQuoteNft: TypedContractMethod<
    [
      pool: AddressLike,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;

  withdrawCollateral: TypedContractMethod<
    [pool: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawQuote: TypedContractMethod<
    [pool: AddressLike, amount: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawQuoteNft: TypedContractMethod<
    [
      pool: AddressLike,
      amountToWithdraw: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ARC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GUARD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ajnaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimRewardsAndSendToOwner"
  ): TypedContractMethod<
    [pool: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "convertPriceToIndex"
  ): TypedContractMethod<[price: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "deployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositAndDraw"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      collateralAmount: BigNumberish,
      price: BigNumberish,
      stamploanEnabled: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositCollateralAndDrawDebt"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "drawDebt"
  ): TypedContractMethod<
    [pool: AddressLike, debtAmount: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getQuoteAmount"
  ): TypedContractMethod<
    [pool: AddressLike, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _positionManager: AddressLike,
      _rewardsManager: AddressLike,
      _ARC: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "moveQuote"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "moveQuoteNft"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "openEarnPosition"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      depositAmount: BigNumberish,
      price: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "openEarnPositionNft"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      depositAmount: BigNumberish,
      price: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "openPosition"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "optInStaking"
  ): TypedContractMethod<
    [pool: AddressLike, price: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "optOutStaking"
  ): TypedContractMethod<
    [pool: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolInfoUtils"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeCollateral"
  ): TypedContractMethod<
    [pool: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayAndClose"
  ): TypedContractMethod<[pool: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "repayDebt"
  ): TypedContractMethod<
    [pool: AddressLike, amount: BigNumberish, stamploanEnabled: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "repayDebtAndWithdrawCollateral"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayWithdraw"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      debtAmount: BigNumberish,
      collateralAmount: BigNumberish,
      stamploanEnabled: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rewardsManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "self"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supplyAndMoveQuote"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supplyAndMoveQuoteNft"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      amountToAdd: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supplyQuote"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      amount: BigNumberish,
      price: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supplyQuoteMintNftAndStake"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      amount: BigNumberish,
      price: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supplyQuoteNft"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      amountToAdd: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unstakeNftAndClaimCollateral"
  ): TypedContractMethod<
    [pool: AddressLike, price: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstakeNftAndWithdrawQuote"
  ): TypedContractMethod<
    [pool: AddressLike, price: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAndMoveQuote"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAndMoveQuoteNft"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      amountToWithdraw: BigNumberish,
      oldPrice: BigNumberish,
      newPrice: BigNumberish,
      tokenId: BigNumberish,
      revertIfBelowLup: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [pool: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawQuote"
  ): TypedContractMethod<
    [pool: AddressLike, amount: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawQuoteNft"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      amountToWithdraw: BigNumberish,
      price: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "CreatePosition"
  ): TypedContractEvent<
    CreatePositionEvent.InputTuple,
    CreatePositionEvent.OutputTuple,
    CreatePositionEvent.OutputObject
  >;
  getEvent(
    key: "ProxyActionsOperation"
  ): TypedContractEvent<
    ProxyActionsOperationEvent.InputTuple,
    ProxyActionsOperationEvent.OutputTuple,
    ProxyActionsOperationEvent.OutputObject
  >;

  filters: {
    "CreatePosition(address,string,string,address,address)": TypedContractEvent<
      CreatePositionEvent.InputTuple,
      CreatePositionEvent.OutputTuple,
      CreatePositionEvent.OutputObject
    >;
    CreatePosition: TypedContractEvent<
      CreatePositionEvent.InputTuple,
      CreatePositionEvent.OutputTuple,
      CreatePositionEvent.OutputObject
    >;

    "ProxyActionsOperation(bytes32)": TypedContractEvent<
      ProxyActionsOperationEvent.InputTuple,
      ProxyActionsOperationEvent.OutputTuple,
      ProxyActionsOperationEvent.OutputObject
    >;
    ProxyActionsOperation: TypedContractEvent<
      ProxyActionsOperationEvent.InputTuple,
      ProxyActionsOperationEvent.OutputTuple,
      ProxyActionsOperationEvent.OutputObject
    >;
  };
}
