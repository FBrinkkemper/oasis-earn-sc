/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PoolInfoUtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionStatus"
      | "availableQuoteTokenAmount"
      | "borrowFeeRate"
      | "borrowerInfo"
      | "bucketInfo"
      | "hpb"
      | "hpbIndex"
      | "htp"
      | "indexToPrice"
      | "lenderInterestMargin"
      | "lpToCollateral"
      | "lpToQuoteTokens"
      | "lup"
      | "lupIndex"
      | "momp"
      | "poolLoansInfo"
      | "poolPricesInfo"
      | "poolReservesInfo"
      | "poolUtilizationInfo"
      | "priceToIndex"
      | "unutilizedDepositFeeRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionStatus",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "availableQuoteTokenAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowFeeRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hpb", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "hpbIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "htp", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "indexToPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderInterestMargin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lpToCollateral",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpToQuoteTokens",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lup", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "lupIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "momp", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "poolLoansInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolPricesInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolReservesInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolUtilizationInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceToIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unutilizedDepositFeeRate",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableQuoteTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bucketInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hpb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hpbIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "htp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexToPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderInterestMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpToCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpToQuoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lupIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "momp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolLoansInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolPricesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolReservesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolUtilizationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unutilizedDepositFeeRate",
    data: BytesLike
  ): Result;
}

export interface PoolInfoUtils extends BaseContract {
  connect(runner?: ContractRunner | null): PoolInfoUtils;
  waitForDeployment(): Promise<this>;

  interface: PoolInfoUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionStatus: TypedContractMethod<
    [ajnaPool_: AddressLike, borrower_: AddressLike],
    [
      [bigint, bigint, bigint, boolean, bigint, bigint] & {
        kickTime_: bigint;
        collateral_: bigint;
        debtToCover_: bigint;
        isCollateralized_: boolean;
        price_: bigint;
        neutralPrice_: bigint;
      }
    ],
    "view"
  >;

  availableQuoteTokenAmount: TypedContractMethod<
    [ajnaPool_: AddressLike],
    [bigint],
    "view"
  >;

  borrowFeeRate: TypedContractMethod<
    [ajnaPool_: AddressLike],
    [bigint],
    "view"
  >;

  borrowerInfo: TypedContractMethod<
    [ajnaPool_: AddressLike, borrower_: AddressLike],
    [
      [bigint, bigint, bigint] & {
        debt_: bigint;
        collateral_: bigint;
        t0Np_: bigint;
      }
    ],
    "view"
  >;

  bucketInfo: TypedContractMethod<
    [ajnaPool_: AddressLike, index_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        price_: bigint;
        quoteTokens_: bigint;
        collateral_: bigint;
        bucketLP_: bigint;
        scale_: bigint;
        exchangeRate_: bigint;
      }
    ],
    "view"
  >;

  hpb: TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;

  hpbIndex: TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;

  htp: TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;

  indexToPrice: TypedContractMethod<[index_: BigNumberish], [bigint], "view">;

  lenderInterestMargin: TypedContractMethod<
    [ajnaPool_: AddressLike],
    [bigint],
    "view"
  >;

  lpToCollateral: TypedContractMethod<
    [ajnaPool_: AddressLike, lp_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;

  lpToQuoteTokens: TypedContractMethod<
    [ajnaPool_: AddressLike, lp_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;

  lup: TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;

  lupIndex: TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;

  momp: TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;

  poolLoansInfo: TypedContractMethod<
    [ajnaPool_: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint] & {
        poolSize_: bigint;
        loansCount_: bigint;
        maxBorrower_: string;
        pendingInflator_: bigint;
        pendingInterestFactor_: bigint;
      }
    ],
    "view"
  >;

  poolPricesInfo: TypedContractMethod<
    [ajnaPool_: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        hpb_: bigint;
        hpbIndex_: bigint;
        htp_: bigint;
        htpIndex_: bigint;
        lup_: bigint;
        lupIndex_: bigint;
      }
    ],
    "view"
  >;

  poolReservesInfo: TypedContractMethod<
    [ajnaPool_: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        reserves_: bigint;
        claimableReserves_: bigint;
        claimableReservesRemaining_: bigint;
        auctionPrice_: bigint;
        timeRemaining_: bigint;
      }
    ],
    "view"
  >;

  poolUtilizationInfo: TypedContractMethod<
    [ajnaPool_: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        poolMinDebtAmount_: bigint;
        poolCollateralization_: bigint;
        poolActualUtilization_: bigint;
        poolTargetUtilization_: bigint;
      }
    ],
    "view"
  >;

  priceToIndex: TypedContractMethod<[price_: BigNumberish], [bigint], "view">;

  unutilizedDepositFeeRate: TypedContractMethod<
    [ajnaPool_: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionStatus"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike, borrower_: AddressLike],
    [
      [bigint, bigint, bigint, boolean, bigint, bigint] & {
        kickTime_: bigint;
        collateral_: bigint;
        debtToCover_: bigint;
        isCollateralized_: boolean;
        price_: bigint;
        neutralPrice_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "availableQuoteTokenAmount"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowFeeRate"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowerInfo"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike, borrower_: AddressLike],
    [
      [bigint, bigint, bigint] & {
        debt_: bigint;
        collateral_: bigint;
        t0Np_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bucketInfo"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike, index_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        price_: bigint;
        quoteTokens_: bigint;
        collateral_: bigint;
        bucketLP_: bigint;
        scale_: bigint;
        exchangeRate_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hpb"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hpbIndex"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "htp"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "indexToPrice"
  ): TypedContractMethod<[index_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "lenderInterestMargin"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpToCollateral"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike, lp_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lpToQuoteTokens"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike, lp_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lup"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lupIndex"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "momp"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolLoansInfo"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint] & {
        poolSize_: bigint;
        loansCount_: bigint;
        maxBorrower_: string;
        pendingInflator_: bigint;
        pendingInterestFactor_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolPricesInfo"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        hpb_: bigint;
        hpbIndex_: bigint;
        htp_: bigint;
        htpIndex_: bigint;
        lup_: bigint;
        lupIndex_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolReservesInfo"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        reserves_: bigint;
        claimableReserves_: bigint;
        claimableReservesRemaining_: bigint;
        auctionPrice_: bigint;
        timeRemaining_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolUtilizationInfo"
  ): TypedContractMethod<
    [ajnaPool_: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        poolMinDebtAmount_: bigint;
        poolCollateralization_: bigint;
        poolActualUtilization_: bigint;
        poolTargetUtilization_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceToIndex"
  ): TypedContractMethod<[price_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "unutilizedDepositFeeRate"
  ): TypedContractMethod<[ajnaPool_: AddressLike], [bigint], "view">;

  filters: {};
}
