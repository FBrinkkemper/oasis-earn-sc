/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface AccountGuardInterface extends utils.Interface {
  functions: {
    "canCall(address,address)": FunctionFragment;
    "canCallAndWhitelisted(address,address,address,bool)": FunctionFragment;
    "changeOwner(address,address)": FunctionFragment;
    "initializeFactory()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "isWhitelistedSend(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "owners(address)": FunctionFragment;
    "permit(address,address,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "setWhitelistSend(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canCall"
      | "canCallAndWhitelisted"
      | "changeOwner"
      | "initializeFactory"
      | "isWhitelisted"
      | "isWhitelistedSend"
      | "owner"
      | "owners"
      | "permit"
      | "renounceOwnership"
      | "setWhitelist"
      | "setWhitelistSend"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canCall",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "canCallAndWhitelisted",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedSend",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owners", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistSend",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canCallAndWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PermissionGranted(address,address)": EventFragment;
    "PermissionRevoked(address,address)": EventFragment;
    "ProxyOwnershipTransferred(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyOwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PermissionGrantedEventObject {
  caller: string;
  proxy: string;
}
export type PermissionGrantedEvent = TypedEvent<
  [string, string],
  PermissionGrantedEventObject
>;

export type PermissionGrantedEventFilter =
  TypedEventFilter<PermissionGrantedEvent>;

export interface PermissionRevokedEventObject {
  caller: string;
  proxy: string;
}
export type PermissionRevokedEvent = TypedEvent<
  [string, string],
  PermissionRevokedEventObject
>;

export type PermissionRevokedEventFilter =
  TypedEventFilter<PermissionRevokedEvent>;

export interface ProxyOwnershipTransferredEventObject {
  newOwner: string;
  oldAddress: string;
  proxy: string;
}
export type ProxyOwnershipTransferredEvent = TypedEvent<
  [string, string, string],
  ProxyOwnershipTransferredEventObject
>;

export type ProxyOwnershipTransferredEventFilter =
  TypedEventFilter<ProxyOwnershipTransferredEvent>;

export interface AccountGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canCall(
      target: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canCallAndWhitelisted(
      proxy: string,
      operator: string,
      callTarget: string,
      asDelegateCall: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean]>;

    changeOwner(
      newOwner: string,
      target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isWhitelisted(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedSend(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    owners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    permit(
      caller: string,
      target: string,
      allowance: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWhitelist(
      target: string,
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWhitelistSend(
      target: string,
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  canCall(
    target: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canCallAndWhitelisted(
    proxy: string,
    operator: string,
    callTarget: string,
    asDelegateCall: boolean,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean]>;

  changeOwner(
    newOwner: string,
    target: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeFactory(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isWhitelisted(target: string, overrides?: CallOverrides): Promise<boolean>;

  isWhitelistedSend(
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  owners(arg0: string, overrides?: CallOverrides): Promise<string>;

  permit(
    caller: string,
    target: string,
    allowance: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWhitelist(
    target: string,
    status: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWhitelistSend(
    target: string,
    status: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    canCall(
      target: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canCallAndWhitelisted(
      proxy: string,
      operator: string,
      callTarget: string,
      asDelegateCall: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean]>;

    changeOwner(
      newOwner: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeFactory(overrides?: CallOverrides): Promise<void>;

    isWhitelisted(target: string, overrides?: CallOverrides): Promise<boolean>;

    isWhitelistedSend(
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    owners(arg0: string, overrides?: CallOverrides): Promise<string>;

    permit(
      caller: string,
      target: string,
      allowance: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setWhitelist(
      target: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistSend(
      target: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PermissionGranted(address,address)"(
      caller?: string | null,
      proxy?: string | null
    ): PermissionGrantedEventFilter;
    PermissionGranted(
      caller?: string | null,
      proxy?: string | null
    ): PermissionGrantedEventFilter;

    "PermissionRevoked(address,address)"(
      caller?: string | null,
      proxy?: string | null
    ): PermissionRevokedEventFilter;
    PermissionRevoked(
      caller?: string | null,
      proxy?: string | null
    ): PermissionRevokedEventFilter;

    "ProxyOwnershipTransferred(address,address,address)"(
      newOwner?: string | null,
      oldAddress?: string | null,
      proxy?: string | null
    ): ProxyOwnershipTransferredEventFilter;
    ProxyOwnershipTransferred(
      newOwner?: string | null,
      oldAddress?: string | null,
      proxy?: string | null
    ): ProxyOwnershipTransferredEventFilter;
  };

  estimateGas: {
    canCall(
      target: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCallAndWhitelisted(
      proxy: string,
      operator: string,
      callTarget: string,
      asDelegateCall: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeOwner(
      newOwner: string,
      target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isWhitelisted(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedSend(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      caller: string,
      target: string,
      allowance: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWhitelist(
      target: string,
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWhitelistSend(
      target: string,
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canCall(
      target: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canCallAndWhitelisted(
      proxy: string,
      operator: string,
      callTarget: string,
      asDelegateCall: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeOwner(
      newOwner: string,
      target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedSend(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      caller: string,
      target: string,
      allowance: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      target: string,
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWhitelistSend(
      target: string,
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
