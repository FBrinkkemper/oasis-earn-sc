/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type CallStruct = {
  targetHash: BytesLike;
  callData: BytesLike;
  skipped: boolean;
};

export type CallStructOutput = [
  targetHash: string,
  callData: string,
  skipped: boolean
] & { targetHash: string; callData: string; skipped: boolean };

export interface OperationExecutorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackAggregate"
      | "checkIfFlashloanedAmountIsTheRequiredOne"
      | "checkIfFlashloanedAssetIsTheRequiredOne"
      | "checkIfLenderIsTrusted"
      | "executeOp"
      | "onFlashLoan"
      | "receiveFlashLoan"
      | "registry"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Operation"): EventFragment;

  encodeFunctionData(
    functionFragment: "callbackAggregate",
    values: [CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfFlashloanedAmountIsTheRequiredOne",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfFlashloanedAssetIsTheRequiredOne",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfLenderIsTrusted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOp",
    values: [CallStruct[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFlashLoan",
    values: [AddressLike[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "callbackAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfFlashloanedAmountIsTheRequiredOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfFlashloanedAssetIsTheRequiredOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfLenderIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executeOp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
}

export namespace OperationEvent {
  export type InputTuple = [name: BytesLike, calls: CallStruct[]];
  export type OutputTuple = [name: string, calls: CallStructOutput[]];
  export interface OutputObject {
    name: string;
    calls: CallStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OperationExecutor extends BaseContract {
  connect(runner?: ContractRunner | null): OperationExecutor;
  waitForDeployment(): Promise<this>;

  interface: OperationExecutorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackAggregate: TypedContractMethod<
    [calls: CallStruct[]],
    [void],
    "nonpayable"
  >;

  checkIfFlashloanedAmountIsTheRequiredOne: TypedContractMethod<
    [asset: AddressLike, requiredAmount: BigNumberish],
    [void],
    "view"
  >;

  checkIfFlashloanedAssetIsTheRequiredOne: TypedContractMethod<
    [flashloaned: AddressLike, required: AddressLike],
    [void],
    "view"
  >;

  checkIfLenderIsTrusted: TypedContractMethod<
    [lender: AddressLike],
    [void],
    "view"
  >;

  executeOp: TypedContractMethod<
    [calls: CallStruct[], operationName: string],
    [void],
    "payable"
  >;

  onFlashLoan: TypedContractMethod<
    [
      initiator: AddressLike,
      asset: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  receiveFlashLoan: TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackAggregate"
  ): TypedContractMethod<[calls: CallStruct[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIfFlashloanedAmountIsTheRequiredOne"
  ): TypedContractMethod<
    [asset: AddressLike, requiredAmount: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkIfFlashloanedAssetIsTheRequiredOne"
  ): TypedContractMethod<
    [flashloaned: AddressLike, required: AddressLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkIfLenderIsTrusted"
  ): TypedContractMethod<[lender: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "executeOp"
  ): TypedContractMethod<
    [calls: CallStruct[], operationName: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onFlashLoan"
  ): TypedContractMethod<
    [
      initiator: AddressLike,
      asset: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveFlashLoan"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      amounts: BigNumberish[],
      feeAmounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Operation"
  ): TypedContractEvent<
    OperationEvent.InputTuple,
    OperationEvent.OutputTuple,
    OperationEvent.OutputObject
  >;

  filters: {
    "Operation(bytes32,tuple[])": TypedContractEvent<
      OperationEvent.InputTuple,
      OperationEvent.OutputTuple,
      OperationEvent.OutputObject
    >;
    Operation: TypedContractEvent<
      OperationEvent.InputTuple,
      OperationEvent.OutputTuple,
      OperationEvent.OutputObject
    >;
  };
}
