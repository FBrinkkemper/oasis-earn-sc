/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface OperationStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "actions"
      | "at"
      | "clearStorage"
      | "hasActionsToVerify"
      | "initiator"
      | "len"
      | "lock"
      | "optionals"
      | "push"
      | "returnValues"
      | "setInitiator"
      | "setOperationActions"
      | "unlock"
      | "valuesHolders"
      | "verifyAction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "actions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "at",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasActionsToVerify",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initiator", values?: undefined): string;
  encodeFunctionData(functionFragment: "len", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optionals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "push", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "returnValues",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitiator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationActions",
    values: [BytesLike[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "valuesHolders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAction",
    values: [BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "actions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "at", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasActionsToVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initiator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "len", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optionals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitiator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valuesHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAction",
    data: BytesLike
  ): Result;
}

export interface OperationStorage extends BaseContract {
  connect(runner?: ContractRunner | null): OperationStorage;
  waitForDeployment(): Promise<this>;

  interface: OperationStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  actions: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  at: TypedContractMethod<
    [index: BigNumberish, who: AddressLike],
    [string],
    "view"
  >;

  clearStorage: TypedContractMethod<[], [void], "nonpayable">;

  hasActionsToVerify: TypedContractMethod<[], [boolean], "view">;

  initiator: TypedContractMethod<[], [string], "view">;

  len: TypedContractMethod<[who: AddressLike], [bigint], "view">;

  lock: TypedContractMethod<[], [void], "nonpayable">;

  optionals: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  push: TypedContractMethod<[value: BytesLike], [void], "nonpayable">;

  returnValues: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  setInitiator: TypedContractMethod<
    [_initiator: AddressLike],
    [void],
    "nonpayable"
  >;

  setOperationActions: TypedContractMethod<
    [_actions: BytesLike[], _optionals: boolean[]],
    [void],
    "nonpayable"
  >;

  unlock: TypedContractMethod<[], [void], "nonpayable">;

  valuesHolders: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  verifyAction: TypedContractMethod<
    [actionHash: BytesLike, skipped: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "actions"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "at"
  ): TypedContractMethod<
    [index: BigNumberish, who: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "clearStorage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasActionsToVerify"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initiator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "len"
  ): TypedContractMethod<[who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "optionals"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "push"
  ): TypedContractMethod<[value: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "returnValues"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setInitiator"
  ): TypedContractMethod<[_initiator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperationActions"
  ): TypedContractMethod<
    [_actions: BytesLike[], _optionals: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "valuesHolders"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifyAction"
  ): TypedContractMethod<
    [actionHash: BytesLike, skipped: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
