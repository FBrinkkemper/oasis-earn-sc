/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ServiceRegistryInterface extends utils.Interface {
  functions: {
    "MAX_DELAY()": FunctionFragment;
    "addNamedService(bytes32,address)": FunctionFragment;
    "changeRequiredDelay(uint256)": FunctionFragment;
    "clearScheduledExecution(bytes32)": FunctionFragment;
    "getRegisteredService(string)": FunctionFragment;
    "getServiceAddress(bytes32)": FunctionFragment;
    "getServiceNameHash(string)": FunctionFragment;
    "lastExecuted(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeNamedService(bytes32)": FunctionFragment;
    "requiredDelay()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_DELAY"
      | "addNamedService"
      | "changeRequiredDelay"
      | "clearScheduledExecution"
      | "getRegisteredService"
      | "getServiceAddress"
      | "getServiceNameHash"
      | "lastExecuted"
      | "owner"
      | "removeNamedService"
      | "requiredDelay"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addNamedService",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearScheduledExecution",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceNameHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastExecuted",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeNamedService",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNamedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearScheduledExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceNameHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNamedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChangeApplied(bytes32,uint256,bytes)": EventFragment;
    "ChangeCancelled(bytes32)": EventFragment;
    "ChangeScheduled(bytes32,uint256,bytes)": EventFragment;
    "NamedServiceAdded(bytes32,address)": EventFragment;
    "NamedServiceRemoved(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NamedServiceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NamedServiceRemoved"): EventFragment;
}

export interface ChangeAppliedEventObject {
  dataHash: string;
  appliedAt: BigNumber;
  data: string;
}
export type ChangeAppliedEvent = TypedEvent<
  [string, BigNumber, string],
  ChangeAppliedEventObject
>;

export type ChangeAppliedEventFilter = TypedEventFilter<ChangeAppliedEvent>;

export interface ChangeCancelledEventObject {
  dataHash: string;
}
export type ChangeCancelledEvent = TypedEvent<
  [string],
  ChangeCancelledEventObject
>;

export type ChangeCancelledEventFilter = TypedEventFilter<ChangeCancelledEvent>;

export interface ChangeScheduledEventObject {
  dataHash: string;
  scheduledFor: BigNumber;
  data: string;
}
export type ChangeScheduledEvent = TypedEvent<
  [string, BigNumber, string],
  ChangeScheduledEventObject
>;

export type ChangeScheduledEventFilter = TypedEventFilter<ChangeScheduledEvent>;

export interface NamedServiceAddedEventObject {
  nameHash: string;
  service: string;
}
export type NamedServiceAddedEvent = TypedEvent<
  [string, string],
  NamedServiceAddedEventObject
>;

export type NamedServiceAddedEventFilter =
  TypedEventFilter<NamedServiceAddedEvent>;

export interface NamedServiceRemovedEventObject {
  nameHash: string;
}
export type NamedServiceRemovedEvent = TypedEvent<
  [string],
  NamedServiceRemovedEventObject
>;

export type NamedServiceRemovedEventFilter =
  TypedEventFilter<NamedServiceRemovedEvent>;

export interface ServiceRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ServiceRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    addNamedService(
      serviceNameHash: PromiseOrValue<BytesLike>,
      serviceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeRequiredDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearScheduledExecution(
      scheduledExecution: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRegisteredService(
      serviceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getServiceAddress(
      serviceNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getServiceNameHash(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lastExecuted(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeNamedService(
      serviceNameHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requiredDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  addNamedService(
    serviceNameHash: PromiseOrValue<BytesLike>,
    serviceAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeRequiredDelay(
    newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearScheduledExecution(
    scheduledExecution: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRegisteredService(
    serviceName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getServiceAddress(
    serviceNameHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getServiceNameHash(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  lastExecuted(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeNamedService(
    serviceNameHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requiredDelay(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    addNamedService(
      serviceNameHash: PromiseOrValue<BytesLike>,
      serviceAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRequiredDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearScheduledExecution(
      scheduledExecution: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRegisteredService(
      serviceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getServiceAddress(
      serviceNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getServiceNameHash(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    lastExecuted(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeNamedService(
      serviceNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    requiredDelay(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeApplied(bytes32,uint256,bytes)"(
      dataHash?: null,
      appliedAt?: null,
      data?: null
    ): ChangeAppliedEventFilter;
    ChangeApplied(
      dataHash?: null,
      appliedAt?: null,
      data?: null
    ): ChangeAppliedEventFilter;

    "ChangeCancelled(bytes32)"(dataHash?: null): ChangeCancelledEventFilter;
    ChangeCancelled(dataHash?: null): ChangeCancelledEventFilter;

    "ChangeScheduled(bytes32,uint256,bytes)"(
      dataHash?: null,
      scheduledFor?: null,
      data?: null
    ): ChangeScheduledEventFilter;
    ChangeScheduled(
      dataHash?: null,
      scheduledFor?: null,
      data?: null
    ): ChangeScheduledEventFilter;

    "NamedServiceAdded(bytes32,address)"(
      nameHash?: null,
      service?: null
    ): NamedServiceAddedEventFilter;
    NamedServiceAdded(
      nameHash?: null,
      service?: null
    ): NamedServiceAddedEventFilter;

    "NamedServiceRemoved(bytes32)"(
      nameHash?: null
    ): NamedServiceRemovedEventFilter;
    NamedServiceRemoved(nameHash?: null): NamedServiceRemovedEventFilter;
  };

  estimateGas: {
    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    addNamedService(
      serviceNameHash: PromiseOrValue<BytesLike>,
      serviceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeRequiredDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearScheduledExecution(
      scheduledExecution: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRegisteredService(
      serviceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceAddress(
      serviceNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceNameHash(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastExecuted(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeNamedService(
      serviceNameHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requiredDelay(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNamedService(
      serviceNameHash: PromiseOrValue<BytesLike>,
      serviceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeRequiredDelay(
      newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearScheduledExecution(
      scheduledExecution: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRegisteredService(
      serviceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceAddress(
      serviceNameHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceNameHash(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastExecuted(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeNamedService(
      serviceNameHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requiredDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
