/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ServiceRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_DELAY"
      | "addNamedService"
      | "changeRequiredDelay"
      | "clearScheduledExecution"
      | "getRegisteredService"
      | "getServiceAddress"
      | "getServiceNameHash"
      | "lastExecuted"
      | "owner"
      | "removeNamedService"
      | "requiredDelay"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeApplied"
      | "ChangeCancelled"
      | "ChangeScheduled"
      | "NamedServiceAdded"
      | "NamedServiceRemoved"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addNamedService",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearScheduledExecution",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredService",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceNameHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastExecuted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeNamedService",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNamedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearScheduledExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceNameHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNamedService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ChangeAppliedEvent {
  export type InputTuple = [
    dataHash: BytesLike,
    appliedAt: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [dataHash: string, appliedAt: bigint, data: string];
  export interface OutputObject {
    dataHash: string;
    appliedAt: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCancelledEvent {
  export type InputTuple = [dataHash: BytesLike];
  export type OutputTuple = [dataHash: string];
  export interface OutputObject {
    dataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeScheduledEvent {
  export type InputTuple = [
    dataHash: BytesLike,
    scheduledFor: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    dataHash: string,
    scheduledFor: bigint,
    data: string
  ];
  export interface OutputObject {
    dataHash: string;
    scheduledFor: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NamedServiceAddedEvent {
  export type InputTuple = [nameHash: BytesLike, service: AddressLike];
  export type OutputTuple = [nameHash: string, service: string];
  export interface OutputObject {
    nameHash: string;
    service: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NamedServiceRemovedEvent {
  export type InputTuple = [nameHash: BytesLike];
  export type OutputTuple = [nameHash: string];
  export interface OutputObject {
    nameHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ServiceRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ServiceRegistry;
  waitForDeployment(): Promise<this>;

  interface: ServiceRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_DELAY: TypedContractMethod<[], [bigint], "view">;

  addNamedService: TypedContractMethod<
    [serviceNameHash: BytesLike, serviceAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  changeRequiredDelay: TypedContractMethod<
    [newDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  clearScheduledExecution: TypedContractMethod<
    [scheduledExecution: BytesLike],
    [void],
    "nonpayable"
  >;

  getRegisteredService: TypedContractMethod<
    [serviceName: string],
    [string],
    "view"
  >;

  getServiceAddress: TypedContractMethod<
    [serviceNameHash: BytesLike],
    [string],
    "view"
  >;

  getServiceNameHash: TypedContractMethod<[name: string], [string], "view">;

  lastExecuted: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeNamedService: TypedContractMethod<
    [serviceNameHash: BytesLike],
    [void],
    "nonpayable"
  >;

  requiredDelay: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addNamedService"
  ): TypedContractMethod<
    [serviceNameHash: BytesLike, serviceAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeRequiredDelay"
  ): TypedContractMethod<[newDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearScheduledExecution"
  ): TypedContractMethod<[scheduledExecution: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRegisteredService"
  ): TypedContractMethod<[serviceName: string], [string], "view">;
  getFunction(
    nameOrSignature: "getServiceAddress"
  ): TypedContractMethod<[serviceNameHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getServiceNameHash"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "lastExecuted"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeNamedService"
  ): TypedContractMethod<[serviceNameHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiredDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChangeApplied"
  ): TypedContractEvent<
    ChangeAppliedEvent.InputTuple,
    ChangeAppliedEvent.OutputTuple,
    ChangeAppliedEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCancelled"
  ): TypedContractEvent<
    ChangeCancelledEvent.InputTuple,
    ChangeCancelledEvent.OutputTuple,
    ChangeCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ChangeScheduled"
  ): TypedContractEvent<
    ChangeScheduledEvent.InputTuple,
    ChangeScheduledEvent.OutputTuple,
    ChangeScheduledEvent.OutputObject
  >;
  getEvent(
    key: "NamedServiceAdded"
  ): TypedContractEvent<
    NamedServiceAddedEvent.InputTuple,
    NamedServiceAddedEvent.OutputTuple,
    NamedServiceAddedEvent.OutputObject
  >;
  getEvent(
    key: "NamedServiceRemoved"
  ): TypedContractEvent<
    NamedServiceRemovedEvent.InputTuple,
    NamedServiceRemovedEvent.OutputTuple,
    NamedServiceRemovedEvent.OutputObject
  >;

  filters: {
    "ChangeApplied(bytes32,uint256,bytes)": TypedContractEvent<
      ChangeAppliedEvent.InputTuple,
      ChangeAppliedEvent.OutputTuple,
      ChangeAppliedEvent.OutputObject
    >;
    ChangeApplied: TypedContractEvent<
      ChangeAppliedEvent.InputTuple,
      ChangeAppliedEvent.OutputTuple,
      ChangeAppliedEvent.OutputObject
    >;

    "ChangeCancelled(bytes32)": TypedContractEvent<
      ChangeCancelledEvent.InputTuple,
      ChangeCancelledEvent.OutputTuple,
      ChangeCancelledEvent.OutputObject
    >;
    ChangeCancelled: TypedContractEvent<
      ChangeCancelledEvent.InputTuple,
      ChangeCancelledEvent.OutputTuple,
      ChangeCancelledEvent.OutputObject
    >;

    "ChangeScheduled(bytes32,uint256,bytes)": TypedContractEvent<
      ChangeScheduledEvent.InputTuple,
      ChangeScheduledEvent.OutputTuple,
      ChangeScheduledEvent.OutputObject
    >;
    ChangeScheduled: TypedContractEvent<
      ChangeScheduledEvent.InputTuple,
      ChangeScheduledEvent.OutputTuple,
      ChangeScheduledEvent.OutputObject
    >;

    "NamedServiceAdded(bytes32,address)": TypedContractEvent<
      NamedServiceAddedEvent.InputTuple,
      NamedServiceAddedEvent.OutputTuple,
      NamedServiceAddedEvent.OutputObject
    >;
    NamedServiceAdded: TypedContractEvent<
      NamedServiceAddedEvent.InputTuple,
      NamedServiceAddedEvent.OutputTuple,
      NamedServiceAddedEvent.OutputObject
    >;

    "NamedServiceRemoved(bytes32)": TypedContractEvent<
      NamedServiceRemovedEvent.InputTuple,
      NamedServiceRemovedEvent.OutputTuple,
      NamedServiceRemovedEvent.OutputObject
    >;
    NamedServiceRemoved: TypedContractEvent<
      NamedServiceRemovedEvent.InputTuple,
      NamedServiceRemovedEvent.OutputTuple,
      NamedServiceRemovedEvent.OutputObject
    >;
  };
}
