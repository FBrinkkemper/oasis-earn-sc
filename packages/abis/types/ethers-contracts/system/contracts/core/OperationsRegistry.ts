/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type StoredOperationStruct = {
  actions: PromiseOrValue<BytesLike>[];
  optional: PromiseOrValue<boolean>[];
  name: PromiseOrValue<string>;
};

export type StoredOperationStructOutput = [string[], boolean[], string] & {
  actions: string[];
  optional: boolean[];
  name: string;
};

export interface OperationsRegistryInterface extends utils.Interface {
  functions: {
    "addOperation((bytes32[],bool[],string))": FunctionFragment;
    "getOperation(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOperation"
      | "getOperation"
      | "owner"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOperation",
    values: [StoredOperationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OperationAdded(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OperationAdded"): EventFragment;
}

export interface OperationAddedEventObject {
  name: string;
}
export type OperationAddedEvent = TypedEvent<
  [string],
  OperationAddedEventObject
>;

export type OperationAddedEventFilter = TypedEventFilter<OperationAddedEvent>;

export interface OperationsRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperationsRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOperation(
      operation: StoredOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOperation(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], boolean[]] & { actions: string[]; optional: boolean[] }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addOperation(
    operation: StoredOperationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOperation(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], boolean[]] & { actions: string[]; optional: boolean[] }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOperation(
      operation: StoredOperationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getOperation(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], boolean[]] & { actions: string[]; optional: boolean[] }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OperationAdded(bytes32)"(
      name?: PromiseOrValue<BytesLike> | null
    ): OperationAddedEventFilter;
    OperationAdded(
      name?: PromiseOrValue<BytesLike> | null
    ): OperationAddedEventFilter;
  };

  estimateGas: {
    addOperation(
      operation: StoredOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOperation(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOperation(
      operation: StoredOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOperation(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
