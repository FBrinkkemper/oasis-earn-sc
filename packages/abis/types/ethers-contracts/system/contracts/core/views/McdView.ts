/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface McdViewInterface extends utils.Interface {
  functions: {
    "MANAGER_ADDRESS()": FunctionFragment;
    "SPOTTER_ADDRESS()": FunctionFragment;
    "VAT_ADDRESS()": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getRatio(uint256)": FunctionFragment;
    "getVaultInfo(uint256,bytes32)": FunctionFragment;
    "manager()": FunctionFragment;
    "spotter()": FunctionFragment;
    "vat()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MANAGER_ADDRESS"
      | "SPOTTER_ADDRESS"
      | "VAT_ADDRESS"
      | "getPrice"
      | "getRatio"
      | "getVaultInfo"
      | "manager"
      | "spotter"
      | "vat"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MANAGER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SPOTTER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "spotter", values?: undefined): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MANAGER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SPOTTER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spotter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;

  events: {};
}

export interface McdView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: McdViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MANAGER_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    SPOTTER_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    VAT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    getPrice(
      _ilk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRatio(
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultInfo(
      _vaultId: PromiseOrValue<BigNumberish>,
      _ilk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    spotter(overrides?: CallOverrides): Promise<[string]>;

    vat(overrides?: CallOverrides): Promise<[string]>;
  };

  MANAGER_ADDRESS(overrides?: CallOverrides): Promise<string>;

  SPOTTER_ADDRESS(overrides?: CallOverrides): Promise<string>;

  VAT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  getPrice(
    _ilk: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRatio(
    _vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultInfo(
    _vaultId: PromiseOrValue<BigNumberish>,
    _ilk: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  manager(overrides?: CallOverrides): Promise<string>;

  spotter(overrides?: CallOverrides): Promise<string>;

  vat(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MANAGER_ADDRESS(overrides?: CallOverrides): Promise<string>;

    SPOTTER_ADDRESS(overrides?: CallOverrides): Promise<string>;

    VAT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    getPrice(
      _ilk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatio(
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultInfo(
      _vaultId: PromiseOrValue<BigNumberish>,
      _ilk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    manager(overrides?: CallOverrides): Promise<string>;

    spotter(overrides?: CallOverrides): Promise<string>;

    vat(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MANAGER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    SPOTTER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    VAT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      _ilk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatio(
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultInfo(
      _vaultId: PromiseOrValue<BigNumberish>,
      _ilk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    spotter(overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MANAGER_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SPOTTER_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VAT_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      _ilk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRatio(
      _vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultInfo(
      _vaultId: PromiseOrValue<BigNumberish>,
      _ilk: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spotter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
