/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ChainLogViewInterface extends utils.Interface {
  functions: {
    "bytes32ToString(bytes32)": FunctionFragment;
    "chainlogAddress()": FunctionFragment;
    "getIlkJoinAddressByHash(bytes32)": FunctionFragment;
    "getIlkJoinAddressByName(string)": FunctionFragment;
    "getServiceAddress(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bytes32ToString"
      | "chainlogAddress"
      | "getIlkJoinAddressByHash"
      | "getIlkJoinAddressByName"
      | "getServiceAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlogAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIlkJoinAddressByHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIlkJoinAddressByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlogAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIlkJoinAddressByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIlkJoinAddressByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ChainLogView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainLogViewInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bytes32ToString(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    chainlogAddress(overrides?: CallOverrides): Promise<[string]>;

    getIlkJoinAddressByHash(
      ilkHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getIlkJoinAddressByName(
      ilkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getServiceAddress(
      serviceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  bytes32ToString(
    _bytes32: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  chainlogAddress(overrides?: CallOverrides): Promise<string>;

  getIlkJoinAddressByHash(
    ilkHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getIlkJoinAddressByName(
    ilkName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getServiceAddress(
    serviceName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    bytes32ToString(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    chainlogAddress(overrides?: CallOverrides): Promise<string>;

    getIlkJoinAddressByHash(
      ilkHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getIlkJoinAddressByName(
      ilkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getServiceAddress(
      serviceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bytes32ToString(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainlogAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getIlkJoinAddressByHash(
      ilkHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIlkJoinAddressByName(
      ilkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceAddress(
      serviceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bytes32ToString(
      _bytes32: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlogAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIlkJoinAddressByHash(
      ilkHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIlkJoinAddressByName(
      ilkName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceAddress(
      serviceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
