/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ChainLogViewInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bytes32ToString"
      | "chainlogAddress"
      | "getIlkJoinAddressByHash"
      | "getIlkJoinAddressByName"
      | "getServiceAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "chainlogAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIlkJoinAddressByHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIlkJoinAddressByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlogAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIlkJoinAddressByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIlkJoinAddressByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceAddress",
    data: BytesLike
  ): Result;
}

export interface ChainLogView extends BaseContract {
  connect(runner?: ContractRunner | null): ChainLogView;
  waitForDeployment(): Promise<this>;

  interface: ChainLogViewInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bytes32ToString: TypedContractMethod<[_bytes32: BytesLike], [string], "view">;

  chainlogAddress: TypedContractMethod<[], [string], "view">;

  getIlkJoinAddressByHash: TypedContractMethod<
    [ilkHash: BytesLike],
    [string],
    "view"
  >;

  getIlkJoinAddressByName: TypedContractMethod<
    [ilkName: string],
    [string],
    "view"
  >;

  getServiceAddress: TypedContractMethod<
    [serviceName: string],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bytes32ToString"
  ): TypedContractMethod<[_bytes32: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "chainlogAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIlkJoinAddressByHash"
  ): TypedContractMethod<[ilkHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getIlkJoinAddressByName"
  ): TypedContractMethod<[ilkName: string], [string], "view">;
  getFunction(
    nameOrSignature: "getServiceAddress"
  ): TypedContractMethod<[serviceName: string], [string], "view">;

  filters: {};
}
