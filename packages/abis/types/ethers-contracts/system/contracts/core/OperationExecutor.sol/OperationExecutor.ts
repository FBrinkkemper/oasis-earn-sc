/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type CallStruct = {
  targetHash: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
};

export type CallStructOutput = [string, string] & {
  targetHash: string;
  callData: string;
};

export interface OperationExecutorInterface extends utils.Interface {
  functions: {
    "ERC3156_FLASHLOAN_MSG()": FunctionFragment;
    "callbackAggregate((bytes32,bytes)[])": FunctionFragment;
    "checkIfLenderIsTrusted(address)": FunctionFragment;
    "executeOp((bytes32,bytes)[])": FunctionFragment;
    "getOperation(bytes32)": FunctionFragment;
    "onFlashLoan(address,address,uint256,uint256,bytes)": FunctionFragment;
    "receiveFlashLoan(address[],uint256[],uint256[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERC3156_FLASHLOAN_MSG"
      | "callbackAggregate"
      | "checkIfLenderIsTrusted"
      | "executeOp"
      | "getOperation"
      | "onFlashLoan"
      | "receiveFlashLoan"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC3156_FLASHLOAN_MSG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callbackAggregate",
    values: [CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfLenderIsTrusted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOp",
    values: [CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFlashLoan",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC3156_FLASHLOAN_MSG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfLenderIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executeOp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveFlashLoan",
    data: BytesLike
  ): Result;

  events: {
    "Operation(bytes32,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Operation"): EventFragment;
}

export interface OperationEventObject {
  name: string;
  calls: CallStructOutput[];
}
export type OperationEvent = TypedEvent<
  [string, CallStructOutput[]],
  OperationEventObject
>;

export type OperationEventFilter = TypedEventFilter<OperationEvent>;

export interface OperationExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperationExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC3156_FLASHLOAN_MSG(overrides?: CallOverrides): Promise<[string]>;

    callbackAggregate(
      calls: CallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkIfLenderIsTrusted(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    executeOp(
      calls: CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOperation(
      operationHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveFlashLoan(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      feeAmounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ERC3156_FLASHLOAN_MSG(overrides?: CallOverrides): Promise<string>;

  callbackAggregate(
    calls: CallStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkIfLenderIsTrusted(
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  executeOp(
    calls: CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOperation(
    operationHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  onFlashLoan(
    initiator: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveFlashLoan(
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    feeAmounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC3156_FLASHLOAN_MSG(overrides?: CallOverrides): Promise<string>;

    callbackAggregate(
      calls: CallStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkIfLenderIsTrusted(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeOp(calls: CallStruct[], overrides?: CallOverrides): Promise<string>;

    getOperation(
      operationHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    receiveFlashLoan(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      feeAmounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Operation(bytes32,tuple[])"(
      name?: PromiseOrValue<BytesLike> | null,
      calls?: null
    ): OperationEventFilter;
    Operation(
      name?: PromiseOrValue<BytesLike> | null,
      calls?: null
    ): OperationEventFilter;
  };

  estimateGas: {
    ERC3156_FLASHLOAN_MSG(overrides?: CallOverrides): Promise<BigNumber>;

    callbackAggregate(
      calls: CallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkIfLenderIsTrusted(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeOp(
      calls: CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOperation(
      operationHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveFlashLoan(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      feeAmounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC3156_FLASHLOAN_MSG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callbackAggregate(
      calls: CallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkIfLenderIsTrusted(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeOp(
      calls: CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOperation(
      operationHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onFlashLoan(
      initiator: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveFlashLoan(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      feeAmounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
