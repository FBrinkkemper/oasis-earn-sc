/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DummyExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_collectFee"
      | "fee"
      | "feeBase"
      | "feeBeneficiaryAddress"
      | "precisions"
      | "prices"
      | "setFee"
      | "setPrecision"
      | "setPrice"
      | "swapDaiForToken"
      | "swapTokenForDai"
      | "swapTokenForToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AssetSwap" | "FeePaid" | "SlippageSaved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_collectFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiaryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "precisions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "prices", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrecision",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapDaiForToken",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForDai",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokenForToken",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_collectFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiaryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "precisions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapDaiForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokenForToken",
    data: BytesLike
  ): Result;
}

export namespace AssetSwapEvent {
  export type InputTuple = [
    assetIn: AddressLike,
    assetOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    assetIn: string,
    assetOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    assetIn: string;
    assetOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeePaidEvent {
  export type InputTuple = [beneficiary: AddressLike, amount: BigNumberish];
  export type OutputTuple = [beneficiary: string, amount: bigint];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlippageSavedEvent {
  export type InputTuple = [
    minimumPossible: BigNumberish,
    actualAmount: BigNumberish
  ];
  export type OutputTuple = [minimumPossible: bigint, actualAmount: bigint];
  export interface OutputObject {
    minimumPossible: bigint;
    actualAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DummyExchange extends BaseContract {
  connect(runner?: ContractRunner | null): DummyExchange;
  waitForDeployment(): Promise<this>;

  interface: DummyExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _collectFee: TypedContractMethod<
    [asset: AddressLike, fromAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  fee: TypedContractMethod<[], [bigint], "view">;

  feeBase: TypedContractMethod<[], [bigint], "view">;

  feeBeneficiaryAddress: TypedContractMethod<[], [string], "view">;

  precisions: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  prices: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setFee: TypedContractMethod<[f: BigNumberish], [void], "nonpayable">;

  setPrecision: TypedContractMethod<
    [token: AddressLike, _precision: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPrice: TypedContractMethod<
    [token: AddressLike, p: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapDaiForToken: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      arg4: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  swapTokenForDai: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      arg4: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  swapTokenForToken: TypedContractMethod<
    [
      assetFrom: AddressLike,
      assetTo: AddressLike,
      amount: BigNumberish,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_collectFee"
  ): TypedContractMethod<
    [asset: AddressLike, fromAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeBase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeBeneficiaryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "precisions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "prices"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[f: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrecision"
  ): TypedContractMethod<
    [token: AddressLike, _precision: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrice"
  ): TypedContractMethod<
    [token: AddressLike, p: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapDaiForToken"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      arg4: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokenForDai"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      arg4: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokenForToken"
  ): TypedContractMethod<
    [
      assetFrom: AddressLike,
      assetTo: AddressLike,
      amount: BigNumberish,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AssetSwap"
  ): TypedContractEvent<
    AssetSwapEvent.InputTuple,
    AssetSwapEvent.OutputTuple,
    AssetSwapEvent.OutputObject
  >;
  getEvent(
    key: "FeePaid"
  ): TypedContractEvent<
    FeePaidEvent.InputTuple,
    FeePaidEvent.OutputTuple,
    FeePaidEvent.OutputObject
  >;
  getEvent(
    key: "SlippageSaved"
  ): TypedContractEvent<
    SlippageSavedEvent.InputTuple,
    SlippageSavedEvent.OutputTuple,
    SlippageSavedEvent.OutputObject
  >;

  filters: {
    "AssetSwap(address,address,uint256,uint256)": TypedContractEvent<
      AssetSwapEvent.InputTuple,
      AssetSwapEvent.OutputTuple,
      AssetSwapEvent.OutputObject
    >;
    AssetSwap: TypedContractEvent<
      AssetSwapEvent.InputTuple,
      AssetSwapEvent.OutputTuple,
      AssetSwapEvent.OutputObject
    >;

    "FeePaid(address,uint256)": TypedContractEvent<
      FeePaidEvent.InputTuple,
      FeePaidEvent.OutputTuple,
      FeePaidEvent.OutputObject
    >;
    FeePaid: TypedContractEvent<
      FeePaidEvent.InputTuple,
      FeePaidEvent.OutputTuple,
      FeePaidEvent.OutputObject
    >;

    "SlippageSaved(uint256,uint256)": TypedContractEvent<
      SlippageSavedEvent.InputTuple,
      SlippageSavedEvent.OutputTuple,
      SlippageSavedEvent.OutputObject
    >;
    SlippageSaved: TypedContractEvent<
      SlippageSavedEvent.InputTuple,
      SlippageSavedEvent.OutputTuple,
      SlippageSavedEvent.OutputObject
    >;
  };
}
