/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IMockExchangeInterface extends utils.Interface {
  functions: {
    "calculateOutputAmount(address,address,uint256,bool)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setPrice(address,uint256)": FunctionFragment;
    "swap(address,address,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateOutputAmount"
      | "setFee"
      | "setPrice"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateOutputAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateOutputAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "AssetSwap(address,address,uint256,uint256)": EventFragment;
    "FeePaid(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
}

export interface AssetSwapEventObject {
  assetIn: string;
  assetOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type AssetSwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AssetSwapEventObject
>;

export type AssetSwapEventFilter = TypedEventFilter<AssetSwapEvent>;

export interface FeePaidEventObject {
  beneficiary: string;
  amount: BigNumber;
}
export type FeePaidEvent = TypedEvent<[string, BigNumber], FeePaidEventObject>;

export type FeePaidEventFilter = TypedEventFilter<FeePaidEvent>;

export interface IMockExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMockExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateOutputAmount(
      assetFrom: PromiseOrValue<string>,
      assetTo: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      feeOnTransfer: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        finalAmountOut: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    setFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      token: PromiseOrValue<string>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      assetFrom: PromiseOrValue<string>,
      assetTo: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      feeOnTransfer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateOutputAmount(
    assetFrom: PromiseOrValue<string>,
    assetTo: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    feeOnTransfer: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { finalAmountOut: BigNumber; feeAmount: BigNumber }
  >;

  setFee(
    fee_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    token: PromiseOrValue<string>,
    p: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    assetFrom: PromiseOrValue<string>,
    assetTo: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    feeOnTransfer: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateOutputAmount(
      assetFrom: PromiseOrValue<string>,
      assetTo: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      feeOnTransfer: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        finalAmountOut: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    setFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      token: PromiseOrValue<string>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      assetFrom: PromiseOrValue<string>,
      assetTo: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      feeOnTransfer: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; feeAmount: BigNumber }
    >;
  };

  filters: {
    "AssetSwap(address,address,uint256,uint256)"(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null
    ): AssetSwapEventFilter;
    AssetSwap(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null
    ): AssetSwapEventFilter;

    "FeePaid(address,uint256)"(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): FeePaidEventFilter;
    FeePaid(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null
    ): FeePaidEventFilter;
  };

  estimateGas: {
    calculateOutputAmount(
      assetFrom: PromiseOrValue<string>,
      assetTo: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      feeOnTransfer: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrice(
      token: PromiseOrValue<string>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      assetFrom: PromiseOrValue<string>,
      assetTo: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      feeOnTransfer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateOutputAmount(
      assetFrom: PromiseOrValue<string>,
      assetTo: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      feeOnTransfer: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      token: PromiseOrValue<string>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      assetFrom: PromiseOrValue<string>,
      assetTo: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      feeOnTransfer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
