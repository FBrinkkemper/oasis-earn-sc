/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface AccountGuardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canCall"
      | "canCallAndWhitelisted"
      | "changeOwner"
      | "initializeFactory"
      | "isWhitelisted"
      | "isWhitelistedSend"
      | "owner"
      | "owners"
      | "permit"
      | "renounceOwnership"
      | "setWhitelist"
      | "setWhitelistSend"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PermissionGranted"
      | "PermissionRevoked"
      | "ProxyOwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canCall",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canCallAndWhitelisted",
    values: [AddressLike, AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedSend",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owners", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistSend",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canCallAndWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionGrantedEvent {
  export type InputTuple = [caller: AddressLike, proxy: AddressLike];
  export type OutputTuple = [caller: string, proxy: string];
  export interface OutputObject {
    caller: string;
    proxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionRevokedEvent {
  export type InputTuple = [caller: AddressLike, proxy: AddressLike];
  export type OutputTuple = [caller: string, proxy: string];
  export interface OutputObject {
    caller: string;
    proxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyOwnershipTransferredEvent {
  export type InputTuple = [
    newOwner: AddressLike,
    oldAddress: AddressLike,
    proxy: AddressLike
  ];
  export type OutputTuple = [
    newOwner: string,
    oldAddress: string,
    proxy: string
  ];
  export interface OutputObject {
    newOwner: string;
    oldAddress: string;
    proxy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccountGuard extends BaseContract {
  connect(runner?: ContractRunner | null): AccountGuard;
  waitForDeployment(): Promise<this>;

  interface: AccountGuardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canCall: TypedContractMethod<
    [target: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  canCallAndWhitelisted: TypedContractMethod<
    [
      proxy: AddressLike,
      operator: AddressLike,
      callTarget: AddressLike,
      asDelegateCall: boolean
    ],
    [[boolean, boolean]],
    "view"
  >;

  changeOwner: TypedContractMethod<
    [newOwner: AddressLike, target: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeFactory: TypedContractMethod<[], [void], "nonpayable">;

  isWhitelisted: TypedContractMethod<[target: AddressLike], [boolean], "view">;

  isWhitelistedSend: TypedContractMethod<
    [target: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  owners: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  permit: TypedContractMethod<
    [caller: AddressLike, target: AddressLike, allowance: boolean],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setWhitelist: TypedContractMethod<
    [target: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  setWhitelistSend: TypedContractMethod<
    [target: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canCall"
  ): TypedContractMethod<
    [target: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "canCallAndWhitelisted"
  ): TypedContractMethod<
    [
      proxy: AddressLike,
      operator: AddressLike,
      callTarget: AddressLike,
      asDelegateCall: boolean
    ],
    [[boolean, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeOwner"
  ): TypedContractMethod<
    [newOwner: AddressLike, target: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeFactory"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelistedSend"
  ): TypedContractMethod<[target: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [caller: AddressLike, target: AddressLike, allowance: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [target: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelistSend"
  ): TypedContractMethod<
    [target: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PermissionGranted"
  ): TypedContractEvent<
    PermissionGrantedEvent.InputTuple,
    PermissionGrantedEvent.OutputTuple,
    PermissionGrantedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionRevoked"
  ): TypedContractEvent<
    PermissionRevokedEvent.InputTuple,
    PermissionRevokedEvent.OutputTuple,
    PermissionRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ProxyOwnershipTransferred"
  ): TypedContractEvent<
    ProxyOwnershipTransferredEvent.InputTuple,
    ProxyOwnershipTransferredEvent.OutputTuple,
    ProxyOwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PermissionGranted(address,address)": TypedContractEvent<
      PermissionGrantedEvent.InputTuple,
      PermissionGrantedEvent.OutputTuple,
      PermissionGrantedEvent.OutputObject
    >;
    PermissionGranted: TypedContractEvent<
      PermissionGrantedEvent.InputTuple,
      PermissionGrantedEvent.OutputTuple,
      PermissionGrantedEvent.OutputObject
    >;

    "PermissionRevoked(address,address)": TypedContractEvent<
      PermissionRevokedEvent.InputTuple,
      PermissionRevokedEvent.OutputTuple,
      PermissionRevokedEvent.OutputObject
    >;
    PermissionRevoked: TypedContractEvent<
      PermissionRevokedEvent.InputTuple,
      PermissionRevokedEvent.OutputTuple,
      PermissionRevokedEvent.OutputObject
    >;

    "ProxyOwnershipTransferred(address,address,address)": TypedContractEvent<
      ProxyOwnershipTransferredEvent.InputTuple,
      ProxyOwnershipTransferredEvent.OutputTuple,
      ProxyOwnershipTransferredEvent.OutputObject
    >;
    ProxyOwnershipTransferred: TypedContractEvent<
      ProxyOwnershipTransferredEvent.InputTuple,
      ProxyOwnershipTransferredEvent.OutputTuple,
      ProxyOwnershipTransferredEvent.OutputObject
    >;
  };
}
