/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface AccountImplementationInterface extends Interface {
  getFunction(
    nameOrSignature: "execute" | "guard" | "owner" | "send"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FundsRecived"): EventFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
}

export namespace FundsRecivedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccountImplementation extends BaseContract {
  connect(runner?: ContractRunner | null): AccountImplementation;
  waitForDeployment(): Promise<this>;

  interface: AccountImplementationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  execute: TypedContractMethod<
    [_target: AddressLike, _data: BytesLike],
    [string],
    "payable"
  >;

  guard: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  send: TypedContractMethod<
    [_target: AddressLike, _data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [_target: AddressLike, _data: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "guard"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [_target: AddressLike, _data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "FundsRecived"
  ): TypedContractEvent<
    FundsRecivedEvent.InputTuple,
    FundsRecivedEvent.OutputTuple,
    FundsRecivedEvent.OutputObject
  >;

  filters: {
    "FundsRecived(address,uint256)": TypedContractEvent<
      FundsRecivedEvent.InputTuple,
      FundsRecivedEvent.OutputTuple,
      FundsRecivedEvent.OutputObject
    >;
    FundsRecived: TypedContractEvent<
      FundsRecivedEvent.InputTuple,
      FundsRecivedEvent.OutputTuple,
      FundsRecivedEvent.OutputObject
    >;
  };
}
