/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type SwapDataStruct = {
  fromAsset: PromiseOrValue<string>;
  toAsset: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  receiveAtLeast: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
  withData: PromiseOrValue<BytesLike>;
  collectFeeInFromToken: PromiseOrValue<boolean>;
};

export type SwapDataStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  boolean
] & {
  fromAsset: string;
  toAsset: string;
  amount: BigNumber;
  receiveAtLeast: BigNumber;
  fee: BigNumber;
  withData: string;
  collectFeeInFromToken: boolean;
};

export interface SwapInterface extends utils.Interface {
  functions: {
    "addFeeTier(uint256)": FunctionFragment;
    "authorizedAddresses(address)": FunctionFragment;
    "feeBase()": FunctionFragment;
    "feeBeneficiaryAddress()": FunctionFragment;
    "feeTiers(uint256)": FunctionFragment;
    "removeFeeTier(uint256)": FunctionFragment;
    "swapTokens((address,address,uint256,uint256,uint256,bytes,bool))": FunctionFragment;
    "verifyFee(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFeeTier"
      | "authorizedAddresses"
      | "feeBase"
      | "feeBeneficiaryAddress"
      | "feeTiers"
      | "removeFeeTier"
      | "swapTokens"
      | "verifyFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFeeTier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "feeBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiaryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeTiers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFeeTier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokens",
    values: [SwapDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addFeeTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiaryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyFee", data: BytesLike): Result;

  events: {
    "AssetSwap(address,address,uint256,uint256)": EventFragment;
    "FeePaid(address,uint256,address)": EventFragment;
    "FeeTierAdded(uint256)": EventFragment;
    "FeeTierRemoved(uint256)": EventFragment;
    "SlippageSaved(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTierAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTierRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlippageSaved"): EventFragment;
}

export interface AssetSwapEventObject {
  assetIn: string;
  assetOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type AssetSwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AssetSwapEventObject
>;

export type AssetSwapEventFilter = TypedEventFilter<AssetSwapEvent>;

export interface FeePaidEventObject {
  beneficiary: string;
  amount: BigNumber;
  token: string;
}
export type FeePaidEvent = TypedEvent<
  [string, BigNumber, string],
  FeePaidEventObject
>;

export type FeePaidEventFilter = TypedEventFilter<FeePaidEvent>;

export interface FeeTierAddedEventObject {
  fee: BigNumber;
}
export type FeeTierAddedEvent = TypedEvent<
  [BigNumber],
  FeeTierAddedEventObject
>;

export type FeeTierAddedEventFilter = TypedEventFilter<FeeTierAddedEvent>;

export interface FeeTierRemovedEventObject {
  fee: BigNumber;
}
export type FeeTierRemovedEvent = TypedEvent<
  [BigNumber],
  FeeTierRemovedEventObject
>;

export type FeeTierRemovedEventFilter = TypedEventFilter<FeeTierRemovedEvent>;

export interface SlippageSavedEventObject {
  minimumPossible: BigNumber;
  actualAmount: BigNumber;
}
export type SlippageSavedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SlippageSavedEventObject
>;

export type SlippageSavedEventFilter = TypedEventFilter<SlippageSavedEvent>;

export interface Swap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFeeTier(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    feeBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeBeneficiaryAddress(overrides?: CallOverrides): Promise<[string]>;

    feeTiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeFeeTier(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokens(
      swapData: SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyFee(
      feeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;
  };

  addFeeTier(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedAddresses(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  feeBase(overrides?: CallOverrides): Promise<BigNumber>;

  feeBeneficiaryAddress(overrides?: CallOverrides): Promise<string>;

  feeTiers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeFeeTier(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokens(
    swapData: SwapDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyFee(
    feeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addFeeTier(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feeBeneficiaryAddress(overrides?: CallOverrides): Promise<string>;

    feeTiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFeeTier(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokens(
      swapData: SwapDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyFee(
      feeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AssetSwap(address,address,uint256,uint256)"(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null
    ): AssetSwapEventFilter;
    AssetSwap(
      assetIn?: PromiseOrValue<string> | null,
      assetOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null
    ): AssetSwapEventFilter;

    "FeePaid(address,uint256,address)"(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null,
      token?: null
    ): FeePaidEventFilter;
    FeePaid(
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null,
      token?: null
    ): FeePaidEventFilter;

    "FeeTierAdded(uint256)"(fee?: null): FeeTierAddedEventFilter;
    FeeTierAdded(fee?: null): FeeTierAddedEventFilter;

    "FeeTierRemoved(uint256)"(fee?: null): FeeTierRemovedEventFilter;
    FeeTierRemoved(fee?: null): FeeTierRemovedEventFilter;

    "SlippageSaved(uint256,uint256)"(
      minimumPossible?: null,
      actualAmount?: null
    ): SlippageSavedEventFilter;
    SlippageSaved(
      minimumPossible?: null,
      actualAmount?: null
    ): SlippageSavedEventFilter;
  };

  estimateGas: {
    addFeeTier(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feeBeneficiaryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feeTiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFeeTier(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokens(
      swapData: SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyFee(
      feeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFeeTier(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBeneficiaryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeTiers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFeeTier(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokens(
      swapData: SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyFee(
      feeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
