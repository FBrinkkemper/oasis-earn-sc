/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type SwapDataStruct = {
  fromAsset: AddressLike;
  toAsset: AddressLike;
  amount: BigNumberish;
  receiveAtLeast: BigNumberish;
  fee: BigNumberish;
  withData: BytesLike;
  collectFeeInFromToken: boolean;
};

export type SwapDataStructOutput = [
  fromAsset: string,
  toAsset: string,
  amount: bigint,
  receiveAtLeast: bigint,
  fee: bigint,
  withData: string,
  collectFeeInFromToken: boolean
] & {
  fromAsset: string;
  toAsset: string;
  amount: bigint;
  receiveAtLeast: bigint;
  fee: bigint;
  withData: string;
  collectFeeInFromToken: boolean;
};

export interface SwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFeeTier"
      | "authorizedAddresses"
      | "feeBase"
      | "feeBeneficiaryAddress"
      | "feeTiers"
      | "removeFeeTier"
      | "swapTokens"
      | "verifyFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetSwap"
      | "FeePaid"
      | "FeeTierAdded"
      | "FeeTierRemoved"
      | "SlippageSaved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addFeeTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "feeBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiaryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFeeTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokens",
    values: [SwapDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addFeeTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiaryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyFee", data: BytesLike): Result;
}

export namespace AssetSwapEvent {
  export type InputTuple = [
    assetIn: AddressLike,
    assetOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    assetIn: string,
    assetOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    assetIn: string;
    assetOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeePaidEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    token: string
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeTierAddedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeTierRemovedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlippageSavedEvent {
  export type InputTuple = [
    minimumPossible: BigNumberish,
    actualAmount: BigNumberish
  ];
  export type OutputTuple = [minimumPossible: bigint, actualAmount: bigint];
  export interface OutputObject {
    minimumPossible: bigint;
    actualAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Swap extends BaseContract {
  connect(runner?: ContractRunner | null): Swap;
  waitForDeployment(): Promise<this>;

  interface: SwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFeeTier: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  authorizedAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  feeBase: TypedContractMethod<[], [bigint], "view">;

  feeBeneficiaryAddress: TypedContractMethod<[], [string], "view">;

  feeTiers: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  removeFeeTier: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  swapTokens: TypedContractMethod<
    [swapData: SwapDataStruct],
    [bigint],
    "nonpayable"
  >;

  verifyFee: TypedContractMethod<[feeId: BigNumberish], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFeeTier"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "feeBase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeBeneficiaryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeTiers"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFeeTier"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapTokens"
  ): TypedContractMethod<[swapData: SwapDataStruct], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyFee"
  ): TypedContractMethod<[feeId: BigNumberish], [boolean], "view">;

  getEvent(
    key: "AssetSwap"
  ): TypedContractEvent<
    AssetSwapEvent.InputTuple,
    AssetSwapEvent.OutputTuple,
    AssetSwapEvent.OutputObject
  >;
  getEvent(
    key: "FeePaid"
  ): TypedContractEvent<
    FeePaidEvent.InputTuple,
    FeePaidEvent.OutputTuple,
    FeePaidEvent.OutputObject
  >;
  getEvent(
    key: "FeeTierAdded"
  ): TypedContractEvent<
    FeeTierAddedEvent.InputTuple,
    FeeTierAddedEvent.OutputTuple,
    FeeTierAddedEvent.OutputObject
  >;
  getEvent(
    key: "FeeTierRemoved"
  ): TypedContractEvent<
    FeeTierRemovedEvent.InputTuple,
    FeeTierRemovedEvent.OutputTuple,
    FeeTierRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SlippageSaved"
  ): TypedContractEvent<
    SlippageSavedEvent.InputTuple,
    SlippageSavedEvent.OutputTuple,
    SlippageSavedEvent.OutputObject
  >;

  filters: {
    "AssetSwap(address,address,uint256,uint256)": TypedContractEvent<
      AssetSwapEvent.InputTuple,
      AssetSwapEvent.OutputTuple,
      AssetSwapEvent.OutputObject
    >;
    AssetSwap: TypedContractEvent<
      AssetSwapEvent.InputTuple,
      AssetSwapEvent.OutputTuple,
      AssetSwapEvent.OutputObject
    >;

    "FeePaid(address,uint256,address)": TypedContractEvent<
      FeePaidEvent.InputTuple,
      FeePaidEvent.OutputTuple,
      FeePaidEvent.OutputObject
    >;
    FeePaid: TypedContractEvent<
      FeePaidEvent.InputTuple,
      FeePaidEvent.OutputTuple,
      FeePaidEvent.OutputObject
    >;

    "FeeTierAdded(uint256)": TypedContractEvent<
      FeeTierAddedEvent.InputTuple,
      FeeTierAddedEvent.OutputTuple,
      FeeTierAddedEvent.OutputObject
    >;
    FeeTierAdded: TypedContractEvent<
      FeeTierAddedEvent.InputTuple,
      FeeTierAddedEvent.OutputTuple,
      FeeTierAddedEvent.OutputObject
    >;

    "FeeTierRemoved(uint256)": TypedContractEvent<
      FeeTierRemovedEvent.InputTuple,
      FeeTierRemovedEvent.OutputTuple,
      FeeTierRemovedEvent.OutputObject
    >;
    FeeTierRemoved: TypedContractEvent<
      FeeTierRemovedEvent.InputTuple,
      FeeTierRemovedEvent.OutputTuple,
      FeeTierRemovedEvent.OutputObject
    >;

    "SlippageSaved(uint256,uint256)": TypedContractEvent<
      SlippageSavedEvent.InputTuple,
      SlippageSavedEvent.OutputTuple,
      SlippageSavedEvent.OutputObject
    >;
    SlippageSaved: TypedContractEvent<
      SlippageSavedEvent.InputTuple,
      SlippageSavedEvent.OutputTuple,
      SlippageSavedEvent.OutputObject
    >;
  };
}
