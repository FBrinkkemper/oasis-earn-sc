/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface AjnaProxyActionsInterface extends utils.Interface {
  functions: {
    "GUARD()": FunctionFragment;
    "WETH()": FunctionFragment;
    "_validateBucketState(address,uint256)": FunctionFragment;
    "ajnaToken()": FunctionFragment;
    "ajnaVersion()": FunctionFragment;
    "convertPriceToIndex(uint256)": FunctionFragment;
    "deployer()": FunctionFragment;
    "depositAndDraw(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "depositCollateral(address,uint256,uint256,bool)": FunctionFragment;
    "depositCollateralAndDrawDebt(address,uint256,uint256,uint256)": FunctionFragment;
    "drawDebt(address,uint256,uint256)": FunctionFragment;
    "getQuoteAmount(address,uint256)": FunctionFragment;
    "moveQuote(address,uint256,uint256)": FunctionFragment;
    "openEarnPosition(address,uint256,uint256)": FunctionFragment;
    "openPosition(address,uint256,uint256,uint256)": FunctionFragment;
    "poolInfoUtils()": FunctionFragment;
    "removeCollateral(address,uint256)": FunctionFragment;
    "repayAndClose(address)": FunctionFragment;
    "repayDebt(address,uint256,bool)": FunctionFragment;
    "repayDebtAndWithdrawCollateral(address,uint256,uint256)": FunctionFragment;
    "repayWithdraw(address,uint256,uint256,bool)": FunctionFragment;
    "supplyAndMoveQuote(address,uint256,uint256,uint256)": FunctionFragment;
    "supplyQuote(address,uint256,uint256)": FunctionFragment;
    "withdrawAndMoveQuote(address,uint256,uint256,uint256)": FunctionFragment;
    "withdrawCollateral(address,uint256)": FunctionFragment;
    "withdrawQuote(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GUARD"
      | "WETH"
      | "_validateBucketState"
      | "ajnaToken"
      | "ajnaVersion"
      | "convertPriceToIndex"
      | "deployer"
      | "depositAndDraw"
      | "depositCollateral"
      | "depositCollateralAndDrawDebt"
      | "drawDebt"
      | "getQuoteAmount"
      | "moveQuote"
      | "openEarnPosition"
      | "openPosition"
      | "poolInfoUtils"
      | "removeCollateral"
      | "repayAndClose"
      | "repayDebt"
      | "repayDebtAndWithdrawCollateral"
      | "repayWithdraw"
      | "supplyAndMoveQuote"
      | "supplyQuote"
      | "withdrawAndMoveQuote"
      | "withdrawCollateral"
      | "withdrawQuote"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "GUARD", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_validateBucketState",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ajnaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ajnaVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertPriceToIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositAndDraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateralAndDrawDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "drawDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openEarnPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfoUtils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAndClose",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebtAndWithdrawCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyAndMoveQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMoveQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "GUARD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_validateBucketState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ajnaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ajnaVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertPriceToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateralAndDrawDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moveQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openEarnPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolInfoUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAndClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtAndWithdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyAndMoveQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMoveQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawQuote",
    data: BytesLike
  ): Result;

  events: {
    "CreatePosition(address,string,string,address,address)": EventFragment;
    "ProxyActionsOperation(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyActionsOperation"): EventFragment;
}

export interface CreatePositionEventObject {
  proxyAddress: string;
  protocol: string;
  positionType: string;
  collateralToken: string;
  debtToken: string;
}
export type CreatePositionEvent = TypedEvent<
  [string, string, string, string, string],
  CreatePositionEventObject
>;

export type CreatePositionEventFilter = TypedEventFilter<CreatePositionEvent>;

export interface ProxyActionsOperationEventObject {
  name: string;
}
export type ProxyActionsOperationEvent = TypedEvent<
  [string],
  ProxyActionsOperationEventObject
>;

export type ProxyActionsOperationEventFilter =
  TypedEventFilter<ProxyActionsOperationEvent>;

export interface AjnaProxyActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AjnaProxyActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GUARD(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    _validateBucketState(
      pool: PromiseOrValue<string>,
      bucket: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    ajnaToken(overrides?: CallOverrides): Promise<[string]>;

    ajnaVersion(overrides?: CallOverrides): Promise<[string]>;

    convertPriceToIndex(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    depositAndDraw(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      pool: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCollateralAndDrawDebt(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawDebt(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getQuoteAmount(
      pool: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount: BigNumber }>;

    moveQuote(
      pool: PromiseOrValue<string>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openEarnPosition(
      pool: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolInfoUtils(overrides?: CallOverrides): Promise<[string]>;

    removeCollateral(
      pool: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayAndClose(
      pool: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayDebt(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayDebtAndWithdrawCollateral(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayWithdraw(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supplyAndMoveQuote(
      pool: PromiseOrValue<string>,
      amountToAdd: PromiseOrValue<BigNumberish>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supplyQuote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAndMoveQuote(
      pool: PromiseOrValue<string>,
      amountToWithdraw: PromiseOrValue<BigNumberish>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawQuote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  GUARD(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  _validateBucketState(
    pool: PromiseOrValue<string>,
    bucket: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  ajnaToken(overrides?: CallOverrides): Promise<string>;

  ajnaVersion(overrides?: CallOverrides): Promise<string>;

  convertPriceToIndex(
    price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployer(overrides?: CallOverrides): Promise<string>;

  depositAndDraw(
    pool: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    stamploanEnabled: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    pool: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    stamploanEnabled: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCollateralAndDrawDebt(
    pool: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawDebt(
    pool: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getQuoteAmount(
    pool: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  moveQuote(
    pool: PromiseOrValue<string>,
    oldPrice: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openEarnPosition(
    pool: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    pool: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolInfoUtils(overrides?: CallOverrides): Promise<string>;

  removeCollateral(
    pool: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayAndClose(
    pool: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayDebt(
    pool: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    stamploanEnabled: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayDebtAndWithdrawCollateral(
    pool: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayWithdraw(
    pool: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    stamploanEnabled: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supplyAndMoveQuote(
    pool: PromiseOrValue<string>,
    amountToAdd: PromiseOrValue<BigNumberish>,
    oldPrice: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supplyQuote(
    pool: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAndMoveQuote(
    pool: PromiseOrValue<string>,
    amountToWithdraw: PromiseOrValue<BigNumberish>,
    oldPrice: PromiseOrValue<BigNumberish>,
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    pool: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawQuote(
    pool: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    GUARD(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    _validateBucketState(
      pool: PromiseOrValue<string>,
      bucket: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ajnaToken(overrides?: CallOverrides): Promise<string>;

    ajnaVersion(overrides?: CallOverrides): Promise<string>;

    convertPriceToIndex(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<string>;

    depositAndDraw(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateral(
      pool: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCollateralAndDrawDebt(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    drawDebt(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getQuoteAmount(
      pool: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveQuote(
      pool: PromiseOrValue<string>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    openEarnPosition(
      pool: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolInfoUtils(overrides?: CallOverrides): Promise<string>;

    removeCollateral(
      pool: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayAndClose(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayDebt(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayDebtAndWithdrawCollateral(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayWithdraw(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyAndMoveQuote(
      pool: PromiseOrValue<string>,
      amountToAdd: PromiseOrValue<BigNumberish>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyQuote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAndMoveQuote(
      pool: PromiseOrValue<string>,
      amountToWithdraw: PromiseOrValue<BigNumberish>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCollateral(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawQuote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreatePosition(address,string,string,address,address)"(
      proxyAddress?: PromiseOrValue<string> | null,
      protocol?: null,
      positionType?: null,
      collateralToken?: null,
      debtToken?: null
    ): CreatePositionEventFilter;
    CreatePosition(
      proxyAddress?: PromiseOrValue<string> | null,
      protocol?: null,
      positionType?: null,
      collateralToken?: null,
      debtToken?: null
    ): CreatePositionEventFilter;

    "ProxyActionsOperation(bytes32)"(
      name?: PromiseOrValue<BytesLike> | null
    ): ProxyActionsOperationEventFilter;
    ProxyActionsOperation(
      name?: PromiseOrValue<BytesLike> | null
    ): ProxyActionsOperationEventFilter;
  };

  estimateGas: {
    GUARD(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    _validateBucketState(
      pool: PromiseOrValue<string>,
      bucket: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ajnaToken(overrides?: CallOverrides): Promise<BigNumber>;

    ajnaVersion(overrides?: CallOverrides): Promise<BigNumber>;

    convertPriceToIndex(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndDraw(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      pool: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCollateralAndDrawDebt(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawDebt(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getQuoteAmount(
      pool: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveQuote(
      pool: PromiseOrValue<string>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openEarnPosition(
      pool: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openPosition(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolInfoUtils(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      pool: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayAndClose(
      pool: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayDebt(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayDebtAndWithdrawCollateral(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayWithdraw(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supplyAndMoveQuote(
      pool: PromiseOrValue<string>,
      amountToAdd: PromiseOrValue<BigNumberish>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supplyQuote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAndMoveQuote(
      pool: PromiseOrValue<string>,
      amountToWithdraw: PromiseOrValue<BigNumberish>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawCollateral(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawQuote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GUARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _validateBucketState(
      pool: PromiseOrValue<string>,
      bucket: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ajnaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ajnaVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertPriceToIndex(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositAndDraw(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      pool: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateralAndDrawDebt(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawDebt(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getQuoteAmount(
      pool: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveQuote(
      pool: PromiseOrValue<string>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openEarnPosition(
      pool: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolInfoUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateral(
      pool: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayAndClose(
      pool: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayDebt(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayDebtAndWithdrawCollateral(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayWithdraw(
      pool: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      stamploanEnabled: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supplyAndMoveQuote(
      pool: PromiseOrValue<string>,
      amountToAdd: PromiseOrValue<BigNumberish>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supplyQuote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAndMoveQuote(
      pool: PromiseOrValue<string>,
      amountToWithdraw: PromiseOrValue<BigNumberish>,
      oldPrice: PromiseOrValue<BigNumberish>,
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawQuote(
      pool: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
