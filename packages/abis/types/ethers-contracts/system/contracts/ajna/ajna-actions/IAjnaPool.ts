/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IAjnaPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCollateral"
      | "addQuoteToken"
      | "approveLpOwnership"
      | "collateralAddress"
      | "collateralScale"
      | "currentBurnEpoch"
      | "drawDebt"
      | "lenderInfo"
      | "moveQuoteToken"
      | "quoteTokenAddress"
      | "quoteTokenScale"
      | "removeCollateral"
      | "removeQuoteToken"
      | "repayDebt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addQuoteToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveLpOwnership",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBurnEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawDebt",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuoteToken",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeQuoteToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLpOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBurnEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenderInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
}

export interface IAjnaPool extends BaseContract {
  connect(runner?: ContractRunner | null): IAjnaPool;
  waitForDeployment(): Promise<this>;

  interface: IAjnaPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCollateral: TypedContractMethod<
    [collateralAmountToAdd_: BigNumberish, index_: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  addQuoteToken: TypedContractMethod<
    [collateralAmountToAdd_: BigNumberish, index_: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  approveLpOwnership: TypedContractMethod<
    [allowedNewOwner: AddressLike, index: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  collateralAddress: TypedContractMethod<[], [string], "view">;

  collateralScale: TypedContractMethod<[], [bigint], "view">;

  currentBurnEpoch: TypedContractMethod<[], [bigint], "view">;

  drawDebt: TypedContractMethod<
    [
      borrowerAddress_: AddressLike,
      amountToBorrow_: BigNumberish,
      limitIndex_: BigNumberish,
      collateralToPledge_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  lenderInfo: TypedContractMethod<
    [index_: BigNumberish, lender_: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  moveQuoteToken: TypedContractMethod<
    [maxAmount: BigNumberish, fromIndex: BigNumberish, toIndex: BigNumberish],
    [[bigint, bigint] & { lpbAmountFrom: bigint; lpbAmountTo: bigint }],
    "nonpayable"
  >;

  quoteTokenAddress: TypedContractMethod<[], [string], "view">;

  quoteTokenScale: TypedContractMethod<[], [bigint], "view">;

  removeCollateral: TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { collateralAmount_: bigint; lpAmount_: bigint }],
    "nonpayable"
  >;

  removeQuoteToken: TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { collateralAmount_: bigint; lpAmount_: bigint }],
    "nonpayable"
  >;

  repayDebt: TypedContractMethod<
    [
      borrowerAddress_: AddressLike,
      maxQuoteTokenAmountToRepay_: BigNumberish,
      collateralAmountToPull_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCollateral"
  ): TypedContractMethod<
    [collateralAmountToAdd_: BigNumberish, index_: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addQuoteToken"
  ): TypedContractMethod<
    [collateralAmountToAdd_: BigNumberish, index_: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveLpOwnership"
  ): TypedContractMethod<
    [allowedNewOwner: AddressLike, index: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentBurnEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "drawDebt"
  ): TypedContractMethod<
    [
      borrowerAddress_: AddressLike,
      amountToBorrow_: BigNumberish,
      limitIndex_: BigNumberish,
      collateralToPledge_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lenderInfo"
  ): TypedContractMethod<
    [index_: BigNumberish, lender_: AddressLike],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "moveQuoteToken"
  ): TypedContractMethod<
    [maxAmount: BigNumberish, fromIndex: BigNumberish, toIndex: BigNumberish],
    [[bigint, bigint] & { lpbAmountFrom: bigint; lpbAmountTo: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quoteTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteTokenScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeCollateral"
  ): TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { collateralAmount_: bigint; lpAmount_: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeQuoteToken"
  ): TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { collateralAmount_: bigint; lpAmount_: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayDebt"
  ): TypedContractMethod<
    [
      borrowerAddress_: AddressLike,
      maxQuoteTokenAmountToRepay_: BigNumberish,
      collateralAmountToPull_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
