/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IAjnaPoolInterface extends utils.Interface {
  functions: {
    "addCollateral(uint256,uint256)": FunctionFragment;
    "addQuoteToken(uint256,uint256)": FunctionFragment;
    "approveLpOwnership(address,uint256,uint256)": FunctionFragment;
    "collateralAddress()": FunctionFragment;
    "collateralScale()": FunctionFragment;
    "currentBurnEpoch()": FunctionFragment;
    "drawDebt(address,uint256,uint256,uint256)": FunctionFragment;
    "lenderInfo(uint256,address)": FunctionFragment;
    "moveQuoteToken(uint256,uint256,uint256)": FunctionFragment;
    "quoteTokenAddress()": FunctionFragment;
    "quoteTokenScale()": FunctionFragment;
    "removeCollateral(uint256,uint256)": FunctionFragment;
    "removeQuoteToken(uint256,uint256)": FunctionFragment;
    "repayDebt(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollateral"
      | "addQuoteToken"
      | "approveLpOwnership"
      | "collateralAddress"
      | "collateralScale"
      | "currentBurnEpoch"
      | "drawDebt"
      | "lenderInfo"
      | "moveQuoteToken"
      | "quoteTokenAddress"
      | "quoteTokenScale"
      | "removeCollateral"
      | "removeQuoteToken"
      | "repayDebt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addQuoteToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveLpOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBurnEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuoteToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeQuoteToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLpOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBurnEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenderInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;

  events: {};
}

export interface IAjnaPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAjnaPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateral(
      collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addQuoteToken(
      collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveLpOwnership(
      allowedNewOwner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collateralAddress(overrides?: CallOverrides): Promise<[string]>;

    collateralScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentBurnEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    drawDebt(
      borrowerAddress_: PromiseOrValue<string>,
      amountToBorrow_: PromiseOrValue<BigNumberish>,
      limitIndex_: PromiseOrValue<BigNumberish>,
      collateralToPledge_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lenderInfo(
      index_: PromiseOrValue<BigNumberish>,
      lender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    moveQuoteToken(
      maxAmount: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoteTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    quoteTokenScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayDebt(
      borrowerAddress_: PromiseOrValue<string>,
      maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
      collateralAmountToPull_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateral(
    collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addQuoteToken(
    collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveLpOwnership(
    allowedNewOwner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collateralAddress(overrides?: CallOverrides): Promise<string>;

  collateralScale(overrides?: CallOverrides): Promise<BigNumber>;

  currentBurnEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  drawDebt(
    borrowerAddress_: PromiseOrValue<string>,
    amountToBorrow_: PromiseOrValue<BigNumberish>,
    limitIndex_: PromiseOrValue<BigNumberish>,
    collateralToPledge_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lenderInfo(
    index_: PromiseOrValue<BigNumberish>,
    lender_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  moveQuoteToken(
    maxAmount: PromiseOrValue<BigNumberish>,
    fromIndex: PromiseOrValue<BigNumberish>,
    toIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoteTokenAddress(overrides?: CallOverrides): Promise<string>;

  quoteTokenScale(overrides?: CallOverrides): Promise<BigNumber>;

  removeCollateral(
    maxAmount_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeQuoteToken(
    maxAmount_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayDebt(
    borrowerAddress_: PromiseOrValue<string>,
    maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
    collateralAmountToPull_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateral(
      collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addQuoteToken(
      collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveLpOwnership(
      allowedNewOwner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralAddress(overrides?: CallOverrides): Promise<string>;

    collateralScale(overrides?: CallOverrides): Promise<BigNumber>;

    currentBurnEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    drawDebt(
      borrowerAddress_: PromiseOrValue<string>,
      amountToBorrow_: PromiseOrValue<BigNumberish>,
      limitIndex_: PromiseOrValue<BigNumberish>,
      collateralToPledge_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lenderInfo(
      index_: PromiseOrValue<BigNumberish>,
      lender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    moveQuoteToken(
      maxAmount: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lpbAmountFrom: BigNumber;
        lpbAmountTo: BigNumber;
      }
    >;

    quoteTokenAddress(overrides?: CallOverrides): Promise<string>;

    quoteTokenScale(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmount_: BigNumber;
        lpAmount_: BigNumber;
      }
    >;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmount_: BigNumber;
        lpAmount_: BigNumber;
      }
    >;

    repayDebt(
      borrowerAddress_: PromiseOrValue<string>,
      maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
      collateralAmountToPull_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addCollateral(
      collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addQuoteToken(
      collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveLpOwnership(
      allowedNewOwner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collateralAddress(overrides?: CallOverrides): Promise<BigNumber>;

    collateralScale(overrides?: CallOverrides): Promise<BigNumber>;

    currentBurnEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    drawDebt(
      borrowerAddress_: PromiseOrValue<string>,
      amountToBorrow_: PromiseOrValue<BigNumberish>,
      limitIndex_: PromiseOrValue<BigNumberish>,
      collateralToPledge_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lenderInfo(
      index_: PromiseOrValue<BigNumberish>,
      lender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveQuoteToken(
      maxAmount: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoteTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    quoteTokenScale(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayDebt(
      borrowerAddress_: PromiseOrValue<string>,
      maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
      collateralAmountToPull_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateral(
      collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addQuoteToken(
      collateralAmountToAdd_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveLpOwnership(
      allowedNewOwner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collateralAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBurnEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawDebt(
      borrowerAddress_: PromiseOrValue<string>,
      amountToBorrow_: PromiseOrValue<BigNumberish>,
      limitIndex_: PromiseOrValue<BigNumberish>,
      collateralToPledge_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lenderInfo(
      index_: PromiseOrValue<BigNumberish>,
      lender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveQuoteToken(
      maxAmount: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoteTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteTokenScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayDebt(
      borrowerAddress_: PromiseOrValue<string>,
      maxQuoteTokenAmountToRepay_: PromiseOrValue<BigNumberish>,
      collateralAmountToPull_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
