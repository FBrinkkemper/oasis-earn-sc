/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface AjnaRewardClaimerInterface extends utils.Interface {
  functions: {
    "ajnaProxyActions()": FunctionFragment;
    "ajnaToken()": FunctionFragment;
    "claimRewardsAndSendToOwner(uint256[])": FunctionFragment;
    "guard()": FunctionFragment;
    "initializeAjnaProxyActions(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "rewardsManager()": FunctionFragment;
    "self()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ajnaProxyActions"
      | "ajnaToken"
      | "claimRewardsAndSendToOwner"
      | "guard"
      | "initializeAjnaProxyActions"
      | "owner"
      | "rewardsManager"
      | "self"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ajnaProxyActions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ajnaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRewardsAndSendToOwner",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeAjnaProxyActions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "self", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ajnaProxyActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ajnaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsAndSendToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeAjnaProxyActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "self", data: BytesLike): Result;

  events: {
    "AjnaRewardClaimed(address,address,uint256)": EventFragment;
    "ProxyActionsOperation(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AjnaRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyActionsOperation"): EventFragment;
}

export interface AjnaRewardClaimedEventObject {
  proxy: string;
  pool: string;
  tokenId: BigNumber;
}
export type AjnaRewardClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  AjnaRewardClaimedEventObject
>;

export type AjnaRewardClaimedEventFilter =
  TypedEventFilter<AjnaRewardClaimedEvent>;

export interface ProxyActionsOperationEventObject {
  name: string;
}
export type ProxyActionsOperationEvent = TypedEvent<
  [string],
  ProxyActionsOperationEventObject
>;

export type ProxyActionsOperationEventFilter =
  TypedEventFilter<ProxyActionsOperationEvent>;

export interface AjnaRewardClaimer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AjnaRewardClaimerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ajnaProxyActions(overrides?: CallOverrides): Promise<[string]>;

    ajnaToken(overrides?: CallOverrides): Promise<[string]>;

    claimRewardsAndSendToOwner(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    guard(overrides?: CallOverrides): Promise<[string]>;

    initializeAjnaProxyActions(
      _ajnaProxyActions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rewardsManager(overrides?: CallOverrides): Promise<[string]>;

    self(overrides?: CallOverrides): Promise<[string]>;
  };

  ajnaProxyActions(overrides?: CallOverrides): Promise<string>;

  ajnaToken(overrides?: CallOverrides): Promise<string>;

  claimRewardsAndSendToOwner(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  guard(overrides?: CallOverrides): Promise<string>;

  initializeAjnaProxyActions(
    _ajnaProxyActions: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rewardsManager(overrides?: CallOverrides): Promise<string>;

  self(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ajnaProxyActions(overrides?: CallOverrides): Promise<string>;

    ajnaToken(overrides?: CallOverrides): Promise<string>;

    claimRewardsAndSendToOwner(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    guard(overrides?: CallOverrides): Promise<string>;

    initializeAjnaProxyActions(
      _ajnaProxyActions: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    rewardsManager(overrides?: CallOverrides): Promise<string>;

    self(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AjnaRewardClaimed(address,address,uint256)"(
      proxy?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AjnaRewardClaimedEventFilter;
    AjnaRewardClaimed(
      proxy?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AjnaRewardClaimedEventFilter;

    "ProxyActionsOperation(bytes32)"(
      name?: PromiseOrValue<BytesLike> | null
    ): ProxyActionsOperationEventFilter;
    ProxyActionsOperation(
      name?: PromiseOrValue<BytesLike> | null
    ): ProxyActionsOperationEventFilter;
  };

  estimateGas: {
    ajnaProxyActions(overrides?: CallOverrides): Promise<BigNumber>;

    ajnaToken(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewardsAndSendToOwner(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<BigNumber>;

    initializeAjnaProxyActions(
      _ajnaProxyActions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsManager(overrides?: CallOverrides): Promise<BigNumber>;

    self(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ajnaProxyActions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ajnaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewardsAndSendToOwner(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeAjnaProxyActions(
      _ajnaProxyActions: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    self(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
