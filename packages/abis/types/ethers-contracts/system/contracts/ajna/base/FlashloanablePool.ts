/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface FlashloanablePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addQuoteToken"
      | "approveLPTransferors"
      | "approvedTransferors"
      | "auctionInfo"
      | "borrowerInfo"
      | "bucketExchangeRate"
      | "bucketInfo"
      | "bucketTake"
      | "burnInfo"
      | "collateralAddress"
      | "currentBurnEpoch"
      | "debtInfo"
      | "decreaseLPAllowance"
      | "depositIndex"
      | "depositScale"
      | "depositSize"
      | "depositUpToIndex"
      | "depositUtilization"
      | "emasInfo"
      | "flashFee"
      | "flashLoan"
      | "increaseLPAllowance"
      | "inflatorInfo"
      | "interestRateInfo"
      | "kick"
      | "kickReserveAuction"
      | "kickerInfo"
      | "lenderInfo"
      | "lenderKick"
      | "loanInfo"
      | "loansInfo"
      | "lpAllowance"
      | "maxFlashLoan"
      | "moveQuoteToken"
      | "multicall"
      | "pledgedCollateral"
      | "poolType"
      | "quoteTokenAddress"
      | "quoteTokenScale"
      | "removeCollateral"
      | "removeQuoteToken"
      | "reservesInfo"
      | "revokeLPAllowance"
      | "revokeLPTransferors"
      | "settle"
      | "stampLoan"
      | "take"
      | "takeReserves"
      | "totalAuctionsInPool"
      | "totalT0Debt"
      | "totalT0DebtInAuction"
      | "transferLP"
      | "updateInterest"
      | "withdrawBonds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddQuoteToken"
      | "ApproveLPTransferors"
      | "AuctionNFTSettle"
      | "AuctionSettle"
      | "BondWithdrawn"
      | "BucketBankruptcy"
      | "BucketTake"
      | "BucketTakeLPAwarded"
      | "DecreaseLPAllowance"
      | "Flashloan"
      | "IncreaseLPAllowance"
      | "Kick"
      | "KickReserveAuction"
      | "LoanStamped"
      | "MoveQuoteToken"
      | "RemoveCollateral"
      | "RemoveQuoteToken"
      | "RepayDebt"
      | "ReserveAuction"
      | "ResetInterestRate"
      | "RevokeLPAllowance"
      | "RevokeLPTransferors"
      | "Settle"
      | "Take"
      | "TransferLP"
      | "UpdateInterestRate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addQuoteToken",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveLPTransferors",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTransferors",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketExchangeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketTake",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBurnEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseLPAllowance",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositScale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositUpToIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "emasInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLPAllowance",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "inflatorInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kickReserveAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderKick",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loansInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lpAllowance",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuoteToken",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgedCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeQuoteToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reservesInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLPAllowance",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLPTransferors",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stampLoan", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takeReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAuctionsInPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalT0Debt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalT0DebtInAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferLP",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBonds",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLPTransferors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedTransferors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bucketExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bucketInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bucketTake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBurnEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUpToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emasInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickReserveAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kickerInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenderInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenderKick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loansInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLPTransferors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stampLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAuctionsInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalT0Debt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalT0DebtInAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBonds",
    data: BytesLike
  ): Result;
}

export namespace AddQuoteTokenEvent {
  export type InputTuple = [
    lender: AddressLike,
    index: BigNumberish,
    amount: BigNumberish,
    lpAwarded: BigNumberish,
    lup: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    index: bigint,
    amount: bigint,
    lpAwarded: bigint,
    lup: bigint
  ];
  export interface OutputObject {
    lender: string;
    index: bigint;
    amount: bigint;
    lpAwarded: bigint;
    lup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApproveLPTransferorsEvent {
  export type InputTuple = [lender: AddressLike, transferors: AddressLike[]];
  export type OutputTuple = [lender: string, transferors: string[]];
  export interface OutputObject {
    lender: string;
    transferors: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionNFTSettleEvent {
  export type InputTuple = [
    borrower: AddressLike,
    collateral: BigNumberish,
    lp: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    collateral: bigint,
    lp: bigint,
    index: bigint
  ];
  export interface OutputObject {
    borrower: string;
    collateral: bigint;
    lp: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionSettleEvent {
  export type InputTuple = [borrower: AddressLike, collateral: BigNumberish];
  export type OutputTuple = [borrower: string, collateral: bigint];
  export interface OutputObject {
    borrower: string;
    collateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondWithdrawnEvent {
  export type InputTuple = [
    kicker: AddressLike,
    reciever: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [kicker: string, reciever: string, amount: bigint];
  export interface OutputObject {
    kicker: string;
    reciever: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketBankruptcyEvent {
  export type InputTuple = [index: BigNumberish, lpForfeited: BigNumberish];
  export type OutputTuple = [index: bigint, lpForfeited: bigint];
  export interface OutputObject {
    index: bigint;
    lpForfeited: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketTakeEvent {
  export type InputTuple = [
    borrower: AddressLike,
    index: BigNumberish,
    amount: BigNumberish,
    collateral: BigNumberish,
    bondChange: BigNumberish,
    isReward: boolean
  ];
  export type OutputTuple = [
    borrower: string,
    index: bigint,
    amount: bigint,
    collateral: bigint,
    bondChange: bigint,
    isReward: boolean
  ];
  export interface OutputObject {
    borrower: string;
    index: bigint;
    amount: bigint;
    collateral: bigint;
    bondChange: bigint;
    isReward: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketTakeLPAwardedEvent {
  export type InputTuple = [
    taker: AddressLike,
    kicker: AddressLike,
    lpAwardedTaker: BigNumberish,
    lpAwardedKicker: BigNumberish
  ];
  export type OutputTuple = [
    taker: string,
    kicker: string,
    lpAwardedTaker: bigint,
    lpAwardedKicker: bigint
  ];
  export interface OutputObject {
    taker: string;
    kicker: string;
    lpAwardedTaker: bigint;
    lpAwardedKicker: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreaseLPAllowanceEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    indexes: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    owner: string,
    spender: string,
    indexes: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    owner: string;
    spender: string;
    indexes: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashloanEvent {
  export type InputTuple = [
    receiver: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [receiver: string, token: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseLPAllowanceEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    indexes: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    owner: string,
    spender: string,
    indexes: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    owner: string;
    spender: string;
    indexes: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KickEvent {
  export type InputTuple = [
    borrower: AddressLike,
    debt: BigNumberish,
    collateral: BigNumberish,
    bond: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    debt: bigint,
    collateral: bigint,
    bond: bigint
  ];
  export interface OutputObject {
    borrower: string;
    debt: bigint;
    collateral: bigint;
    bond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KickReserveAuctionEvent {
  export type InputTuple = [
    claimableReservesRemaining: BigNumberish,
    auctionPrice: BigNumberish,
    currentBurnEpoch: BigNumberish
  ];
  export type OutputTuple = [
    claimableReservesRemaining: bigint,
    auctionPrice: bigint,
    currentBurnEpoch: bigint
  ];
  export interface OutputObject {
    claimableReservesRemaining: bigint;
    auctionPrice: bigint;
    currentBurnEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanStampedEvent {
  export type InputTuple = [borrower: AddressLike];
  export type OutputTuple = [borrower: string];
  export interface OutputObject {
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoveQuoteTokenEvent {
  export type InputTuple = [
    lender: AddressLike,
    from: BigNumberish,
    to: BigNumberish,
    amount: BigNumberish,
    lpRedeemedFrom: BigNumberish,
    lpAwardedTo: BigNumberish,
    lup: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    from: bigint,
    to: bigint,
    amount: bigint,
    lpRedeemedFrom: bigint,
    lpAwardedTo: bigint,
    lup: bigint
  ];
  export interface OutputObject {
    lender: string;
    from: bigint;
    to: bigint;
    amount: bigint;
    lpRedeemedFrom: bigint;
    lpAwardedTo: bigint;
    lup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveCollateralEvent {
  export type InputTuple = [
    claimer: AddressLike,
    index: BigNumberish,
    amount: BigNumberish,
    lpRedeemed: BigNumberish
  ];
  export type OutputTuple = [
    claimer: string,
    index: bigint,
    amount: bigint,
    lpRedeemed: bigint
  ];
  export interface OutputObject {
    claimer: string;
    index: bigint;
    amount: bigint;
    lpRedeemed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveQuoteTokenEvent {
  export type InputTuple = [
    lender: AddressLike,
    index: BigNumberish,
    amount: BigNumberish,
    lpRedeemed: BigNumberish,
    lup: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    index: bigint,
    amount: bigint,
    lpRedeemed: bigint,
    lup: bigint
  ];
  export interface OutputObject {
    lender: string;
    index: bigint;
    amount: bigint;
    lpRedeemed: bigint;
    lup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayDebtEvent {
  export type InputTuple = [
    borrower: AddressLike,
    quoteRepaid: BigNumberish,
    collateralPulled: BigNumberish,
    lup: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    quoteRepaid: bigint,
    collateralPulled: bigint,
    lup: bigint
  ];
  export interface OutputObject {
    borrower: string;
    quoteRepaid: bigint;
    collateralPulled: bigint;
    lup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveAuctionEvent {
  export type InputTuple = [
    claimableReservesRemaining: BigNumberish,
    auctionPrice: BigNumberish,
    currentBurnEpoch: BigNumberish
  ];
  export type OutputTuple = [
    claimableReservesRemaining: bigint,
    auctionPrice: bigint,
    currentBurnEpoch: bigint
  ];
  export interface OutputObject {
    claimableReservesRemaining: bigint;
    auctionPrice: bigint;
    currentBurnEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResetInterestRateEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeLPAllowanceEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    indexes: BigNumberish[]
  ];
  export type OutputTuple = [owner: string, spender: string, indexes: bigint[]];
  export interface OutputObject {
    owner: string;
    spender: string;
    indexes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeLPTransferorsEvent {
  export type InputTuple = [lender: AddressLike, transferors: AddressLike[]];
  export type OutputTuple = [lender: string, transferors: string[]];
  export interface OutputObject {
    lender: string;
    transferors: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleEvent {
  export type InputTuple = [borrower: AddressLike, settledDebt: BigNumberish];
  export type OutputTuple = [borrower: string, settledDebt: bigint];
  export interface OutputObject {
    borrower: string;
    settledDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TakeEvent {
  export type InputTuple = [
    borrower: AddressLike,
    amount: BigNumberish,
    collateral: BigNumberish,
    bondChange: BigNumberish,
    isReward: boolean
  ];
  export type OutputTuple = [
    borrower: string,
    amount: bigint,
    collateral: bigint,
    bondChange: bigint,
    isReward: boolean
  ];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
    collateral: bigint;
    bondChange: bigint;
    isReward: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferLPEvent {
  export type InputTuple = [
    owner: AddressLike,
    newOwner: AddressLike,
    indexes: BigNumberish[],
    lp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    newOwner: string,
    indexes: bigint[],
    lp: bigint
  ];
  export interface OutputObject {
    owner: string;
    newOwner: string;
    indexes: bigint[];
    lp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateInterestRateEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlashloanablePool extends BaseContract {
  connect(runner?: ContractRunner | null): FlashloanablePool;
  waitForDeployment(): Promise<this>;

  interface: FlashloanablePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addQuoteToken: TypedContractMethod<
    [
      amount_: BigNumberish,
      index_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  approveLPTransferors: TypedContractMethod<
    [transferors_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  approvedTransferors: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  auctionInfo: TypedContractMethod<
    [borrower_: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        boolean
      ] & {
        kicker_: string;
        bondFactor_: bigint;
        bondSize_: bigint;
        kickTime_: bigint;
        kickMomp_: bigint;
        neutralPrice_: bigint;
        head_: string;
        next_: string;
        prev_: string;
        alreadyTaken_: boolean;
      }
    ],
    "view"
  >;

  borrowerInfo: TypedContractMethod<
    [borrower_: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  bucketExchangeRate: TypedContractMethod<
    [index_: BigNumberish],
    [bigint],
    "view"
  >;

  bucketInfo: TypedContractMethod<
    [index_: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  bucketTake: TypedContractMethod<
    [
      borrowerAddress_: AddressLike,
      depositTake_: boolean,
      index_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  burnInfo: TypedContractMethod<
    [burnEventEpoch_: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;

  collateralAddress: TypedContractMethod<[], [string], "view">;

  currentBurnEpoch: TypedContractMethod<[], [bigint], "view">;

  debtInfo: TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;

  decreaseLPAllowance: TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[], amounts_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  depositIndex: TypedContractMethod<[debt_: BigNumberish], [bigint], "view">;

  depositScale: TypedContractMethod<[index_: BigNumberish], [bigint], "view">;

  depositSize: TypedContractMethod<[], [bigint], "view">;

  depositUpToIndex: TypedContractMethod<
    [index_: BigNumberish],
    [bigint],
    "view"
  >;

  depositUtilization: TypedContractMethod<[], [bigint], "view">;

  emasInfo: TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;

  flashFee: TypedContractMethod<
    [token_: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  flashLoan: TypedContractMethod<
    [
      receiver_: AddressLike,
      token_: AddressLike,
      amount_: BigNumberish,
      data_: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  increaseLPAllowance: TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[], amounts_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  inflatorInfo: TypedContractMethod<[], [[bigint, bigint]], "view">;

  interestRateInfo: TypedContractMethod<[], [[bigint, bigint]], "view">;

  kick: TypedContractMethod<
    [borrower_: AddressLike, npLimitIndex_: BigNumberish],
    [void],
    "nonpayable"
  >;

  kickReserveAuction: TypedContractMethod<[], [void], "nonpayable">;

  kickerInfo: TypedContractMethod<
    [kicker_: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  lenderInfo: TypedContractMethod<
    [index_: BigNumberish, lender_: AddressLike],
    [[bigint, bigint] & { lpBalance_: bigint; depositTime_: bigint }],
    "view"
  >;

  lenderKick: TypedContractMethod<
    [index_: BigNumberish, npLimitIndex_: BigNumberish],
    [void],
    "nonpayable"
  >;

  loanInfo: TypedContractMethod<
    [loanId_: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  loansInfo: TypedContractMethod<[], [[string, bigint, bigint]], "view">;

  lpAllowance: TypedContractMethod<
    [index_: BigNumberish, spender_: AddressLike, owner_: AddressLike],
    [bigint],
    "view"
  >;

  maxFlashLoan: TypedContractMethod<[token_: AddressLike], [bigint], "view">;

  moveQuoteToken: TypedContractMethod<
    [
      maxAmount_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [
      [bigint, bigint, bigint] & {
        fromBucketLP_: bigint;
        toBucketLP_: bigint;
        movedAmount_: bigint;
      }
    ],
    "nonpayable"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  pledgedCollateral: TypedContractMethod<[], [bigint], "view">;

  poolType: TypedContractMethod<[], [bigint], "view">;

  quoteTokenAddress: TypedContractMethod<[], [string], "view">;

  quoteTokenScale: TypedContractMethod<[], [bigint], "view">;

  removeCollateral: TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { removedAmount_: bigint; redeemedLP_: bigint }],
    "nonpayable"
  >;

  removeQuoteToken: TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { removedAmount_: bigint; redeemedLP_: bigint }],
    "nonpayable"
  >;

  reservesInfo: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  revokeLPAllowance: TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  revokeLPTransferors: TypedContractMethod<
    [transferors_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  settle: TypedContractMethod<
    [borrowerAddress_: AddressLike, maxDepth_: BigNumberish],
    [void],
    "nonpayable"
  >;

  stampLoan: TypedContractMethod<[], [void], "nonpayable">;

  take: TypedContractMethod<
    [
      borrowerAddress_: AddressLike,
      maxAmount_: BigNumberish,
      callee_: AddressLike,
      data_: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  takeReserves: TypedContractMethod<
    [maxAmount_: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  totalAuctionsInPool: TypedContractMethod<[], [bigint], "view">;

  totalT0Debt: TypedContractMethod<[], [bigint], "view">;

  totalT0DebtInAuction: TypedContractMethod<[], [bigint], "view">;

  transferLP: TypedContractMethod<
    [owner_: AddressLike, newOwner_: AddressLike, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  updateInterest: TypedContractMethod<[], [void], "nonpayable">;

  withdrawBonds: TypedContractMethod<
    [recipient_: AddressLike, maxAmount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addQuoteToken"
  ): TypedContractMethod<
    [
      amount_: BigNumberish,
      index_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveLPTransferors"
  ): TypedContractMethod<[transferors_: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedTransferors"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctionInfo"
  ): TypedContractMethod<
    [borrower_: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        boolean
      ] & {
        kicker_: string;
        bondFactor_: bigint;
        bondSize_: bigint;
        kickTime_: bigint;
        kickMomp_: bigint;
        neutralPrice_: bigint;
        head_: string;
        next_: string;
        prev_: string;
        alreadyTaken_: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowerInfo"
  ): TypedContractMethod<
    [borrower_: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "bucketExchangeRate"
  ): TypedContractMethod<[index_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "bucketInfo"
  ): TypedContractMethod<
    [index_: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "bucketTake"
  ): TypedContractMethod<
    [
      borrowerAddress_: AddressLike,
      depositTake_: boolean,
      index_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnInfo"
  ): TypedContractMethod<
    [burnEventEpoch_: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentBurnEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "debtInfo"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "decreaseLPAllowance"
  ): TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[], amounts_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositIndex"
  ): TypedContractMethod<[debt_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositScale"
  ): TypedContractMethod<[index_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositUpToIndex"
  ): TypedContractMethod<[index_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositUtilization"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emasInfo"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "flashFee"
  ): TypedContractMethod<
    [token_: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      receiver_: AddressLike,
      token_: AddressLike,
      amount_: BigNumberish,
      data_: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLPAllowance"
  ): TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[], amounts_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "inflatorInfo"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "interestRateInfo"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "kick"
  ): TypedContractMethod<
    [borrower_: AddressLike, npLimitIndex_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "kickReserveAuction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "kickerInfo"
  ): TypedContractMethod<[kicker_: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "lenderInfo"
  ): TypedContractMethod<
    [index_: BigNumberish, lender_: AddressLike],
    [[bigint, bigint] & { lpBalance_: bigint; depositTime_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lenderKick"
  ): TypedContractMethod<
    [index_: BigNumberish, npLimitIndex_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "loanInfo"
  ): TypedContractMethod<[loanId_: BigNumberish], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "loansInfo"
  ): TypedContractMethod<[], [[string, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "lpAllowance"
  ): TypedContractMethod<
    [index_: BigNumberish, spender_: AddressLike, owner_: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxFlashLoan"
  ): TypedContractMethod<[token_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "moveQuoteToken"
  ): TypedContractMethod<
    [
      maxAmount_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [
      [bigint, bigint, bigint] & {
        fromBucketLP_: bigint;
        toBucketLP_: bigint;
        movedAmount_: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "pledgedCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteTokenScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeCollateral"
  ): TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { removedAmount_: bigint; redeemedLP_: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeQuoteToken"
  ): TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { removedAmount_: bigint; redeemedLP_: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reservesInfo"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "revokeLPAllowance"
  ): TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeLPTransferors"
  ): TypedContractMethod<[transferors_: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settle"
  ): TypedContractMethod<
    [borrowerAddress_: AddressLike, maxDepth_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stampLoan"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "take"
  ): TypedContractMethod<
    [
      borrowerAddress_: AddressLike,
      maxAmount_: BigNumberish,
      callee_: AddressLike,
      data_: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "takeReserves"
  ): TypedContractMethod<[maxAmount_: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "totalAuctionsInPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalT0Debt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalT0DebtInAuction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferLP"
  ): TypedContractMethod<
    [owner_: AddressLike, newOwner_: AddressLike, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateInterest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBonds"
  ): TypedContractMethod<
    [recipient_: AddressLike, maxAmount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddQuoteToken"
  ): TypedContractEvent<
    AddQuoteTokenEvent.InputTuple,
    AddQuoteTokenEvent.OutputTuple,
    AddQuoteTokenEvent.OutputObject
  >;
  getEvent(
    key: "ApproveLPTransferors"
  ): TypedContractEvent<
    ApproveLPTransferorsEvent.InputTuple,
    ApproveLPTransferorsEvent.OutputTuple,
    ApproveLPTransferorsEvent.OutputObject
  >;
  getEvent(
    key: "AuctionNFTSettle"
  ): TypedContractEvent<
    AuctionNFTSettleEvent.InputTuple,
    AuctionNFTSettleEvent.OutputTuple,
    AuctionNFTSettleEvent.OutputObject
  >;
  getEvent(
    key: "AuctionSettle"
  ): TypedContractEvent<
    AuctionSettleEvent.InputTuple,
    AuctionSettleEvent.OutputTuple,
    AuctionSettleEvent.OutputObject
  >;
  getEvent(
    key: "BondWithdrawn"
  ): TypedContractEvent<
    BondWithdrawnEvent.InputTuple,
    BondWithdrawnEvent.OutputTuple,
    BondWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "BucketBankruptcy"
  ): TypedContractEvent<
    BucketBankruptcyEvent.InputTuple,
    BucketBankruptcyEvent.OutputTuple,
    BucketBankruptcyEvent.OutputObject
  >;
  getEvent(
    key: "BucketTake"
  ): TypedContractEvent<
    BucketTakeEvent.InputTuple,
    BucketTakeEvent.OutputTuple,
    BucketTakeEvent.OutputObject
  >;
  getEvent(
    key: "BucketTakeLPAwarded"
  ): TypedContractEvent<
    BucketTakeLPAwardedEvent.InputTuple,
    BucketTakeLPAwardedEvent.OutputTuple,
    BucketTakeLPAwardedEvent.OutputObject
  >;
  getEvent(
    key: "DecreaseLPAllowance"
  ): TypedContractEvent<
    DecreaseLPAllowanceEvent.InputTuple,
    DecreaseLPAllowanceEvent.OutputTuple,
    DecreaseLPAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "Flashloan"
  ): TypedContractEvent<
    FlashloanEvent.InputTuple,
    FlashloanEvent.OutputTuple,
    FlashloanEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseLPAllowance"
  ): TypedContractEvent<
    IncreaseLPAllowanceEvent.InputTuple,
    IncreaseLPAllowanceEvent.OutputTuple,
    IncreaseLPAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "Kick"
  ): TypedContractEvent<
    KickEvent.InputTuple,
    KickEvent.OutputTuple,
    KickEvent.OutputObject
  >;
  getEvent(
    key: "KickReserveAuction"
  ): TypedContractEvent<
    KickReserveAuctionEvent.InputTuple,
    KickReserveAuctionEvent.OutputTuple,
    KickReserveAuctionEvent.OutputObject
  >;
  getEvent(
    key: "LoanStamped"
  ): TypedContractEvent<
    LoanStampedEvent.InputTuple,
    LoanStampedEvent.OutputTuple,
    LoanStampedEvent.OutputObject
  >;
  getEvent(
    key: "MoveQuoteToken"
  ): TypedContractEvent<
    MoveQuoteTokenEvent.InputTuple,
    MoveQuoteTokenEvent.OutputTuple,
    MoveQuoteTokenEvent.OutputObject
  >;
  getEvent(
    key: "RemoveCollateral"
  ): TypedContractEvent<
    RemoveCollateralEvent.InputTuple,
    RemoveCollateralEvent.OutputTuple,
    RemoveCollateralEvent.OutputObject
  >;
  getEvent(
    key: "RemoveQuoteToken"
  ): TypedContractEvent<
    RemoveQuoteTokenEvent.InputTuple,
    RemoveQuoteTokenEvent.OutputTuple,
    RemoveQuoteTokenEvent.OutputObject
  >;
  getEvent(
    key: "RepayDebt"
  ): TypedContractEvent<
    RepayDebtEvent.InputTuple,
    RepayDebtEvent.OutputTuple,
    RepayDebtEvent.OutputObject
  >;
  getEvent(
    key: "ReserveAuction"
  ): TypedContractEvent<
    ReserveAuctionEvent.InputTuple,
    ReserveAuctionEvent.OutputTuple,
    ReserveAuctionEvent.OutputObject
  >;
  getEvent(
    key: "ResetInterestRate"
  ): TypedContractEvent<
    ResetInterestRateEvent.InputTuple,
    ResetInterestRateEvent.OutputTuple,
    ResetInterestRateEvent.OutputObject
  >;
  getEvent(
    key: "RevokeLPAllowance"
  ): TypedContractEvent<
    RevokeLPAllowanceEvent.InputTuple,
    RevokeLPAllowanceEvent.OutputTuple,
    RevokeLPAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "RevokeLPTransferors"
  ): TypedContractEvent<
    RevokeLPTransferorsEvent.InputTuple,
    RevokeLPTransferorsEvent.OutputTuple,
    RevokeLPTransferorsEvent.OutputObject
  >;
  getEvent(
    key: "Settle"
  ): TypedContractEvent<
    SettleEvent.InputTuple,
    SettleEvent.OutputTuple,
    SettleEvent.OutputObject
  >;
  getEvent(
    key: "Take"
  ): TypedContractEvent<
    TakeEvent.InputTuple,
    TakeEvent.OutputTuple,
    TakeEvent.OutputObject
  >;
  getEvent(
    key: "TransferLP"
  ): TypedContractEvent<
    TransferLPEvent.InputTuple,
    TransferLPEvent.OutputTuple,
    TransferLPEvent.OutputObject
  >;
  getEvent(
    key: "UpdateInterestRate"
  ): TypedContractEvent<
    UpdateInterestRateEvent.InputTuple,
    UpdateInterestRateEvent.OutputTuple,
    UpdateInterestRateEvent.OutputObject
  >;

  filters: {
    "AddQuoteToken(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AddQuoteTokenEvent.InputTuple,
      AddQuoteTokenEvent.OutputTuple,
      AddQuoteTokenEvent.OutputObject
    >;
    AddQuoteToken: TypedContractEvent<
      AddQuoteTokenEvent.InputTuple,
      AddQuoteTokenEvent.OutputTuple,
      AddQuoteTokenEvent.OutputObject
    >;

    "ApproveLPTransferors(address,address[])": TypedContractEvent<
      ApproveLPTransferorsEvent.InputTuple,
      ApproveLPTransferorsEvent.OutputTuple,
      ApproveLPTransferorsEvent.OutputObject
    >;
    ApproveLPTransferors: TypedContractEvent<
      ApproveLPTransferorsEvent.InputTuple,
      ApproveLPTransferorsEvent.OutputTuple,
      ApproveLPTransferorsEvent.OutputObject
    >;

    "AuctionNFTSettle(address,uint256,uint256,uint256)": TypedContractEvent<
      AuctionNFTSettleEvent.InputTuple,
      AuctionNFTSettleEvent.OutputTuple,
      AuctionNFTSettleEvent.OutputObject
    >;
    AuctionNFTSettle: TypedContractEvent<
      AuctionNFTSettleEvent.InputTuple,
      AuctionNFTSettleEvent.OutputTuple,
      AuctionNFTSettleEvent.OutputObject
    >;

    "AuctionSettle(address,uint256)": TypedContractEvent<
      AuctionSettleEvent.InputTuple,
      AuctionSettleEvent.OutputTuple,
      AuctionSettleEvent.OutputObject
    >;
    AuctionSettle: TypedContractEvent<
      AuctionSettleEvent.InputTuple,
      AuctionSettleEvent.OutputTuple,
      AuctionSettleEvent.OutputObject
    >;

    "BondWithdrawn(address,address,uint256)": TypedContractEvent<
      BondWithdrawnEvent.InputTuple,
      BondWithdrawnEvent.OutputTuple,
      BondWithdrawnEvent.OutputObject
    >;
    BondWithdrawn: TypedContractEvent<
      BondWithdrawnEvent.InputTuple,
      BondWithdrawnEvent.OutputTuple,
      BondWithdrawnEvent.OutputObject
    >;

    "BucketBankruptcy(uint256,uint256)": TypedContractEvent<
      BucketBankruptcyEvent.InputTuple,
      BucketBankruptcyEvent.OutputTuple,
      BucketBankruptcyEvent.OutputObject
    >;
    BucketBankruptcy: TypedContractEvent<
      BucketBankruptcyEvent.InputTuple,
      BucketBankruptcyEvent.OutputTuple,
      BucketBankruptcyEvent.OutputObject
    >;

    "BucketTake(address,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      BucketTakeEvent.InputTuple,
      BucketTakeEvent.OutputTuple,
      BucketTakeEvent.OutputObject
    >;
    BucketTake: TypedContractEvent<
      BucketTakeEvent.InputTuple,
      BucketTakeEvent.OutputTuple,
      BucketTakeEvent.OutputObject
    >;

    "BucketTakeLPAwarded(address,address,uint256,uint256)": TypedContractEvent<
      BucketTakeLPAwardedEvent.InputTuple,
      BucketTakeLPAwardedEvent.OutputTuple,
      BucketTakeLPAwardedEvent.OutputObject
    >;
    BucketTakeLPAwarded: TypedContractEvent<
      BucketTakeLPAwardedEvent.InputTuple,
      BucketTakeLPAwardedEvent.OutputTuple,
      BucketTakeLPAwardedEvent.OutputObject
    >;

    "DecreaseLPAllowance(address,address,uint256[],uint256[])": TypedContractEvent<
      DecreaseLPAllowanceEvent.InputTuple,
      DecreaseLPAllowanceEvent.OutputTuple,
      DecreaseLPAllowanceEvent.OutputObject
    >;
    DecreaseLPAllowance: TypedContractEvent<
      DecreaseLPAllowanceEvent.InputTuple,
      DecreaseLPAllowanceEvent.OutputTuple,
      DecreaseLPAllowanceEvent.OutputObject
    >;

    "Flashloan(address,address,uint256)": TypedContractEvent<
      FlashloanEvent.InputTuple,
      FlashloanEvent.OutputTuple,
      FlashloanEvent.OutputObject
    >;
    Flashloan: TypedContractEvent<
      FlashloanEvent.InputTuple,
      FlashloanEvent.OutputTuple,
      FlashloanEvent.OutputObject
    >;

    "IncreaseLPAllowance(address,address,uint256[],uint256[])": TypedContractEvent<
      IncreaseLPAllowanceEvent.InputTuple,
      IncreaseLPAllowanceEvent.OutputTuple,
      IncreaseLPAllowanceEvent.OutputObject
    >;
    IncreaseLPAllowance: TypedContractEvent<
      IncreaseLPAllowanceEvent.InputTuple,
      IncreaseLPAllowanceEvent.OutputTuple,
      IncreaseLPAllowanceEvent.OutputObject
    >;

    "Kick(address,uint256,uint256,uint256)": TypedContractEvent<
      KickEvent.InputTuple,
      KickEvent.OutputTuple,
      KickEvent.OutputObject
    >;
    Kick: TypedContractEvent<
      KickEvent.InputTuple,
      KickEvent.OutputTuple,
      KickEvent.OutputObject
    >;

    "KickReserveAuction(uint256,uint256,uint256)": TypedContractEvent<
      KickReserveAuctionEvent.InputTuple,
      KickReserveAuctionEvent.OutputTuple,
      KickReserveAuctionEvent.OutputObject
    >;
    KickReserveAuction: TypedContractEvent<
      KickReserveAuctionEvent.InputTuple,
      KickReserveAuctionEvent.OutputTuple,
      KickReserveAuctionEvent.OutputObject
    >;

    "LoanStamped(address)": TypedContractEvent<
      LoanStampedEvent.InputTuple,
      LoanStampedEvent.OutputTuple,
      LoanStampedEvent.OutputObject
    >;
    LoanStamped: TypedContractEvent<
      LoanStampedEvent.InputTuple,
      LoanStampedEvent.OutputTuple,
      LoanStampedEvent.OutputObject
    >;

    "MoveQuoteToken(address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MoveQuoteTokenEvent.InputTuple,
      MoveQuoteTokenEvent.OutputTuple,
      MoveQuoteTokenEvent.OutputObject
    >;
    MoveQuoteToken: TypedContractEvent<
      MoveQuoteTokenEvent.InputTuple,
      MoveQuoteTokenEvent.OutputTuple,
      MoveQuoteTokenEvent.OutputObject
    >;

    "RemoveCollateral(address,uint256,uint256,uint256)": TypedContractEvent<
      RemoveCollateralEvent.InputTuple,
      RemoveCollateralEvent.OutputTuple,
      RemoveCollateralEvent.OutputObject
    >;
    RemoveCollateral: TypedContractEvent<
      RemoveCollateralEvent.InputTuple,
      RemoveCollateralEvent.OutputTuple,
      RemoveCollateralEvent.OutputObject
    >;

    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RemoveQuoteTokenEvent.InputTuple,
      RemoveQuoteTokenEvent.OutputTuple,
      RemoveQuoteTokenEvent.OutputObject
    >;
    RemoveQuoteToken: TypedContractEvent<
      RemoveQuoteTokenEvent.InputTuple,
      RemoveQuoteTokenEvent.OutputTuple,
      RemoveQuoteTokenEvent.OutputObject
    >;

    "RepayDebt(address,uint256,uint256,uint256)": TypedContractEvent<
      RepayDebtEvent.InputTuple,
      RepayDebtEvent.OutputTuple,
      RepayDebtEvent.OutputObject
    >;
    RepayDebt: TypedContractEvent<
      RepayDebtEvent.InputTuple,
      RepayDebtEvent.OutputTuple,
      RepayDebtEvent.OutputObject
    >;

    "ReserveAuction(uint256,uint256,uint256)": TypedContractEvent<
      ReserveAuctionEvent.InputTuple,
      ReserveAuctionEvent.OutputTuple,
      ReserveAuctionEvent.OutputObject
    >;
    ReserveAuction: TypedContractEvent<
      ReserveAuctionEvent.InputTuple,
      ReserveAuctionEvent.OutputTuple,
      ReserveAuctionEvent.OutputObject
    >;

    "ResetInterestRate(uint256,uint256)": TypedContractEvent<
      ResetInterestRateEvent.InputTuple,
      ResetInterestRateEvent.OutputTuple,
      ResetInterestRateEvent.OutputObject
    >;
    ResetInterestRate: TypedContractEvent<
      ResetInterestRateEvent.InputTuple,
      ResetInterestRateEvent.OutputTuple,
      ResetInterestRateEvent.OutputObject
    >;

    "RevokeLPAllowance(address,address,uint256[])": TypedContractEvent<
      RevokeLPAllowanceEvent.InputTuple,
      RevokeLPAllowanceEvent.OutputTuple,
      RevokeLPAllowanceEvent.OutputObject
    >;
    RevokeLPAllowance: TypedContractEvent<
      RevokeLPAllowanceEvent.InputTuple,
      RevokeLPAllowanceEvent.OutputTuple,
      RevokeLPAllowanceEvent.OutputObject
    >;

    "RevokeLPTransferors(address,address[])": TypedContractEvent<
      RevokeLPTransferorsEvent.InputTuple,
      RevokeLPTransferorsEvent.OutputTuple,
      RevokeLPTransferorsEvent.OutputObject
    >;
    RevokeLPTransferors: TypedContractEvent<
      RevokeLPTransferorsEvent.InputTuple,
      RevokeLPTransferorsEvent.OutputTuple,
      RevokeLPTransferorsEvent.OutputObject
    >;

    "Settle(address,uint256)": TypedContractEvent<
      SettleEvent.InputTuple,
      SettleEvent.OutputTuple,
      SettleEvent.OutputObject
    >;
    Settle: TypedContractEvent<
      SettleEvent.InputTuple,
      SettleEvent.OutputTuple,
      SettleEvent.OutputObject
    >;

    "Take(address,uint256,uint256,uint256,bool)": TypedContractEvent<
      TakeEvent.InputTuple,
      TakeEvent.OutputTuple,
      TakeEvent.OutputObject
    >;
    Take: TypedContractEvent<
      TakeEvent.InputTuple,
      TakeEvent.OutputTuple,
      TakeEvent.OutputObject
    >;

    "TransferLP(address,address,uint256[],uint256)": TypedContractEvent<
      TransferLPEvent.InputTuple,
      TransferLPEvent.OutputTuple,
      TransferLPEvent.OutputObject
    >;
    TransferLP: TypedContractEvent<
      TransferLPEvent.InputTuple,
      TransferLPEvent.OutputTuple,
      TransferLPEvent.OutputObject
    >;

    "UpdateInterestRate(uint256,uint256)": TypedContractEvent<
      UpdateInterestRateEvent.InputTuple,
      UpdateInterestRateEvent.OutputTuple,
      UpdateInterestRateEvent.OutputObject
    >;
    UpdateInterestRate: TypedContractEvent<
      UpdateInterestRateEvent.InputTuple,
      UpdateInterestRateEvent.OutputTuple,
      UpdateInterestRateEvent.OutputObject
    >;
  };
}
