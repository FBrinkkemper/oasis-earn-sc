/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface PoolDeployerInterface extends utils.Interface {
  functions: {
    "MAX_RATE()": FunctionFragment;
    "MIN_RATE()": FunctionFragment;
    "ajna()": FunctionFragment;
    "deployedPools(bytes32,address,address)": FunctionFragment;
    "deployedPoolsList(uint256)": FunctionFragment;
    "getDeployedPoolsList()": FunctionFragment;
    "getNumberOfDeployedPools()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_RATE"
      | "MIN_RATE"
      | "ajna"
      | "deployedPools"
      | "deployedPoolsList"
      | "getDeployedPoolsList"
      | "getNumberOfDeployedPools"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_RATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_RATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ajna", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployedPools",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedPoolsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedPoolsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDeployedPools",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ajna", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedPoolsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedPoolsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDeployedPools",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PoolDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ajna(overrides?: CallOverrides): Promise<[string]>;

    deployedPools(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployedPoolsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDeployedPoolsList(overrides?: CallOverrides): Promise<[string[]]>;

    getNumberOfDeployedPools(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  ajna(overrides?: CallOverrides): Promise<string>;

  deployedPools(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  deployedPoolsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDeployedPoolsList(overrides?: CallOverrides): Promise<string[]>;

  getNumberOfDeployedPools(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    ajna(overrides?: CallOverrides): Promise<string>;

    deployedPools(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployedPoolsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDeployedPoolsList(overrides?: CallOverrides): Promise<string[]>;

    getNumberOfDeployedPools(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    MAX_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    ajna(overrides?: CallOverrides): Promise<BigNumber>;

    deployedPools(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployedPoolsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployedPoolsList(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDeployedPools(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ajna(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployedPools(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployedPoolsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployedPoolsList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfDeployedPools(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
