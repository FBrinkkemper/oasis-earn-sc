/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface PoolDeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_RATE"
      | "MIN_RATE"
      | "ajna"
      | "deployedPools"
      | "deployedPoolsList"
      | "getDeployedPoolsList"
      | "getNumberOfDeployedPools"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_RATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_RATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ajna", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployedPools",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedPoolsList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedPoolsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDeployedPools",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ajna", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedPoolsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedPoolsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDeployedPools",
    data: BytesLike
  ): Result;
}

export interface PoolDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): PoolDeployer;
  waitForDeployment(): Promise<this>;

  interface: PoolDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_RATE: TypedContractMethod<[], [bigint], "view">;

  MIN_RATE: TypedContractMethod<[], [bigint], "view">;

  ajna: TypedContractMethod<[], [string], "view">;

  deployedPools: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: AddressLike],
    [string],
    "view"
  >;

  deployedPoolsList: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getDeployedPoolsList: TypedContractMethod<[], [string[]], "view">;

  getNumberOfDeployedPools: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ajna"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deployedPools"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployedPoolsList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDeployedPoolsList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNumberOfDeployedPools"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
