/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ERC20PoolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ERC20_NON_SUBSET_HASH"
      | "MAX_RATE"
      | "MIN_RATE"
      | "ajna"
      | "deployPool"
      | "deployedPools"
      | "deployedPoolsList"
      | "getDeployedPoolsList"
      | "getNumberOfDeployedPools"
      | "implementation"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "ERC20_NON_SUBSET_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_RATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_RATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ajna", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedPools",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedPoolsList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedPoolsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDeployedPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC20_NON_SUBSET_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ajna", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedPoolsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedPoolsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDeployedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [pool_: AddressLike];
  export type OutputTuple = [pool_: string];
  export interface OutputObject {
    pool_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20PoolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20PoolFactory;
  waitForDeployment(): Promise<this>;

  interface: ERC20PoolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ERC20_NON_SUBSET_HASH: TypedContractMethod<[], [string], "view">;

  MAX_RATE: TypedContractMethod<[], [bigint], "view">;

  MIN_RATE: TypedContractMethod<[], [bigint], "view">;

  ajna: TypedContractMethod<[], [string], "view">;

  deployPool: TypedContractMethod<
    [
      collateral_: AddressLike,
      quote_: AddressLike,
      interestRate_: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  deployedPools: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: AddressLike],
    [string],
    "view"
  >;

  deployedPoolsList: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getDeployedPoolsList: TypedContractMethod<[], [string[]], "view">;

  getNumberOfDeployedPools: TypedContractMethod<[], [bigint], "view">;

  implementation: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ERC20_NON_SUBSET_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ajna"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deployPool"
  ): TypedContractMethod<
    [
      collateral_: AddressLike,
      quote_: AddressLike,
      interestRate_: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedPools"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployedPoolsList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDeployedPoolsList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNumberOfDeployedPools"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;

  filters: {
    "PoolCreated(address)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
  };
}
