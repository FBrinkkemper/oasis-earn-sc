/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace PoolInfoUtilsMulticall {
  export type PoolBalanceDetailsStruct = {
    debt: PromiseOrValue<BigNumberish>;
    accruedDebt: PromiseOrValue<BigNumberish>;
    debtInAuction: PromiseOrValue<BigNumberish>;
    t0Debt2ToCollateral: PromiseOrValue<BigNumberish>;
    depositUpToIndex: PromiseOrValue<BigNumberish>;
    quoteTokenBalance: PromiseOrValue<BigNumberish>;
    collateralTokenBalance: PromiseOrValue<BigNumberish>;
  };

  export type PoolBalanceDetailsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    debt: BigNumber;
    accruedDebt: BigNumber;
    debtInAuction: BigNumber;
    t0Debt2ToCollateral: BigNumber;
    depositUpToIndex: BigNumber;
    quoteTokenBalance: BigNumber;
    collateralTokenBalance: BigNumber;
  };

  export type PoolLoansInfoStruct = {
    poolSize: PromiseOrValue<BigNumberish>;
    loansCount: PromiseOrValue<BigNumberish>;
    maxBorrower: PromiseOrValue<string>;
    pendingInflator: PromiseOrValue<BigNumberish>;
    pendingInterestFactor: PromiseOrValue<BigNumberish>;
  };

  export type PoolLoansInfoStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    poolSize: BigNumber;
    loansCount: BigNumber;
    maxBorrower: string;
    pendingInflator: BigNumber;
    pendingInterestFactor: BigNumber;
  };

  export type PoolPriceInfoStruct = {
    hpb: PromiseOrValue<BigNumberish>;
    hpbIndex: PromiseOrValue<BigNumberish>;
    htp: PromiseOrValue<BigNumberish>;
    htpIndex: PromiseOrValue<BigNumberish>;
    lup: PromiseOrValue<BigNumberish>;
    lupIndex: PromiseOrValue<BigNumberish>;
  };

  export type PoolPriceInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    hpb: BigNumber;
    hpbIndex: BigNumber;
    htp: BigNumber;
    htpIndex: BigNumber;
    lup: BigNumber;
    lupIndex: BigNumber;
  };

  export type PoolRatesAndFeesStruct = {
    lenderInterestMargin: PromiseOrValue<BigNumberish>;
    borrowFeeRate: PromiseOrValue<BigNumberish>;
    depositFeeRate: PromiseOrValue<BigNumberish>;
  };

  export type PoolRatesAndFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lenderInterestMargin: BigNumber;
    borrowFeeRate: BigNumber;
    depositFeeRate: BigNumber;
  };

  export type PoolReservesInfoStruct = {
    reserves: PromiseOrValue<BigNumberish>;
    claimableReserves: PromiseOrValue<BigNumberish>;
    claimableReservesRemaining: PromiseOrValue<BigNumberish>;
    auctionPrice: PromiseOrValue<BigNumberish>;
    timeRemaining: PromiseOrValue<BigNumberish>;
  };

  export type PoolReservesInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    reserves: BigNumber;
    claimableReserves: BigNumber;
    claimableReservesRemaining: BigNumber;
    auctionPrice: BigNumber;
    timeRemaining: BigNumber;
  };

  export type PoolUtilizationInfoStruct = {
    poolMinDebtAmount: PromiseOrValue<BigNumberish>;
    poolCollateralization: PromiseOrValue<BigNumberish>;
    poolActualUtilization: PromiseOrValue<BigNumberish>;
    poolTargetUtilization: PromiseOrValue<BigNumberish>;
  };

  export type PoolUtilizationInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    poolMinDebtAmount: BigNumber;
    poolCollateralization: BigNumber;
    poolActualUtilization: BigNumber;
    poolTargetUtilization: BigNumber;
  };
}

export interface PoolInfoUtilsMulticallInterface extends utils.Interface {
  functions: {
    "poolBalanceDetails(address,uint256,address,address,bool)": FunctionFragment;
    "poolDetailsMulticall(address)": FunctionFragment;
    "poolInfoUtils()": FunctionFragment;
    "poolRatesAndFeesMulticall(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "poolBalanceDetails"
      | "poolDetailsMulticall"
      | "poolInfoUtils"
      | "poolRatesAndFeesMulticall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "poolBalanceDetails",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolDetailsMulticall",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfoUtils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolRatesAndFeesMulticall",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "poolBalanceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolDetailsMulticall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolInfoUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolRatesAndFeesMulticall",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PoolInfoUtilsMulticall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInfoUtilsMulticallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    poolBalanceDetails(
      ajnaPool_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      quoteTokenAddress_: PromiseOrValue<string>,
      collateralTokenAddress_: PromiseOrValue<string>,
      isNFT_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [PoolInfoUtilsMulticall.PoolBalanceDetailsStructOutput] & {
        poolBalanceDetails_: PoolInfoUtilsMulticall.PoolBalanceDetailsStructOutput;
      }
    >;

    poolDetailsMulticall(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        PoolInfoUtilsMulticall.PoolLoansInfoStructOutput,
        PoolInfoUtilsMulticall.PoolPriceInfoStructOutput,
        PoolInfoUtilsMulticall.PoolRatesAndFeesStructOutput,
        PoolInfoUtilsMulticall.PoolReservesInfoStructOutput,
        PoolInfoUtilsMulticall.PoolUtilizationInfoStructOutput
      ] & {
        poolLoansInfo_: PoolInfoUtilsMulticall.PoolLoansInfoStructOutput;
        poolPriceInfo_: PoolInfoUtilsMulticall.PoolPriceInfoStructOutput;
        poolRatesAndFees_: PoolInfoUtilsMulticall.PoolRatesAndFeesStructOutput;
        poolReservesInfo_: PoolInfoUtilsMulticall.PoolReservesInfoStructOutput;
        poolUtilizationInfo_: PoolInfoUtilsMulticall.PoolUtilizationInfoStructOutput;
      }
    >;

    poolInfoUtils(overrides?: CallOverrides): Promise<[string]>;

    poolRatesAndFeesMulticall(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lenderInterestMargin: BigNumber;
        borrowFeeRate: BigNumber;
        depositFeeRate: BigNumber;
      }
    >;
  };

  poolBalanceDetails(
    ajnaPool_: PromiseOrValue<string>,
    index_: PromiseOrValue<BigNumberish>,
    quoteTokenAddress_: PromiseOrValue<string>,
    collateralTokenAddress_: PromiseOrValue<string>,
    isNFT_: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<PoolInfoUtilsMulticall.PoolBalanceDetailsStructOutput>;

  poolDetailsMulticall(
    ajnaPool_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      PoolInfoUtilsMulticall.PoolLoansInfoStructOutput,
      PoolInfoUtilsMulticall.PoolPriceInfoStructOutput,
      PoolInfoUtilsMulticall.PoolRatesAndFeesStructOutput,
      PoolInfoUtilsMulticall.PoolReservesInfoStructOutput,
      PoolInfoUtilsMulticall.PoolUtilizationInfoStructOutput
    ] & {
      poolLoansInfo_: PoolInfoUtilsMulticall.PoolLoansInfoStructOutput;
      poolPriceInfo_: PoolInfoUtilsMulticall.PoolPriceInfoStructOutput;
      poolRatesAndFees_: PoolInfoUtilsMulticall.PoolRatesAndFeesStructOutput;
      poolReservesInfo_: PoolInfoUtilsMulticall.PoolReservesInfoStructOutput;
      poolUtilizationInfo_: PoolInfoUtilsMulticall.PoolUtilizationInfoStructOutput;
    }
  >;

  poolInfoUtils(overrides?: CallOverrides): Promise<string>;

  poolRatesAndFeesMulticall(
    ajnaPool_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lenderInterestMargin: BigNumber;
      borrowFeeRate: BigNumber;
      depositFeeRate: BigNumber;
    }
  >;

  callStatic: {
    poolBalanceDetails(
      ajnaPool_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      quoteTokenAddress_: PromiseOrValue<string>,
      collateralTokenAddress_: PromiseOrValue<string>,
      isNFT_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PoolInfoUtilsMulticall.PoolBalanceDetailsStructOutput>;

    poolDetailsMulticall(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        PoolInfoUtilsMulticall.PoolLoansInfoStructOutput,
        PoolInfoUtilsMulticall.PoolPriceInfoStructOutput,
        PoolInfoUtilsMulticall.PoolRatesAndFeesStructOutput,
        PoolInfoUtilsMulticall.PoolReservesInfoStructOutput,
        PoolInfoUtilsMulticall.PoolUtilizationInfoStructOutput
      ] & {
        poolLoansInfo_: PoolInfoUtilsMulticall.PoolLoansInfoStructOutput;
        poolPriceInfo_: PoolInfoUtilsMulticall.PoolPriceInfoStructOutput;
        poolRatesAndFees_: PoolInfoUtilsMulticall.PoolRatesAndFeesStructOutput;
        poolReservesInfo_: PoolInfoUtilsMulticall.PoolReservesInfoStructOutput;
        poolUtilizationInfo_: PoolInfoUtilsMulticall.PoolUtilizationInfoStructOutput;
      }
    >;

    poolInfoUtils(overrides?: CallOverrides): Promise<string>;

    poolRatesAndFeesMulticall(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lenderInterestMargin: BigNumber;
        borrowFeeRate: BigNumber;
        depositFeeRate: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    poolBalanceDetails(
      ajnaPool_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      quoteTokenAddress_: PromiseOrValue<string>,
      collateralTokenAddress_: PromiseOrValue<string>,
      isNFT_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolDetailsMulticall(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfoUtils(overrides?: CallOverrides): Promise<BigNumber>;

    poolRatesAndFeesMulticall(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    poolBalanceDetails(
      ajnaPool_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      quoteTokenAddress_: PromiseOrValue<string>,
      collateralTokenAddress_: PromiseOrValue<string>,
      isNFT_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolDetailsMulticall(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfoUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRatesAndFeesMulticall(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
