/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface LenderActionsInterface extends utils.Interface {
  functions: {};

  events: {
    "AddQuoteToken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "BucketBankruptcy(uint256,uint256)": EventFragment;
    "MoveQuoteToken(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddQuoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketBankruptcy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveQuoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveQuoteToken"): EventFragment;
}

export interface AddQuoteTokenEventObject {
  lender: string;
  index: BigNumber;
  amount: BigNumber;
  lpAwarded: BigNumber;
  lup: BigNumber;
}
export type AddQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  AddQuoteTokenEventObject
>;

export type AddQuoteTokenEventFilter = TypedEventFilter<AddQuoteTokenEvent>;

export interface BucketBankruptcyEventObject {
  index: BigNumber;
  lpForfeited: BigNumber;
}
export type BucketBankruptcyEvent = TypedEvent<
  [BigNumber, BigNumber],
  BucketBankruptcyEventObject
>;

export type BucketBankruptcyEventFilter =
  TypedEventFilter<BucketBankruptcyEvent>;

export interface MoveQuoteTokenEventObject {
  lender: string;
  from: BigNumber;
  to: BigNumber;
  amount: BigNumber;
  lpRedeemedFrom: BigNumber;
  lpAwardedTo: BigNumber;
  lup: BigNumber;
}
export type MoveQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MoveQuoteTokenEventObject
>;

export type MoveQuoteTokenEventFilter = TypedEventFilter<MoveQuoteTokenEvent>;

export interface RemoveQuoteTokenEventObject {
  lender: string;
  index: BigNumber;
  amount: BigNumber;
  lpRedeemed: BigNumber;
  lup: BigNumber;
}
export type RemoveQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveQuoteTokenEventObject
>;

export type RemoveQuoteTokenEventFilter =
  TypedEventFilter<RemoveQuoteTokenEvent>;

export interface LenderActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LenderActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddQuoteToken(address,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null,
      lup?: null
    ): AddQuoteTokenEventFilter;
    AddQuoteToken(
      lender?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null,
      lup?: null
    ): AddQuoteTokenEventFilter;

    "BucketBankruptcy(uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;
    BucketBankruptcy(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;

    "MoveQuoteToken(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null,
      lup?: null
    ): MoveQuoteTokenEventFilter;
    MoveQuoteToken(
      lender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null,
      lup?: null
    ): MoveQuoteTokenEventFilter;

    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null,
      lup?: null
    ): RemoveQuoteTokenEventFilter;
    RemoveQuoteToken(
      lender?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null,
      lup?: null
    ): RemoveQuoteTokenEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
