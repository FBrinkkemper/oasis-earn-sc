/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface LenderActionsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AddQuoteToken"
      | "BucketBankruptcy"
      | "MoveQuoteToken"
      | "RemoveQuoteToken"
  ): EventFragment;
}

export namespace AddQuoteTokenEvent {
  export type InputTuple = [
    lender: AddressLike,
    index: BigNumberish,
    amount: BigNumberish,
    lpAwarded: BigNumberish,
    lup: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    index: bigint,
    amount: bigint,
    lpAwarded: bigint,
    lup: bigint
  ];
  export interface OutputObject {
    lender: string;
    index: bigint;
    amount: bigint;
    lpAwarded: bigint;
    lup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketBankruptcyEvent {
  export type InputTuple = [index: BigNumberish, lpForfeited: BigNumberish];
  export type OutputTuple = [index: bigint, lpForfeited: bigint];
  export interface OutputObject {
    index: bigint;
    lpForfeited: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoveQuoteTokenEvent {
  export type InputTuple = [
    lender: AddressLike,
    from: BigNumberish,
    to: BigNumberish,
    amount: BigNumberish,
    lpRedeemedFrom: BigNumberish,
    lpAwardedTo: BigNumberish,
    lup: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    from: bigint,
    to: bigint,
    amount: bigint,
    lpRedeemedFrom: bigint,
    lpAwardedTo: bigint,
    lup: bigint
  ];
  export interface OutputObject {
    lender: string;
    from: bigint;
    to: bigint;
    amount: bigint;
    lpRedeemedFrom: bigint;
    lpAwardedTo: bigint;
    lup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveQuoteTokenEvent {
  export type InputTuple = [
    lender: AddressLike,
    index: BigNumberish,
    amount: BigNumberish,
    lpRedeemed: BigNumberish,
    lup: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    index: bigint,
    amount: bigint,
    lpRedeemed: bigint,
    lup: bigint
  ];
  export interface OutputObject {
    lender: string;
    index: bigint;
    amount: bigint;
    lpRedeemed: bigint;
    lup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LenderActions extends BaseContract {
  connect(runner?: ContractRunner | null): LenderActions;
  waitForDeployment(): Promise<this>;

  interface: LenderActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AddQuoteToken"
  ): TypedContractEvent<
    AddQuoteTokenEvent.InputTuple,
    AddQuoteTokenEvent.OutputTuple,
    AddQuoteTokenEvent.OutputObject
  >;
  getEvent(
    key: "BucketBankruptcy"
  ): TypedContractEvent<
    BucketBankruptcyEvent.InputTuple,
    BucketBankruptcyEvent.OutputTuple,
    BucketBankruptcyEvent.OutputObject
  >;
  getEvent(
    key: "MoveQuoteToken"
  ): TypedContractEvent<
    MoveQuoteTokenEvent.InputTuple,
    MoveQuoteTokenEvent.OutputTuple,
    MoveQuoteTokenEvent.OutputObject
  >;
  getEvent(
    key: "RemoveQuoteToken"
  ): TypedContractEvent<
    RemoveQuoteTokenEvent.InputTuple,
    RemoveQuoteTokenEvent.OutputTuple,
    RemoveQuoteTokenEvent.OutputObject
  >;

  filters: {
    "AddQuoteToken(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AddQuoteTokenEvent.InputTuple,
      AddQuoteTokenEvent.OutputTuple,
      AddQuoteTokenEvent.OutputObject
    >;
    AddQuoteToken: TypedContractEvent<
      AddQuoteTokenEvent.InputTuple,
      AddQuoteTokenEvent.OutputTuple,
      AddQuoteTokenEvent.OutputObject
    >;

    "BucketBankruptcy(uint256,uint256)": TypedContractEvent<
      BucketBankruptcyEvent.InputTuple,
      BucketBankruptcyEvent.OutputTuple,
      BucketBankruptcyEvent.OutputObject
    >;
    BucketBankruptcy: TypedContractEvent<
      BucketBankruptcyEvent.InputTuple,
      BucketBankruptcyEvent.OutputTuple,
      BucketBankruptcyEvent.OutputObject
    >;

    "MoveQuoteToken(address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MoveQuoteTokenEvent.InputTuple,
      MoveQuoteTokenEvent.OutputTuple,
      MoveQuoteTokenEvent.OutputObject
    >;
    MoveQuoteToken: TypedContractEvent<
      MoveQuoteTokenEvent.InputTuple,
      MoveQuoteTokenEvent.OutputTuple,
      MoveQuoteTokenEvent.OutputObject
    >;

    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RemoveQuoteTokenEvent.InputTuple,
      RemoveQuoteTokenEvent.OutputTuple,
      RemoveQuoteTokenEvent.OutputObject
    >;
    RemoveQuoteToken: TypedContractEvent<
      RemoveQuoteTokenEvent.InputTuple,
      RemoveQuoteTokenEvent.OutputTuple,
      RemoveQuoteTokenEvent.OutputObject
    >;
  };
}
