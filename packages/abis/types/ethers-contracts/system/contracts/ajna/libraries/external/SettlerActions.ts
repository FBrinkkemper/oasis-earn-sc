/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface SettlerActionsInterface extends utils.Interface {
  functions: {};

  events: {
    "AuctionNFTSettle(address,uint256,uint256,uint256)": EventFragment;
    "AuctionSettle(address,uint256)": EventFragment;
    "BucketBankruptcy(uint256,uint256)": EventFragment;
    "Settle(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionNFTSettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketBankruptcy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
}

export interface AuctionNFTSettleEventObject {
  borrower: string;
  collateral: BigNumber;
  lp: BigNumber;
  index: BigNumber;
}
export type AuctionNFTSettleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AuctionNFTSettleEventObject
>;

export type AuctionNFTSettleEventFilter =
  TypedEventFilter<AuctionNFTSettleEvent>;

export interface AuctionSettleEventObject {
  borrower: string;
  collateral: BigNumber;
}
export type AuctionSettleEvent = TypedEvent<
  [string, BigNumber],
  AuctionSettleEventObject
>;

export type AuctionSettleEventFilter = TypedEventFilter<AuctionSettleEvent>;

export interface BucketBankruptcyEventObject {
  index: BigNumber;
  lpForfeited: BigNumber;
}
export type BucketBankruptcyEvent = TypedEvent<
  [BigNumber, BigNumber],
  BucketBankruptcyEventObject
>;

export type BucketBankruptcyEventFilter =
  TypedEventFilter<BucketBankruptcyEvent>;

export interface SettleEventObject {
  borrower: string;
  settledDebt: BigNumber;
}
export type SettleEvent = TypedEvent<[string, BigNumber], SettleEventObject>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface SettlerActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SettlerActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AuctionNFTSettle(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null,
      lp?: null,
      index?: null
    ): AuctionNFTSettleEventFilter;
    AuctionNFTSettle(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null,
      lp?: null,
      index?: null
    ): AuctionNFTSettleEventFilter;

    "AuctionSettle(address,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null
    ): AuctionSettleEventFilter;
    AuctionSettle(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null
    ): AuctionSettleEventFilter;

    "BucketBankruptcy(uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;
    BucketBankruptcy(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;

    "Settle(address,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      settledDebt?: null
    ): SettleEventFilter;
    Settle(
      borrower?: PromiseOrValue<string> | null,
      settledDebt?: null
    ): SettleEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
