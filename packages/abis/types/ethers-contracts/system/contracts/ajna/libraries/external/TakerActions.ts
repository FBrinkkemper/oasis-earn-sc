/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface TakerActionsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "BucketTake"
      | "BucketTakeLPAwarded"
      | "ReserveAuction"
      | "Take"
  ): EventFragment;
}

export namespace BucketTakeEvent {
  export type InputTuple = [
    borrower: AddressLike,
    index: BigNumberish,
    amount: BigNumberish,
    collateral: BigNumberish,
    bondChange: BigNumberish,
    isReward: boolean
  ];
  export type OutputTuple = [
    borrower: string,
    index: bigint,
    amount: bigint,
    collateral: bigint,
    bondChange: bigint,
    isReward: boolean
  ];
  export interface OutputObject {
    borrower: string;
    index: bigint;
    amount: bigint;
    collateral: bigint;
    bondChange: bigint;
    isReward: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BucketTakeLPAwardedEvent {
  export type InputTuple = [
    taker: AddressLike,
    kicker: AddressLike,
    lpAwardedTaker: BigNumberish,
    lpAwardedKicker: BigNumberish
  ];
  export type OutputTuple = [
    taker: string,
    kicker: string,
    lpAwardedTaker: bigint,
    lpAwardedKicker: bigint
  ];
  export interface OutputObject {
    taker: string;
    kicker: string;
    lpAwardedTaker: bigint;
    lpAwardedKicker: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveAuctionEvent {
  export type InputTuple = [
    claimableReservesRemaining: BigNumberish,
    auctionPrice: BigNumberish,
    currentBurnEpoch: BigNumberish
  ];
  export type OutputTuple = [
    claimableReservesRemaining: bigint,
    auctionPrice: bigint,
    currentBurnEpoch: bigint
  ];
  export interface OutputObject {
    claimableReservesRemaining: bigint;
    auctionPrice: bigint;
    currentBurnEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TakeEvent {
  export type InputTuple = [
    borrower: AddressLike,
    amount: BigNumberish,
    collateral: BigNumberish,
    bondChange: BigNumberish,
    isReward: boolean
  ];
  export type OutputTuple = [
    borrower: string,
    amount: bigint,
    collateral: bigint,
    bondChange: bigint,
    isReward: boolean
  ];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
    collateral: bigint;
    bondChange: bigint;
    isReward: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TakerActions extends BaseContract {
  connect(runner?: ContractRunner | null): TakerActions;
  waitForDeployment(): Promise<this>;

  interface: TakerActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "BucketTake"
  ): TypedContractEvent<
    BucketTakeEvent.InputTuple,
    BucketTakeEvent.OutputTuple,
    BucketTakeEvent.OutputObject
  >;
  getEvent(
    key: "BucketTakeLPAwarded"
  ): TypedContractEvent<
    BucketTakeLPAwardedEvent.InputTuple,
    BucketTakeLPAwardedEvent.OutputTuple,
    BucketTakeLPAwardedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveAuction"
  ): TypedContractEvent<
    ReserveAuctionEvent.InputTuple,
    ReserveAuctionEvent.OutputTuple,
    ReserveAuctionEvent.OutputObject
  >;
  getEvent(
    key: "Take"
  ): TypedContractEvent<
    TakeEvent.InputTuple,
    TakeEvent.OutputTuple,
    TakeEvent.OutputObject
  >;

  filters: {
    "BucketTake(address,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      BucketTakeEvent.InputTuple,
      BucketTakeEvent.OutputTuple,
      BucketTakeEvent.OutputObject
    >;
    BucketTake: TypedContractEvent<
      BucketTakeEvent.InputTuple,
      BucketTakeEvent.OutputTuple,
      BucketTakeEvent.OutputObject
    >;

    "BucketTakeLPAwarded(address,address,uint256,uint256)": TypedContractEvent<
      BucketTakeLPAwardedEvent.InputTuple,
      BucketTakeLPAwardedEvent.OutputTuple,
      BucketTakeLPAwardedEvent.OutputObject
    >;
    BucketTakeLPAwarded: TypedContractEvent<
      BucketTakeLPAwardedEvent.InputTuple,
      BucketTakeLPAwardedEvent.OutputTuple,
      BucketTakeLPAwardedEvent.OutputObject
    >;

    "ReserveAuction(uint256,uint256,uint256)": TypedContractEvent<
      ReserveAuctionEvent.InputTuple,
      ReserveAuctionEvent.OutputTuple,
      ReserveAuctionEvent.OutputObject
    >;
    ReserveAuction: TypedContractEvent<
      ReserveAuctionEvent.InputTuple,
      ReserveAuctionEvent.OutputTuple,
      ReserveAuctionEvent.OutputObject
    >;

    "Take(address,uint256,uint256,uint256,bool)": TypedContractEvent<
      TakeEvent.InputTuple,
      TakeEvent.OutputTuple,
      TakeEvent.OutputObject
    >;
    Take: TypedContractEvent<
      TakeEvent.InputTuple,
      TakeEvent.OutputTuple,
      TakeEvent.OutputObject
    >;
  };
}
