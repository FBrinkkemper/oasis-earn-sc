/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface TakerActionsInterface extends utils.Interface {
  functions: {};

  events: {
    "BucketTake(address,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "BucketTakeLPAwarded(address,address,uint256,uint256)": EventFragment;
    "ReserveAuction(uint256,uint256,uint256)": EventFragment;
    "Take(address,uint256,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BucketTake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketTakeLPAwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Take"): EventFragment;
}

export interface BucketTakeEventObject {
  borrower: string;
  index: BigNumber;
  amount: BigNumber;
  collateral: BigNumber;
  bondChange: BigNumber;
  isReward: boolean;
}
export type BucketTakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  BucketTakeEventObject
>;

export type BucketTakeEventFilter = TypedEventFilter<BucketTakeEvent>;

export interface BucketTakeLPAwardedEventObject {
  taker: string;
  kicker: string;
  lpAwardedTaker: BigNumber;
  lpAwardedKicker: BigNumber;
}
export type BucketTakeLPAwardedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BucketTakeLPAwardedEventObject
>;

export type BucketTakeLPAwardedEventFilter =
  TypedEventFilter<BucketTakeLPAwardedEvent>;

export interface ReserveAuctionEventObject {
  claimableReservesRemaining: BigNumber;
  auctionPrice: BigNumber;
  currentBurnEpoch: BigNumber;
}
export type ReserveAuctionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ReserveAuctionEventObject
>;

export type ReserveAuctionEventFilter = TypedEventFilter<ReserveAuctionEvent>;

export interface TakeEventObject {
  borrower: string;
  amount: BigNumber;
  collateral: BigNumber;
  bondChange: BigNumber;
  isReward: boolean;
}
export type TakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean],
  TakeEventObject
>;

export type TakeEventFilter = TypedEventFilter<TakeEvent>;

export interface TakerActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TakerActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BucketTake(address,uint256,uint256,uint256,uint256,bool)"(
      borrower?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): BucketTakeEventFilter;
    BucketTake(
      borrower?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): BucketTakeEventFilter;

    "BucketTakeLPAwarded(address,address,uint256,uint256)"(
      taker?: PromiseOrValue<string> | null,
      kicker?: PromiseOrValue<string> | null,
      lpAwardedTaker?: null,
      lpAwardedKicker?: null
    ): BucketTakeLPAwardedEventFilter;
    BucketTakeLPAwarded(
      taker?: PromiseOrValue<string> | null,
      kicker?: PromiseOrValue<string> | null,
      lpAwardedTaker?: null,
      lpAwardedKicker?: null
    ): BucketTakeLPAwardedEventFilter;

    "ReserveAuction(uint256,uint256,uint256)"(
      claimableReservesRemaining?: null,
      auctionPrice?: null,
      currentBurnEpoch?: null
    ): ReserveAuctionEventFilter;
    ReserveAuction(
      claimableReservesRemaining?: null,
      auctionPrice?: null,
      currentBurnEpoch?: null
    ): ReserveAuctionEventFilter;

    "Take(address,uint256,uint256,uint256,bool)"(
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): TakeEventFilter;
    Take(
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): TakeEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
