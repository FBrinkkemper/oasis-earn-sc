/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface KickerActionsInterface extends utils.Interface {
  functions: {};

  events: {
    "BondWithdrawn(address,address,uint256)": EventFragment;
    "BucketBankruptcy(uint256,uint256)": EventFragment;
    "Kick(address,uint256,uint256,uint256)": EventFragment;
    "KickReserveAuction(uint256,uint256,uint256)": EventFragment;
    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BondWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketBankruptcy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Kick"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KickReserveAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveQuoteToken"): EventFragment;
}

export interface BondWithdrawnEventObject {
  kicker: string;
  receiver: string;
  amount: BigNumber;
}
export type BondWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  BondWithdrawnEventObject
>;

export type BondWithdrawnEventFilter = TypedEventFilter<BondWithdrawnEvent>;

export interface BucketBankruptcyEventObject {
  index: BigNumber;
  lpForfeited: BigNumber;
}
export type BucketBankruptcyEvent = TypedEvent<
  [BigNumber, BigNumber],
  BucketBankruptcyEventObject
>;

export type BucketBankruptcyEventFilter =
  TypedEventFilter<BucketBankruptcyEvent>;

export interface KickEventObject {
  borrower: string;
  debt: BigNumber;
  collateral: BigNumber;
  bond: BigNumber;
}
export type KickEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  KickEventObject
>;

export type KickEventFilter = TypedEventFilter<KickEvent>;

export interface KickReserveAuctionEventObject {
  claimableReservesRemaining: BigNumber;
  auctionPrice: BigNumber;
  currentBurnEpoch: BigNumber;
}
export type KickReserveAuctionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  KickReserveAuctionEventObject
>;

export type KickReserveAuctionEventFilter =
  TypedEventFilter<KickReserveAuctionEvent>;

export interface RemoveQuoteTokenEventObject {
  lender: string;
  price: BigNumber;
  amount: BigNumber;
  lpRedeemed: BigNumber;
  lup: BigNumber;
}
export type RemoveQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveQuoteTokenEventObject
>;

export type RemoveQuoteTokenEventFilter =
  TypedEventFilter<RemoveQuoteTokenEvent>;

export interface KickerActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KickerActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BondWithdrawn(address,address,uint256)"(
      kicker?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): BondWithdrawnEventFilter;
    BondWithdrawn(
      kicker?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): BondWithdrawnEventFilter;

    "BucketBankruptcy(uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;
    BucketBankruptcy(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;

    "Kick(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      debt?: null,
      collateral?: null,
      bond?: null
    ): KickEventFilter;
    Kick(
      borrower?: PromiseOrValue<string> | null,
      debt?: null,
      collateral?: null,
      bond?: null
    ): KickEventFilter;

    "KickReserveAuction(uint256,uint256,uint256)"(
      claimableReservesRemaining?: null,
      auctionPrice?: null,
      currentBurnEpoch?: null
    ): KickReserveAuctionEventFilter;
    KickReserveAuction(
      claimableReservesRemaining?: null,
      auctionPrice?: null,
      currentBurnEpoch?: null
    ): KickReserveAuctionEventFilter;

    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null,
      lup?: null
    ): RemoveQuoteTokenEventFilter;
    RemoveQuoteToken(
      lender?: PromiseOrValue<string> | null,
      price?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null,
      lup?: null
    ): RemoveQuoteTokenEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
