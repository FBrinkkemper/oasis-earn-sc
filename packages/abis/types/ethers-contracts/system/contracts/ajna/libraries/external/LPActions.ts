/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface LPActionsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ApproveLPTransferors"
      | "DecreaseLPAllowance"
      | "IncreaseLPAllowance"
      | "RevokeLPAllowance"
      | "RevokeLPTransferors"
      | "TransferLP"
  ): EventFragment;
}

export namespace ApproveLPTransferorsEvent {
  export type InputTuple = [lender: AddressLike, transferors: AddressLike[]];
  export type OutputTuple = [lender: string, transferors: string[]];
  export interface OutputObject {
    lender: string;
    transferors: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreaseLPAllowanceEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    indexes: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    owner: string,
    spender: string,
    indexes: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    owner: string;
    spender: string;
    indexes: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseLPAllowanceEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    indexes: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    owner: string,
    spender: string,
    indexes: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    owner: string;
    spender: string;
    indexes: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeLPAllowanceEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    indexes: BigNumberish[]
  ];
  export type OutputTuple = [owner: string, spender: string, indexes: bigint[]];
  export interface OutputObject {
    owner: string;
    spender: string;
    indexes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeLPTransferorsEvent {
  export type InputTuple = [lender: AddressLike, transferors: AddressLike[]];
  export type OutputTuple = [lender: string, transferors: string[]];
  export interface OutputObject {
    lender: string;
    transferors: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferLPEvent {
  export type InputTuple = [
    owner: AddressLike,
    newOwner: AddressLike,
    indexes: BigNumberish[],
    lp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    newOwner: string,
    indexes: bigint[],
    lp: bigint
  ];
  export interface OutputObject {
    owner: string;
    newOwner: string;
    indexes: bigint[];
    lp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LPActions extends BaseContract {
  connect(runner?: ContractRunner | null): LPActions;
  waitForDeployment(): Promise<this>;

  interface: LPActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ApproveLPTransferors"
  ): TypedContractEvent<
    ApproveLPTransferorsEvent.InputTuple,
    ApproveLPTransferorsEvent.OutputTuple,
    ApproveLPTransferorsEvent.OutputObject
  >;
  getEvent(
    key: "DecreaseLPAllowance"
  ): TypedContractEvent<
    DecreaseLPAllowanceEvent.InputTuple,
    DecreaseLPAllowanceEvent.OutputTuple,
    DecreaseLPAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseLPAllowance"
  ): TypedContractEvent<
    IncreaseLPAllowanceEvent.InputTuple,
    IncreaseLPAllowanceEvent.OutputTuple,
    IncreaseLPAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "RevokeLPAllowance"
  ): TypedContractEvent<
    RevokeLPAllowanceEvent.InputTuple,
    RevokeLPAllowanceEvent.OutputTuple,
    RevokeLPAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "RevokeLPTransferors"
  ): TypedContractEvent<
    RevokeLPTransferorsEvent.InputTuple,
    RevokeLPTransferorsEvent.OutputTuple,
    RevokeLPTransferorsEvent.OutputObject
  >;
  getEvent(
    key: "TransferLP"
  ): TypedContractEvent<
    TransferLPEvent.InputTuple,
    TransferLPEvent.OutputTuple,
    TransferLPEvent.OutputObject
  >;

  filters: {
    "ApproveLPTransferors(address,address[])": TypedContractEvent<
      ApproveLPTransferorsEvent.InputTuple,
      ApproveLPTransferorsEvent.OutputTuple,
      ApproveLPTransferorsEvent.OutputObject
    >;
    ApproveLPTransferors: TypedContractEvent<
      ApproveLPTransferorsEvent.InputTuple,
      ApproveLPTransferorsEvent.OutputTuple,
      ApproveLPTransferorsEvent.OutputObject
    >;

    "DecreaseLPAllowance(address,address,uint256[],uint256[])": TypedContractEvent<
      DecreaseLPAllowanceEvent.InputTuple,
      DecreaseLPAllowanceEvent.OutputTuple,
      DecreaseLPAllowanceEvent.OutputObject
    >;
    DecreaseLPAllowance: TypedContractEvent<
      DecreaseLPAllowanceEvent.InputTuple,
      DecreaseLPAllowanceEvent.OutputTuple,
      DecreaseLPAllowanceEvent.OutputObject
    >;

    "IncreaseLPAllowance(address,address,uint256[],uint256[])": TypedContractEvent<
      IncreaseLPAllowanceEvent.InputTuple,
      IncreaseLPAllowanceEvent.OutputTuple,
      IncreaseLPAllowanceEvent.OutputObject
    >;
    IncreaseLPAllowance: TypedContractEvent<
      IncreaseLPAllowanceEvent.InputTuple,
      IncreaseLPAllowanceEvent.OutputTuple,
      IncreaseLPAllowanceEvent.OutputObject
    >;

    "RevokeLPAllowance(address,address,uint256[])": TypedContractEvent<
      RevokeLPAllowanceEvent.InputTuple,
      RevokeLPAllowanceEvent.OutputTuple,
      RevokeLPAllowanceEvent.OutputObject
    >;
    RevokeLPAllowance: TypedContractEvent<
      RevokeLPAllowanceEvent.InputTuple,
      RevokeLPAllowanceEvent.OutputTuple,
      RevokeLPAllowanceEvent.OutputObject
    >;

    "RevokeLPTransferors(address,address[])": TypedContractEvent<
      RevokeLPTransferorsEvent.InputTuple,
      RevokeLPTransferorsEvent.OutputTuple,
      RevokeLPTransferorsEvent.OutputObject
    >;
    RevokeLPTransferors: TypedContractEvent<
      RevokeLPTransferorsEvent.InputTuple,
      RevokeLPTransferorsEvent.OutputTuple,
      RevokeLPTransferorsEvent.OutputObject
    >;

    "TransferLP(address,address,uint256[],uint256)": TypedContractEvent<
      TransferLPEvent.InputTuple,
      TransferLPEvent.OutputTuple,
      TransferLPEvent.OutputObject
    >;
    TransferLP: TypedContractEvent<
      TransferLPEvent.InputTuple,
      TransferLPEvent.OutputTuple,
      TransferLPEvent.OutputObject
    >;
  };
}
