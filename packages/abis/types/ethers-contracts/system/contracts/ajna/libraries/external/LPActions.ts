/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface LPActionsInterface extends utils.Interface {
  functions: {};

  events: {
    "ApproveLPTransferors(address,address[])": EventFragment;
    "DecreaseLPAllowance(address,address,uint256[],uint256[])": EventFragment;
    "IncreaseLPAllowance(address,address,uint256[],uint256[])": EventFragment;
    "RevokeLPAllowance(address,address,uint256[])": EventFragment;
    "RevokeLPTransferors(address,address[])": EventFragment;
    "TransferLP(address,address,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveLPTransferors"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseLPAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseLPAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeLPAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeLPTransferors"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferLP"): EventFragment;
}

export interface ApproveLPTransferorsEventObject {
  lender: string;
  transferors: string[];
}
export type ApproveLPTransferorsEvent = TypedEvent<
  [string, string[]],
  ApproveLPTransferorsEventObject
>;

export type ApproveLPTransferorsEventFilter =
  TypedEventFilter<ApproveLPTransferorsEvent>;

export interface DecreaseLPAllowanceEventObject {
  owner: string;
  spender: string;
  indexes: BigNumber[];
  amounts: BigNumber[];
}
export type DecreaseLPAllowanceEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[]],
  DecreaseLPAllowanceEventObject
>;

export type DecreaseLPAllowanceEventFilter =
  TypedEventFilter<DecreaseLPAllowanceEvent>;

export interface IncreaseLPAllowanceEventObject {
  owner: string;
  spender: string;
  indexes: BigNumber[];
  amounts: BigNumber[];
}
export type IncreaseLPAllowanceEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[]],
  IncreaseLPAllowanceEventObject
>;

export type IncreaseLPAllowanceEventFilter =
  TypedEventFilter<IncreaseLPAllowanceEvent>;

export interface RevokeLPAllowanceEventObject {
  owner: string;
  spender: string;
  indexes: BigNumber[];
}
export type RevokeLPAllowanceEvent = TypedEvent<
  [string, string, BigNumber[]],
  RevokeLPAllowanceEventObject
>;

export type RevokeLPAllowanceEventFilter =
  TypedEventFilter<RevokeLPAllowanceEvent>;

export interface RevokeLPTransferorsEventObject {
  lender: string;
  transferors: string[];
}
export type RevokeLPTransferorsEvent = TypedEvent<
  [string, string[]],
  RevokeLPTransferorsEventObject
>;

export type RevokeLPTransferorsEventFilter =
  TypedEventFilter<RevokeLPTransferorsEvent>;

export interface TransferLPEventObject {
  owner: string;
  newOwner: string;
  indexes: BigNumber[];
  lp: BigNumber;
}
export type TransferLPEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber],
  TransferLPEventObject
>;

export type TransferLPEventFilter = TypedEventFilter<TransferLPEvent>;

export interface LPActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LPActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ApproveLPTransferors(address,address[])"(
      lender?: PromiseOrValue<string> | null,
      transferors?: null
    ): ApproveLPTransferorsEventFilter;
    ApproveLPTransferors(
      lender?: PromiseOrValue<string> | null,
      transferors?: null
    ): ApproveLPTransferorsEventFilter;

    "DecreaseLPAllowance(address,address,uint256[],uint256[])"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null,
      amounts?: null
    ): DecreaseLPAllowanceEventFilter;
    DecreaseLPAllowance(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null,
      amounts?: null
    ): DecreaseLPAllowanceEventFilter;

    "IncreaseLPAllowance(address,address,uint256[],uint256[])"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null,
      amounts?: null
    ): IncreaseLPAllowanceEventFilter;
    IncreaseLPAllowance(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null,
      amounts?: null
    ): IncreaseLPAllowanceEventFilter;

    "RevokeLPAllowance(address,address,uint256[])"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null
    ): RevokeLPAllowanceEventFilter;
    RevokeLPAllowance(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null
    ): RevokeLPAllowanceEventFilter;

    "RevokeLPTransferors(address,address[])"(
      lender?: PromiseOrValue<string> | null,
      transferors?: null
    ): RevokeLPTransferorsEventFilter;
    RevokeLPTransferors(
      lender?: PromiseOrValue<string> | null,
      transferors?: null
    ): RevokeLPTransferorsEventFilter;

    "TransferLP(address,address,uint256[],uint256)"(
      owner?: null,
      newOwner?: null,
      indexes?: null,
      lp?: null
    ): TransferLPEventFilter;
    TransferLP(
      owner?: null,
      newOwner?: null,
      indexes?: null,
      lp?: null
    ): TransferLPEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
