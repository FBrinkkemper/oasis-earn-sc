/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface PoolCommonsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "lenderInterestMargin"
      | "pendingInflator"
      | "pendingInterestFactor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ResetInterestRate" | "UpdateInterestRate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "lenderInterestMargin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingInflator",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingInterestFactor",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "lenderInterestMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingInflator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingInterestFactor",
    data: BytesLike
  ): Result;
}

export namespace ResetInterestRateEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateInterestRateEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolCommons extends BaseContract {
  connect(runner?: ContractRunner | null): PoolCommons;
  waitForDeployment(): Promise<this>;

  interface: PoolCommonsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  lenderInterestMargin: TypedContractMethod<
    [mau_: BigNumberish],
    [bigint],
    "view"
  >;

  pendingInflator: TypedContractMethod<
    [
      inflator_: BigNumberish,
      inflatorUpdate: BigNumberish,
      interestRate_: BigNumberish
    ],
    [bigint],
    "view"
  >;

  pendingInterestFactor: TypedContractMethod<
    [interestRate_: BigNumberish, elapsed_: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "lenderInterestMargin"
  ): TypedContractMethod<[mau_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingInflator"
  ): TypedContractMethod<
    [
      inflator_: BigNumberish,
      inflatorUpdate: BigNumberish,
      interestRate_: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingInterestFactor"
  ): TypedContractMethod<
    [interestRate_: BigNumberish, elapsed_: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ResetInterestRate"
  ): TypedContractEvent<
    ResetInterestRateEvent.InputTuple,
    ResetInterestRateEvent.OutputTuple,
    ResetInterestRateEvent.OutputObject
  >;
  getEvent(
    key: "UpdateInterestRate"
  ): TypedContractEvent<
    UpdateInterestRateEvent.InputTuple,
    UpdateInterestRateEvent.OutputTuple,
    UpdateInterestRateEvent.OutputObject
  >;

  filters: {
    "ResetInterestRate(uint256,uint256)": TypedContractEvent<
      ResetInterestRateEvent.InputTuple,
      ResetInterestRateEvent.OutputTuple,
      ResetInterestRateEvent.OutputObject
    >;
    ResetInterestRate: TypedContractEvent<
      ResetInterestRateEvent.InputTuple,
      ResetInterestRateEvent.OutputTuple,
      ResetInterestRateEvent.OutputObject
    >;

    "UpdateInterestRate(uint256,uint256)": TypedContractEvent<
      UpdateInterestRateEvent.InputTuple,
      UpdateInterestRateEvent.OutputTuple,
      UpdateInterestRateEvent.OutputObject
    >;
    UpdateInterestRate: TypedContractEvent<
      UpdateInterestRateEvent.InputTuple,
      UpdateInterestRateEvent.OutputTuple,
      UpdateInterestRateEvent.OutputObject
    >;
  };
}
