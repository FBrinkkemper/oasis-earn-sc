/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type PoolBalancesStateStruct = {
  pledgedCollateral: PromiseOrValue<BigNumberish>;
  t0DebtInAuction: PromiseOrValue<BigNumberish>;
  t0Debt: PromiseOrValue<BigNumberish>;
};

export type PoolBalancesStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber
] & {
  pledgedCollateral: BigNumber;
  t0DebtInAuction: BigNumber;
  t0Debt: BigNumber;
};

export type InflatorStateStruct = {
  inflator: PromiseOrValue<BigNumberish>;
  inflatorUpdate: PromiseOrValue<BigNumberish>;
};

export type InflatorStateStructOutput = [BigNumber, number] & {
  inflator: BigNumber;
  inflatorUpdate: number;
};

export type InterestStateStruct = {
  interestRate: PromiseOrValue<BigNumberish>;
  interestRateUpdate: PromiseOrValue<BigNumberish>;
  debt: PromiseOrValue<BigNumberish>;
  meaningfulDeposit: PromiseOrValue<BigNumberish>;
  t0Debt2ToCollateral: PromiseOrValue<BigNumberish>;
  debtCol: PromiseOrValue<BigNumberish>;
  lupt0Debt: PromiseOrValue<BigNumberish>;
};

export type InterestStateStructOutput = [
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  interestRate: BigNumber;
  interestRateUpdate: number;
  debt: BigNumber;
  meaningfulDeposit: BigNumber;
  t0Debt2ToCollateral: BigNumber;
  debtCol: BigNumber;
  lupt0Debt: BigNumber;
};

export interface PoolCommonsInterface extends utils.Interface {
  functions: {
    "debtInfo((uint256,uint256,uint256),(uint208,uint48),(uint208,uint48,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "lenderInterestMargin(uint256)": FunctionFragment;
    "pendingInflator(uint256,uint256,uint256)": FunctionFragment;
    "pendingInterestFactor(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "debtInfo"
      | "lenderInterestMargin"
      | "pendingInflator"
      | "pendingInterestFactor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "debtInfo",
    values: [PoolBalancesStateStruct, InflatorStateStruct, InterestStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderInterestMargin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingInflator",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingInterestFactor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "debtInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lenderInterestMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingInflator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingInterestFactor",
    data: BytesLike
  ): Result;

  events: {
    "Flashloan(address,address,uint256)": EventFragment;
    "ResetInterestRate(uint256,uint256)": EventFragment;
    "UpdateInterestRate(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Flashloan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetInterestRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateInterestRate"): EventFragment;
}

export interface FlashloanEventObject {
  receiver: string;
  token: string;
  amount: BigNumber;
}
export type FlashloanEvent = TypedEvent<
  [string, string, BigNumber],
  FlashloanEventObject
>;

export type FlashloanEventFilter = TypedEventFilter<FlashloanEvent>;

export interface ResetInterestRateEventObject {
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type ResetInterestRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  ResetInterestRateEventObject
>;

export type ResetInterestRateEventFilter =
  TypedEventFilter<ResetInterestRateEvent>;

export interface UpdateInterestRateEventObject {
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type UpdateInterestRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateInterestRateEventObject
>;

export type UpdateInterestRateEventFilter =
  TypedEventFilter<UpdateInterestRateEvent>;

export interface PoolCommons extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolCommonsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    debtInfo(
      poolBalances_: PoolBalancesStateStruct,
      inflatorState_: InflatorStateStruct,
      interestState_: InterestStateStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    lenderInterestMargin(
      mau_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingInflator(
      inflator_: PromiseOrValue<BigNumberish>,
      inflatorUpdate: PromiseOrValue<BigNumberish>,
      interestRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingInterestFactor(
      interestRate_: PromiseOrValue<BigNumberish>,
      elapsed_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  debtInfo(
    poolBalances_: PoolBalancesStateStruct,
    inflatorState_: InflatorStateStruct,
    interestState_: InterestStateStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  lenderInterestMargin(
    mau_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingInflator(
    inflator_: PromiseOrValue<BigNumberish>,
    inflatorUpdate: PromiseOrValue<BigNumberish>,
    interestRate_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingInterestFactor(
    interestRate_: PromiseOrValue<BigNumberish>,
    elapsed_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    debtInfo(
      poolBalances_: PoolBalancesStateStruct,
      inflatorState_: InflatorStateStruct,
      interestState_: InterestStateStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    lenderInterestMargin(
      mau_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingInflator(
      inflator_: PromiseOrValue<BigNumberish>,
      inflatorUpdate: PromiseOrValue<BigNumberish>,
      interestRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingInterestFactor(
      interestRate_: PromiseOrValue<BigNumberish>,
      elapsed_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Flashloan(address,address,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): FlashloanEventFilter;
    Flashloan(
      receiver?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): FlashloanEventFilter;

    "ResetInterestRate(uint256,uint256)"(
      oldRate?: null,
      newRate?: null
    ): ResetInterestRateEventFilter;
    ResetInterestRate(
      oldRate?: null,
      newRate?: null
    ): ResetInterestRateEventFilter;

    "UpdateInterestRate(uint256,uint256)"(
      oldRate?: null,
      newRate?: null
    ): UpdateInterestRateEventFilter;
    UpdateInterestRate(
      oldRate?: null,
      newRate?: null
    ): UpdateInterestRateEventFilter;
  };

  estimateGas: {
    debtInfo(
      poolBalances_: PoolBalancesStateStruct,
      inflatorState_: InflatorStateStruct,
      interestState_: InterestStateStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderInterestMargin(
      mau_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingInflator(
      inflator_: PromiseOrValue<BigNumberish>,
      inflatorUpdate: PromiseOrValue<BigNumberish>,
      interestRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingInterestFactor(
      interestRate_: PromiseOrValue<BigNumberish>,
      elapsed_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    debtInfo(
      poolBalances_: PoolBalancesStateStruct,
      inflatorState_: InflatorStateStruct,
      interestState_: InterestStateStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderInterestMargin(
      mau_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingInflator(
      inflator_: PromiseOrValue<BigNumberish>,
      inflatorUpdate: PromiseOrValue<BigNumberish>,
      interestRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingInterestFactor(
      interestRate_: PromiseOrValue<BigNumberish>,
      elapsed_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
