/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IPositionManagerInterface extends utils.Interface {
  functions: {
    "burn(address,uint256)": FunctionFragment;
    "getLP(uint256,uint256)": FunctionFragment;
    "getPositionIndexes(uint256)": FunctionFragment;
    "getPositionIndexesFiltered(uint256)": FunctionFragment;
    "getPositionInfo(uint256,uint256)": FunctionFragment;
    "isAjnaPool(address,bytes32)": FunctionFragment;
    "isIndexInPosition(uint256,uint256)": FunctionFragment;
    "isPositionBucketBankrupt(uint256,uint256)": FunctionFragment;
    "memorializePositions(address,uint256,uint256[])": FunctionFragment;
    "mint(address,address,bytes32)": FunctionFragment;
    "moveLiquidity(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "poolKey(uint256)": FunctionFragment;
    "redeemPositions(address,uint256,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn"
      | "getLP"
      | "getPositionIndexes"
      | "getPositionIndexesFiltered"
      | "getPositionInfo"
      | "isAjnaPool"
      | "isIndexInPosition"
      | "isPositionBucketBankrupt"
      | "memorializePositions"
      | "mint"
      | "moveLiquidity"
      | "poolKey"
      | "redeemPositions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLP",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIndexes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIndexesFiltered",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAjnaPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isIndexInPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionBucketBankrupt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "memorializePositions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "moveLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPositions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIndexesFiltered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAjnaPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIndexInPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionBucketBankrupt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memorializePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemPositions",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,uint256)": EventFragment;
    "MemorializePosition(address,uint256,uint256[])": EventFragment;
    "Mint(address,address,uint256)": EventFragment;
    "MoveLiquidity(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RedeemPosition(address,uint256,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemorializePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPosition"): EventFragment;
}

export interface BurnEventObject {
  lender: string;
  tokenId: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface MemorializePositionEventObject {
  lender: string;
  tokenId: BigNumber;
  indexes: BigNumber[];
}
export type MemorializePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  MemorializePositionEventObject
>;

export type MemorializePositionEventFilter =
  TypedEventFilter<MemorializePositionEvent>;

export interface MintEventObject {
  lender: string;
  pool: string;
  tokenId: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface MoveLiquidityEventObject {
  lender: string;
  tokenId: BigNumber;
  fromIndex: BigNumber;
  toIndex: BigNumber;
  lpRedeemedFrom: BigNumber;
  lpAwardedTo: BigNumber;
}
export type MoveLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MoveLiquidityEventObject
>;

export type MoveLiquidityEventFilter = TypedEventFilter<MoveLiquidityEvent>;

export interface RedeemPositionEventObject {
  lender: string;
  tokenId: BigNumber;
  indexes: BigNumber[];
}
export type RedeemPositionEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  RedeemPositionEventObject
>;

export type RedeemPositionEventFilter = TypedEventFilter<RedeemPositionEvent>;

export interface IPositionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPositionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLP(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lp_: BigNumber }>;

    getPositionIndexes(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPositionIndexesFiltered(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPositionInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isAjnaPool(
      pool_: PromiseOrValue<string>,
      subsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isAjnaPool_: boolean }>;

    isIndexInPosition(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { bucketInPosition_: boolean }>;

    isPositionBucketBankrupt(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isBankrupt_: boolean }>;

    memorializePositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      pool_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      poolSubsetHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveLiquidity(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolKey(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    redeemPositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    pool_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLP(
    tokenId_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionIndexes(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPositionIndexesFiltered(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPositionInfo(
    tokenId_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  isAjnaPool(
    pool_: PromiseOrValue<string>,
    subsetHash_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIndexInPosition(
    tokenId_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPositionBucketBankrupt(
    tokenId_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  memorializePositions(
    pool_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    indexes_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    pool_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    poolSubsetHash_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveLiquidity(
    pool_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    fromIndex_: PromiseOrValue<BigNumberish>,
    toIndex_: PromiseOrValue<BigNumberish>,
    expiry_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolKey(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  redeemPositions(
    pool_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    indexes_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLP(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionIndexes(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPositionIndexesFiltered(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPositionInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isAjnaPool(
      pool_: PromiseOrValue<string>,
      subsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIndexInPosition(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPositionBucketBankrupt(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memorializePositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      pool_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      poolSubsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveLiquidity(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolKey(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    redeemPositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Burn(address,uint256)"(
      lender?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): BurnEventFilter;
    Burn(
      lender?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): BurnEventFilter;

    "MemorializePosition(address,uint256,uint256[])"(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      indexes?: null
    ): MemorializePositionEventFilter;
    MemorializePosition(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      indexes?: null
    ): MemorializePositionEventFilter;

    "Mint(address,address,uint256)"(
      lender?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenId?: null
    ): MintEventFilter;
    Mint(
      lender?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenId?: null
    ): MintEventFilter;

    "MoveLiquidity(address,uint256,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      fromIndex?: null,
      toIndex?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null
    ): MoveLiquidityEventFilter;
    MoveLiquidity(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      fromIndex?: null,
      toIndex?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null
    ): MoveLiquidityEventFilter;

    "RedeemPosition(address,uint256,uint256[])"(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      indexes?: null
    ): RedeemPositionEventFilter;
    RedeemPosition(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      indexes?: null
    ): RedeemPositionEventFilter;
  };

  estimateGas: {
    burn(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLP(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionIndexes(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionIndexesFiltered(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAjnaPool(
      pool_: PromiseOrValue<string>,
      subsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIndexInPosition(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPositionBucketBankrupt(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memorializePositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      pool_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      poolSubsetHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveLiquidity(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolKey(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemPositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLP(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionIndexes(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionIndexesFiltered(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAjnaPool(
      pool_: PromiseOrValue<string>,
      subsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIndexInPosition(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPositionBucketBankrupt(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memorializePositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      pool_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      poolSubsetHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveLiquidity(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolKey(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemPositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
