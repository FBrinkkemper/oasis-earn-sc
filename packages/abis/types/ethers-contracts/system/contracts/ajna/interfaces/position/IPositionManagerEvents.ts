/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface IPositionManagerEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "Burn"
      | "MemorializePosition"
      | "Mint"
      | "MoveLiquidity"
      | "RedeemPosition"
  ): EventFragment;
}

export namespace BurnEvent {
  export type InputTuple = [lender: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [lender: string, tokenId: bigint];
  export interface OutputObject {
    lender: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemorializePositionEvent {
  export type InputTuple = [
    lender: AddressLike,
    tokenId: BigNumberish,
    indexes: BigNumberish[]
  ];
  export type OutputTuple = [
    lender: string,
    tokenId: bigint,
    indexes: bigint[]
  ];
  export interface OutputObject {
    lender: string;
    tokenId: bigint;
    indexes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    lender: AddressLike,
    pool: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [lender: string, pool: string, tokenId: bigint];
  export interface OutputObject {
    lender: string;
    pool: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoveLiquidityEvent {
  export type InputTuple = [
    lender: AddressLike,
    tokenId: BigNumberish,
    fromIndex: BigNumberish,
    toIndex: BigNumberish,
    lpRedeemedFrom: BigNumberish,
    lpAwardedTo: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    tokenId: bigint,
    fromIndex: bigint,
    toIndex: bigint,
    lpRedeemedFrom: bigint,
    lpAwardedTo: bigint
  ];
  export interface OutputObject {
    lender: string;
    tokenId: bigint;
    fromIndex: bigint;
    toIndex: bigint;
    lpRedeemedFrom: bigint;
    lpAwardedTo: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemPositionEvent {
  export type InputTuple = [
    lender: AddressLike,
    tokenId: BigNumberish,
    indexes: BigNumberish[]
  ];
  export type OutputTuple = [
    lender: string,
    tokenId: bigint,
    indexes: bigint[]
  ];
  export interface OutputObject {
    lender: string;
    tokenId: bigint;
    indexes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPositionManagerEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IPositionManagerEvents;
  waitForDeployment(): Promise<this>;

  interface: IPositionManagerEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "MemorializePosition"
  ): TypedContractEvent<
    MemorializePositionEvent.InputTuple,
    MemorializePositionEvent.OutputTuple,
    MemorializePositionEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "MoveLiquidity"
  ): TypedContractEvent<
    MoveLiquidityEvent.InputTuple,
    MoveLiquidityEvent.OutputTuple,
    MoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "RedeemPosition"
  ): TypedContractEvent<
    RedeemPositionEvent.InputTuple,
    RedeemPositionEvent.OutputTuple,
    RedeemPositionEvent.OutputObject
  >;

  filters: {
    "Burn(address,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "MemorializePosition(address,uint256,uint256[])": TypedContractEvent<
      MemorializePositionEvent.InputTuple,
      MemorializePositionEvent.OutputTuple,
      MemorializePositionEvent.OutputObject
    >;
    MemorializePosition: TypedContractEvent<
      MemorializePositionEvent.InputTuple,
      MemorializePositionEvent.OutputTuple,
      MemorializePositionEvent.OutputObject
    >;

    "Mint(address,address,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "MoveLiquidity(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MoveLiquidityEvent.InputTuple,
      MoveLiquidityEvent.OutputTuple,
      MoveLiquidityEvent.OutputObject
    >;
    MoveLiquidity: TypedContractEvent<
      MoveLiquidityEvent.InputTuple,
      MoveLiquidityEvent.OutputTuple,
      MoveLiquidityEvent.OutputObject
    >;

    "RedeemPosition(address,uint256,uint256[])": TypedContractEvent<
      RedeemPositionEvent.InputTuple,
      RedeemPositionEvent.OutputTuple,
      RedeemPositionEvent.OutputObject
    >;
    RedeemPosition: TypedContractEvent<
      RedeemPositionEvent.InputTuple,
      RedeemPositionEvent.OutputTuple,
      RedeemPositionEvent.OutputObject
    >;
  };
}
