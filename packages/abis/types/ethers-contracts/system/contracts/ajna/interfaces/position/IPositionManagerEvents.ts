/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IPositionManagerEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Burn(address,uint256)": EventFragment;
    "MemorializePosition(address,uint256,uint256[])": EventFragment;
    "Mint(address,address,uint256)": EventFragment;
    "MoveLiquidity(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RedeemPosition(address,uint256,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemorializePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemPosition"): EventFragment;
}

export interface BurnEventObject {
  lender: string;
  tokenId: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface MemorializePositionEventObject {
  lender: string;
  tokenId: BigNumber;
  indexes: BigNumber[];
}
export type MemorializePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  MemorializePositionEventObject
>;

export type MemorializePositionEventFilter =
  TypedEventFilter<MemorializePositionEvent>;

export interface MintEventObject {
  lender: string;
  pool: string;
  tokenId: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface MoveLiquidityEventObject {
  lender: string;
  tokenId: BigNumber;
  fromIndex: BigNumber;
  toIndex: BigNumber;
  lpRedeemedFrom: BigNumber;
  lpAwardedTo: BigNumber;
}
export type MoveLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MoveLiquidityEventObject
>;

export type MoveLiquidityEventFilter = TypedEventFilter<MoveLiquidityEvent>;

export interface RedeemPositionEventObject {
  lender: string;
  tokenId: BigNumber;
  indexes: BigNumber[];
}
export type RedeemPositionEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  RedeemPositionEventObject
>;

export type RedeemPositionEventFilter = TypedEventFilter<RedeemPositionEvent>;

export interface IPositionManagerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPositionManagerEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Burn(address,uint256)"(
      lender?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): BurnEventFilter;
    Burn(
      lender?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): BurnEventFilter;

    "MemorializePosition(address,uint256,uint256[])"(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      indexes?: null
    ): MemorializePositionEventFilter;
    MemorializePosition(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      indexes?: null
    ): MemorializePositionEventFilter;

    "Mint(address,address,uint256)"(
      lender?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenId?: null
    ): MintEventFilter;
    Mint(
      lender?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenId?: null
    ): MintEventFilter;

    "MoveLiquidity(address,uint256,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      fromIndex?: null,
      toIndex?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null
    ): MoveLiquidityEventFilter;
    MoveLiquidity(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      fromIndex?: null,
      toIndex?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null
    ): MoveLiquidityEventFilter;

    "RedeemPosition(address,uint256,uint256[])"(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      indexes?: null
    ): RedeemPositionEventFilter;
    RedeemPosition(
      lender?: PromiseOrValue<string> | null,
      tokenId?: null,
      indexes?: null
    ): RedeemPositionEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
