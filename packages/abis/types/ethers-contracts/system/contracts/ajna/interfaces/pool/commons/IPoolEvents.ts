/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IPoolEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AddQuoteToken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ApproveLPTransferors(address,address[])": EventFragment;
    "AuctionNFTSettle(address,uint256,uint256,uint256)": EventFragment;
    "AuctionSettle(address,uint256)": EventFragment;
    "BondWithdrawn(address,address,uint256)": EventFragment;
    "BucketBankruptcy(uint256,uint256)": EventFragment;
    "BucketTake(address,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "BucketTakeLPAwarded(address,address,uint256,uint256)": EventFragment;
    "DecreaseLPAllowance(address,address,uint256[],uint256[])": EventFragment;
    "Flashloan(address,address,uint256)": EventFragment;
    "IncreaseLPAllowance(address,address,uint256[],uint256[])": EventFragment;
    "InterestUpdateFailure()": EventFragment;
    "Kick(address,uint256,uint256,uint256)": EventFragment;
    "KickReserveAuction(uint256,uint256,uint256)": EventFragment;
    "LoanStamped(address)": EventFragment;
    "MoveQuoteToken(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RemoveCollateral(address,uint256,uint256,uint256)": EventFragment;
    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "RepayDebt(address,uint256,uint256,uint256)": EventFragment;
    "ReserveAuction(uint256,uint256,uint256)": EventFragment;
    "ResetInterestRate(uint256,uint256)": EventFragment;
    "RevokeLPAllowance(address,address,uint256[])": EventFragment;
    "RevokeLPTransferors(address,address[])": EventFragment;
    "Settle(address,uint256)": EventFragment;
    "Take(address,uint256,uint256,uint256,bool)": EventFragment;
    "TransferLP(address,address,uint256[],uint256)": EventFragment;
    "UpdateInterestRate(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddQuoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveLPTransferors"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionNFTSettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketBankruptcy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketTake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BucketTakeLPAwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseLPAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flashloan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseLPAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestUpdateFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Kick"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KickReserveAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanStamped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveQuoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveQuoteToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetInterestRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeLPAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeLPTransferors"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Take"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferLP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateInterestRate"): EventFragment;
}

export interface AddQuoteTokenEventObject {
  lender: string;
  index: BigNumber;
  amount: BigNumber;
  lpAwarded: BigNumber;
  lup: BigNumber;
}
export type AddQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  AddQuoteTokenEventObject
>;

export type AddQuoteTokenEventFilter = TypedEventFilter<AddQuoteTokenEvent>;

export interface ApproveLPTransferorsEventObject {
  lender: string;
  transferors: string[];
}
export type ApproveLPTransferorsEvent = TypedEvent<
  [string, string[]],
  ApproveLPTransferorsEventObject
>;

export type ApproveLPTransferorsEventFilter =
  TypedEventFilter<ApproveLPTransferorsEvent>;

export interface AuctionNFTSettleEventObject {
  borrower: string;
  collateral: BigNumber;
  lp: BigNumber;
  index: BigNumber;
}
export type AuctionNFTSettleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AuctionNFTSettleEventObject
>;

export type AuctionNFTSettleEventFilter =
  TypedEventFilter<AuctionNFTSettleEvent>;

export interface AuctionSettleEventObject {
  borrower: string;
  collateral: BigNumber;
}
export type AuctionSettleEvent = TypedEvent<
  [string, BigNumber],
  AuctionSettleEventObject
>;

export type AuctionSettleEventFilter = TypedEventFilter<AuctionSettleEvent>;

export interface BondWithdrawnEventObject {
  kicker: string;
  reciever: string;
  amount: BigNumber;
}
export type BondWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  BondWithdrawnEventObject
>;

export type BondWithdrawnEventFilter = TypedEventFilter<BondWithdrawnEvent>;

export interface BucketBankruptcyEventObject {
  index: BigNumber;
  lpForfeited: BigNumber;
}
export type BucketBankruptcyEvent = TypedEvent<
  [BigNumber, BigNumber],
  BucketBankruptcyEventObject
>;

export type BucketBankruptcyEventFilter =
  TypedEventFilter<BucketBankruptcyEvent>;

export interface BucketTakeEventObject {
  borrower: string;
  index: BigNumber;
  amount: BigNumber;
  collateral: BigNumber;
  bondChange: BigNumber;
  isReward: boolean;
}
export type BucketTakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  BucketTakeEventObject
>;

export type BucketTakeEventFilter = TypedEventFilter<BucketTakeEvent>;

export interface BucketTakeLPAwardedEventObject {
  taker: string;
  kicker: string;
  lpAwardedTaker: BigNumber;
  lpAwardedKicker: BigNumber;
}
export type BucketTakeLPAwardedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BucketTakeLPAwardedEventObject
>;

export type BucketTakeLPAwardedEventFilter =
  TypedEventFilter<BucketTakeLPAwardedEvent>;

export interface DecreaseLPAllowanceEventObject {
  owner: string;
  spender: string;
  indexes: BigNumber[];
  amounts: BigNumber[];
}
export type DecreaseLPAllowanceEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[]],
  DecreaseLPAllowanceEventObject
>;

export type DecreaseLPAllowanceEventFilter =
  TypedEventFilter<DecreaseLPAllowanceEvent>;

export interface FlashloanEventObject {
  receiver: string;
  token: string;
  amount: BigNumber;
}
export type FlashloanEvent = TypedEvent<
  [string, string, BigNumber],
  FlashloanEventObject
>;

export type FlashloanEventFilter = TypedEventFilter<FlashloanEvent>;

export interface IncreaseLPAllowanceEventObject {
  owner: string;
  spender: string;
  indexes: BigNumber[];
  amounts: BigNumber[];
}
export type IncreaseLPAllowanceEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[]],
  IncreaseLPAllowanceEventObject
>;

export type IncreaseLPAllowanceEventFilter =
  TypedEventFilter<IncreaseLPAllowanceEvent>;

export interface InterestUpdateFailureEventObject {}
export type InterestUpdateFailureEvent = TypedEvent<
  [],
  InterestUpdateFailureEventObject
>;

export type InterestUpdateFailureEventFilter =
  TypedEventFilter<InterestUpdateFailureEvent>;

export interface KickEventObject {
  borrower: string;
  debt: BigNumber;
  collateral: BigNumber;
  bond: BigNumber;
}
export type KickEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  KickEventObject
>;

export type KickEventFilter = TypedEventFilter<KickEvent>;

export interface KickReserveAuctionEventObject {
  claimableReservesRemaining: BigNumber;
  auctionPrice: BigNumber;
  currentBurnEpoch: BigNumber;
}
export type KickReserveAuctionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  KickReserveAuctionEventObject
>;

export type KickReserveAuctionEventFilter =
  TypedEventFilter<KickReserveAuctionEvent>;

export interface LoanStampedEventObject {
  borrower: string;
}
export type LoanStampedEvent = TypedEvent<[string], LoanStampedEventObject>;

export type LoanStampedEventFilter = TypedEventFilter<LoanStampedEvent>;

export interface MoveQuoteTokenEventObject {
  lender: string;
  from: BigNumber;
  to: BigNumber;
  amount: BigNumber;
  lpRedeemedFrom: BigNumber;
  lpAwardedTo: BigNumber;
  lup: BigNumber;
}
export type MoveQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MoveQuoteTokenEventObject
>;

export type MoveQuoteTokenEventFilter = TypedEventFilter<MoveQuoteTokenEvent>;

export interface RemoveCollateralEventObject {
  claimer: string;
  index: BigNumber;
  amount: BigNumber;
  lpRedeemed: BigNumber;
}
export type RemoveCollateralEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RemoveCollateralEventObject
>;

export type RemoveCollateralEventFilter =
  TypedEventFilter<RemoveCollateralEvent>;

export interface RemoveQuoteTokenEventObject {
  lender: string;
  index: BigNumber;
  amount: BigNumber;
  lpRedeemed: BigNumber;
  lup: BigNumber;
}
export type RemoveQuoteTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveQuoteTokenEventObject
>;

export type RemoveQuoteTokenEventFilter =
  TypedEventFilter<RemoveQuoteTokenEvent>;

export interface RepayDebtEventObject {
  borrower: string;
  quoteRepaid: BigNumber;
  collateralPulled: BigNumber;
  lup: BigNumber;
}
export type RepayDebtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RepayDebtEventObject
>;

export type RepayDebtEventFilter = TypedEventFilter<RepayDebtEvent>;

export interface ReserveAuctionEventObject {
  claimableReservesRemaining: BigNumber;
  auctionPrice: BigNumber;
  currentBurnEpoch: BigNumber;
}
export type ReserveAuctionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ReserveAuctionEventObject
>;

export type ReserveAuctionEventFilter = TypedEventFilter<ReserveAuctionEvent>;

export interface ResetInterestRateEventObject {
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type ResetInterestRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  ResetInterestRateEventObject
>;

export type ResetInterestRateEventFilter =
  TypedEventFilter<ResetInterestRateEvent>;

export interface RevokeLPAllowanceEventObject {
  owner: string;
  spender: string;
  indexes: BigNumber[];
}
export type RevokeLPAllowanceEvent = TypedEvent<
  [string, string, BigNumber[]],
  RevokeLPAllowanceEventObject
>;

export type RevokeLPAllowanceEventFilter =
  TypedEventFilter<RevokeLPAllowanceEvent>;

export interface RevokeLPTransferorsEventObject {
  lender: string;
  transferors: string[];
}
export type RevokeLPTransferorsEvent = TypedEvent<
  [string, string[]],
  RevokeLPTransferorsEventObject
>;

export type RevokeLPTransferorsEventFilter =
  TypedEventFilter<RevokeLPTransferorsEvent>;

export interface SettleEventObject {
  borrower: string;
  settledDebt: BigNumber;
}
export type SettleEvent = TypedEvent<[string, BigNumber], SettleEventObject>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface TakeEventObject {
  borrower: string;
  amount: BigNumber;
  collateral: BigNumber;
  bondChange: BigNumber;
  isReward: boolean;
}
export type TakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean],
  TakeEventObject
>;

export type TakeEventFilter = TypedEventFilter<TakeEvent>;

export interface TransferLPEventObject {
  owner: string;
  newOwner: string;
  indexes: BigNumber[];
  lp: BigNumber;
}
export type TransferLPEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber],
  TransferLPEventObject
>;

export type TransferLPEventFilter = TypedEventFilter<TransferLPEvent>;

export interface UpdateInterestRateEventObject {
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type UpdateInterestRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateInterestRateEventObject
>;

export type UpdateInterestRateEventFilter =
  TypedEventFilter<UpdateInterestRateEvent>;

export interface IPoolEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddQuoteToken(address,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null,
      lup?: null
    ): AddQuoteTokenEventFilter;
    AddQuoteToken(
      lender?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null,
      lup?: null
    ): AddQuoteTokenEventFilter;

    "ApproveLPTransferors(address,address[])"(
      lender?: PromiseOrValue<string> | null,
      transferors?: null
    ): ApproveLPTransferorsEventFilter;
    ApproveLPTransferors(
      lender?: PromiseOrValue<string> | null,
      transferors?: null
    ): ApproveLPTransferorsEventFilter;

    "AuctionNFTSettle(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null,
      lp?: null,
      index?: null
    ): AuctionNFTSettleEventFilter;
    AuctionNFTSettle(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null,
      lp?: null,
      index?: null
    ): AuctionNFTSettleEventFilter;

    "AuctionSettle(address,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null
    ): AuctionSettleEventFilter;
    AuctionSettle(
      borrower?: PromiseOrValue<string> | null,
      collateral?: null
    ): AuctionSettleEventFilter;

    "BondWithdrawn(address,address,uint256)"(
      kicker?: PromiseOrValue<string> | null,
      reciever?: PromiseOrValue<string> | null,
      amount?: null
    ): BondWithdrawnEventFilter;
    BondWithdrawn(
      kicker?: PromiseOrValue<string> | null,
      reciever?: PromiseOrValue<string> | null,
      amount?: null
    ): BondWithdrawnEventFilter;

    "BucketBankruptcy(uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;
    BucketBankruptcy(
      index?: PromiseOrValue<BigNumberish> | null,
      lpForfeited?: null
    ): BucketBankruptcyEventFilter;

    "BucketTake(address,uint256,uint256,uint256,uint256,bool)"(
      borrower?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): BucketTakeEventFilter;
    BucketTake(
      borrower?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): BucketTakeEventFilter;

    "BucketTakeLPAwarded(address,address,uint256,uint256)"(
      taker?: PromiseOrValue<string> | null,
      kicker?: PromiseOrValue<string> | null,
      lpAwardedTaker?: null,
      lpAwardedKicker?: null
    ): BucketTakeLPAwardedEventFilter;
    BucketTakeLPAwarded(
      taker?: PromiseOrValue<string> | null,
      kicker?: PromiseOrValue<string> | null,
      lpAwardedTaker?: null,
      lpAwardedKicker?: null
    ): BucketTakeLPAwardedEventFilter;

    "DecreaseLPAllowance(address,address,uint256[],uint256[])"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null,
      amounts?: null
    ): DecreaseLPAllowanceEventFilter;
    DecreaseLPAllowance(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null,
      amounts?: null
    ): DecreaseLPAllowanceEventFilter;

    "Flashloan(address,address,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): FlashloanEventFilter;
    Flashloan(
      receiver?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): FlashloanEventFilter;

    "IncreaseLPAllowance(address,address,uint256[],uint256[])"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null,
      amounts?: null
    ): IncreaseLPAllowanceEventFilter;
    IncreaseLPAllowance(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null,
      amounts?: null
    ): IncreaseLPAllowanceEventFilter;

    "InterestUpdateFailure()"(): InterestUpdateFailureEventFilter;
    InterestUpdateFailure(): InterestUpdateFailureEventFilter;

    "Kick(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      debt?: null,
      collateral?: null,
      bond?: null
    ): KickEventFilter;
    Kick(
      borrower?: PromiseOrValue<string> | null,
      debt?: null,
      collateral?: null,
      bond?: null
    ): KickEventFilter;

    "KickReserveAuction(uint256,uint256,uint256)"(
      claimableReservesRemaining?: null,
      auctionPrice?: null,
      currentBurnEpoch?: null
    ): KickReserveAuctionEventFilter;
    KickReserveAuction(
      claimableReservesRemaining?: null,
      auctionPrice?: null,
      currentBurnEpoch?: null
    ): KickReserveAuctionEventFilter;

    "LoanStamped(address)"(
      borrower?: PromiseOrValue<string> | null
    ): LoanStampedEventFilter;
    LoanStamped(
      borrower?: PromiseOrValue<string> | null
    ): LoanStampedEventFilter;

    "MoveQuoteToken(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null,
      lup?: null
    ): MoveQuoteTokenEventFilter;
    MoveQuoteToken(
      lender?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemedFrom?: null,
      lpAwardedTo?: null,
      lup?: null
    ): MoveQuoteTokenEventFilter;

    "RemoveCollateral(address,uint256,uint256,uint256)"(
      claimer?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null
    ): RemoveCollateralEventFilter;
    RemoveCollateral(
      claimer?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null
    ): RemoveCollateralEventFilter;

    "RemoveQuoteToken(address,uint256,uint256,uint256,uint256)"(
      lender?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null,
      lup?: null
    ): RemoveQuoteTokenEventFilter;
    RemoveQuoteToken(
      lender?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpRedeemed?: null,
      lup?: null
    ): RemoveQuoteTokenEventFilter;

    "RepayDebt(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      quoteRepaid?: null,
      collateralPulled?: null,
      lup?: null
    ): RepayDebtEventFilter;
    RepayDebt(
      borrower?: PromiseOrValue<string> | null,
      quoteRepaid?: null,
      collateralPulled?: null,
      lup?: null
    ): RepayDebtEventFilter;

    "ReserveAuction(uint256,uint256,uint256)"(
      claimableReservesRemaining?: null,
      auctionPrice?: null,
      currentBurnEpoch?: null
    ): ReserveAuctionEventFilter;
    ReserveAuction(
      claimableReservesRemaining?: null,
      auctionPrice?: null,
      currentBurnEpoch?: null
    ): ReserveAuctionEventFilter;

    "ResetInterestRate(uint256,uint256)"(
      oldRate?: null,
      newRate?: null
    ): ResetInterestRateEventFilter;
    ResetInterestRate(
      oldRate?: null,
      newRate?: null
    ): ResetInterestRateEventFilter;

    "RevokeLPAllowance(address,address,uint256[])"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null
    ): RevokeLPAllowanceEventFilter;
    RevokeLPAllowance(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      indexes?: null
    ): RevokeLPAllowanceEventFilter;

    "RevokeLPTransferors(address,address[])"(
      lender?: PromiseOrValue<string> | null,
      transferors?: null
    ): RevokeLPTransferorsEventFilter;
    RevokeLPTransferors(
      lender?: PromiseOrValue<string> | null,
      transferors?: null
    ): RevokeLPTransferorsEventFilter;

    "Settle(address,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      settledDebt?: null
    ): SettleEventFilter;
    Settle(
      borrower?: PromiseOrValue<string> | null,
      settledDebt?: null
    ): SettleEventFilter;

    "Take(address,uint256,uint256,uint256,bool)"(
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): TakeEventFilter;
    Take(
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      collateral?: null,
      bondChange?: null,
      isReward?: null
    ): TakeEventFilter;

    "TransferLP(address,address,uint256[],uint256)"(
      owner?: null,
      newOwner?: null,
      indexes?: null,
      lp?: null
    ): TransferLPEventFilter;
    TransferLP(
      owner?: null,
      newOwner?: null,
      indexes?: null,
      lp?: null
    ): TransferLPEventFilter;

    "UpdateInterestRate(uint256,uint256)"(
      oldRate?: null,
      newRate?: null
    ): UpdateInterestRateEventFilter;
    UpdateInterestRate(
      oldRate?: null,
      newRate?: null
    ): UpdateInterestRateEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
