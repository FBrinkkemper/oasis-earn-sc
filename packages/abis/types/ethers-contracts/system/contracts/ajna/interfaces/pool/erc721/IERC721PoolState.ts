/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IERC721PoolStateInterface extends utils.Interface {
  functions: {
    "borrowerTokenIds(address,uint256)": FunctionFragment;
    "bucketTokenIds(uint256)": FunctionFragment;
    "getBorrowerTokenIds(address)": FunctionFragment;
    "getBucketTokenIds()": FunctionFragment;
    "tokenIdsAllowed(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowerTokenIds"
      | "bucketTokenIds"
      | "getBorrowerTokenIds"
      | "getBucketTokenIds"
      | "tokenIdsAllowed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowerTokenIds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketTokenIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowerTokenIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketTokenIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdsAllowed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowerTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bucketTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowerTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdsAllowed",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC721PoolState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC721PoolStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowerTokenIds(
      borrower: PromiseOrValue<string>,
      nftIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    bucketTokenIds(
      nftIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId: BigNumber }>;

    getBorrowerTokenIds(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBucketTokenIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    tokenIdsAllowed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;
  };

  borrowerTokenIds(
    borrower: PromiseOrValue<string>,
    nftIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bucketTokenIds(
    nftIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowerTokenIds(
    borrower_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBucketTokenIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  tokenIdsAllowed(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    borrowerTokenIds(
      borrower: PromiseOrValue<string>,
      nftIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketTokenIds(
      nftIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowerTokenIds(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBucketTokenIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    tokenIdsAllowed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    borrowerTokenIds(
      borrower: PromiseOrValue<string>,
      nftIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketTokenIds(
      nftIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowerTokenIds(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBucketTokenIds(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdsAllowed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowerTokenIds(
      borrower: PromiseOrValue<string>,
      nftIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketTokenIds(
      nftIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowerTokenIds(
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBucketTokenIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdsAllowed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
