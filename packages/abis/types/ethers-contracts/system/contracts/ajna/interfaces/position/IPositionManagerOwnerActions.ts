/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IPositionManagerOwnerActionsInterface extends utils.Interface {
  functions: {
    "burn(address,uint256)": FunctionFragment;
    "memorializePositions(address,uint256,uint256[])": FunctionFragment;
    "mint(address,address,bytes32)": FunctionFragment;
    "moveLiquidity(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "redeemPositions(address,uint256,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn"
      | "memorializePositions"
      | "mint"
      | "moveLiquidity"
      | "redeemPositions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "memorializePositions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "moveLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPositions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memorializePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPositions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPositionManagerOwnerActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPositionManagerOwnerActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memorializePositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      pool_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      poolSubsetHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveLiquidity(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemPositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    pool_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memorializePositions(
    pool_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    indexes_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    pool_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    poolSubsetHash_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveLiquidity(
    pool_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    fromIndex_: PromiseOrValue<BigNumberish>,
    toIndex_: PromiseOrValue<BigNumberish>,
    expiry_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemPositions(
    pool_: PromiseOrValue<string>,
    tokenId_: PromiseOrValue<BigNumberish>,
    indexes_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    memorializePositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      pool_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      poolSubsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveLiquidity(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemPositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burn(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memorializePositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      pool_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      poolSubsetHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveLiquidity(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemPositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memorializePositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      pool_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      poolSubsetHash_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveLiquidity(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemPositions(
      pool_: PromiseOrValue<string>,
      tokenId_: PromiseOrValue<BigNumberish>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
