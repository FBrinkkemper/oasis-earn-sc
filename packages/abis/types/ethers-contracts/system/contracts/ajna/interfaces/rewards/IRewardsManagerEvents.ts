/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface IRewardsManagerEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimRewards"
      | "MoveStakedLiquidity"
      | "Stake"
      | "Unstake"
      | "UpdateExchangeRates"
  ): EventFragment;
}

export namespace ClaimRewardsEvent {
  export type InputTuple = [
    owner: AddressLike,
    ajnaPool: AddressLike,
    tokenId: BigNumberish,
    epochsClaimed: BigNumberish[],
    amount: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    ajnaPool: string,
    tokenId: bigint,
    epochsClaimed: bigint[],
    amount: bigint
  ];
  export interface OutputObject {
    owner: string;
    ajnaPool: string;
    tokenId: bigint;
    epochsClaimed: bigint[];
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoveStakedLiquidityEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    fromIndexes: BigNumberish[],
    toIndexes: BigNumberish[]
  ];
  export type OutputTuple = [
    tokenId: bigint,
    fromIndexes: bigint[],
    toIndexes: bigint[]
  ];
  export interface OutputObject {
    tokenId: bigint;
    fromIndexes: bigint[];
    toIndexes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [
    owner: AddressLike,
    ajnaPool: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, ajnaPool: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    ajnaPool: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeEvent {
  export type InputTuple = [
    owner: AddressLike,
    ajnaPool: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, ajnaPool: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    ajnaPool: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateExchangeRatesEvent {
  export type InputTuple = [
    caller: AddressLike,
    ajnaPool: AddressLike,
    indexesUpdated: BigNumberish[],
    rewardsClaimed: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    ajnaPool: string,
    indexesUpdated: bigint[],
    rewardsClaimed: bigint
  ];
  export interface OutputObject {
    caller: string;
    ajnaPool: string;
    indexesUpdated: bigint[];
    rewardsClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRewardsManagerEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardsManagerEvents;
  waitForDeployment(): Promise<this>;

  interface: IRewardsManagerEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ClaimRewards"
  ): TypedContractEvent<
    ClaimRewardsEvent.InputTuple,
    ClaimRewardsEvent.OutputTuple,
    ClaimRewardsEvent.OutputObject
  >;
  getEvent(
    key: "MoveStakedLiquidity"
  ): TypedContractEvent<
    MoveStakedLiquidityEvent.InputTuple,
    MoveStakedLiquidityEvent.OutputTuple,
    MoveStakedLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "Unstake"
  ): TypedContractEvent<
    UnstakeEvent.InputTuple,
    UnstakeEvent.OutputTuple,
    UnstakeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateExchangeRates"
  ): TypedContractEvent<
    UpdateExchangeRatesEvent.InputTuple,
    UpdateExchangeRatesEvent.OutputTuple,
    UpdateExchangeRatesEvent.OutputObject
  >;

  filters: {
    "ClaimRewards(address,address,uint256,uint256[],uint256)": TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;
    ClaimRewards: TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;

    "MoveStakedLiquidity(uint256,uint256[],uint256[])": TypedContractEvent<
      MoveStakedLiquidityEvent.InputTuple,
      MoveStakedLiquidityEvent.OutputTuple,
      MoveStakedLiquidityEvent.OutputObject
    >;
    MoveStakedLiquidity: TypedContractEvent<
      MoveStakedLiquidityEvent.InputTuple,
      MoveStakedLiquidityEvent.OutputTuple,
      MoveStakedLiquidityEvent.OutputObject
    >;

    "Stake(address,address,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "Unstake(address,address,uint256)": TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
    Unstake: TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;

    "UpdateExchangeRates(address,address,uint256[],uint256)": TypedContractEvent<
      UpdateExchangeRatesEvent.InputTuple,
      UpdateExchangeRatesEvent.OutputTuple,
      UpdateExchangeRatesEvent.OutputObject
    >;
    UpdateExchangeRates: TypedContractEvent<
      UpdateExchangeRatesEvent.InputTuple,
      UpdateExchangeRatesEvent.OutputTuple,
      UpdateExchangeRatesEvent.OutputObject
    >;
  };
}
