/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IRewardsManagerEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "ClaimRewards(address,address,uint256,uint256[],uint256)": EventFragment;
    "MoveStakedLiquidity(uint256,uint256[],uint256[])": EventFragment;
    "Stake(address,address,uint256)": EventFragment;
    "Unstake(address,address,uint256)": EventFragment;
    "UpdateExchangeRates(address,address,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoveStakedLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateExchangeRates"): EventFragment;
}

export interface ClaimRewardsEventObject {
  owner: string;
  ajnaPool: string;
  tokenId: BigNumber;
  epochsClaimed: BigNumber[];
  amount: BigNumber;
}
export type ClaimRewardsEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[], BigNumber],
  ClaimRewardsEventObject
>;

export type ClaimRewardsEventFilter = TypedEventFilter<ClaimRewardsEvent>;

export interface MoveStakedLiquidityEventObject {
  tokenId: BigNumber;
  fromIndexes: BigNumber[];
  toIndexes: BigNumber[];
}
export type MoveStakedLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]],
  MoveStakedLiquidityEventObject
>;

export type MoveStakedLiquidityEventFilter =
  TypedEventFilter<MoveStakedLiquidityEvent>;

export interface StakeEventObject {
  owner: string;
  ajnaPool: string;
  tokenId: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, string, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnstakeEventObject {
  owner: string;
  ajnaPool: string;
  tokenId: BigNumber;
}
export type UnstakeEvent = TypedEvent<
  [string, string, BigNumber],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface UpdateExchangeRatesEventObject {
  caller: string;
  ajnaPool: string;
  indexesUpdated: BigNumber[];
  rewardsClaimed: BigNumber;
}
export type UpdateExchangeRatesEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber],
  UpdateExchangeRatesEventObject
>;

export type UpdateExchangeRatesEventFilter =
  TypedEventFilter<UpdateExchangeRatesEvent>;

export interface IRewardsManagerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardsManagerEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ClaimRewards(address,address,uint256,uint256[],uint256)"(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      epochsClaimed?: null,
      amount?: null
    ): ClaimRewardsEventFilter;
    ClaimRewards(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      epochsClaimed?: null,
      amount?: null
    ): ClaimRewardsEventFilter;

    "MoveStakedLiquidity(uint256,uint256[],uint256[])"(
      tokenId?: null,
      fromIndexes?: null,
      toIndexes?: null
    ): MoveStakedLiquidityEventFilter;
    MoveStakedLiquidity(
      tokenId?: null,
      fromIndexes?: null,
      toIndexes?: null
    ): MoveStakedLiquidityEventFilter;

    "Stake(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeEventFilter;
    Stake(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeEventFilter;

    "Unstake(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeEventFilter;
    Unstake(
      owner?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeEventFilter;

    "UpdateExchangeRates(address,address,uint256[],uint256)"(
      caller?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      indexesUpdated?: null,
      rewardsClaimed?: null
    ): UpdateExchangeRatesEventFilter;
    UpdateExchangeRates(
      caller?: PromiseOrValue<string> | null,
      ajnaPool?: PromiseOrValue<string> | null,
      indexesUpdated?: null,
      rewardsClaimed?: null
    ): UpdateExchangeRatesEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
