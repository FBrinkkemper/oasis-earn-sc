/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface IPoolImmutablesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collateralAddress"
      | "poolType"
      | "quoteTokenAddress"
      | "quoteTokenScale"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collateralAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenScale",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenScale",
    data: BytesLike
  ): Result;
}

export interface IPoolImmutables extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolImmutables;
  waitForDeployment(): Promise<this>;

  interface: IPoolImmutablesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collateralAddress: TypedContractMethod<[], [string], "view">;

  poolType: TypedContractMethod<[], [bigint], "view">;

  quoteTokenAddress: TypedContractMethod<[], [string], "view">;

  quoteTokenScale: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collateralAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quoteTokenScale"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
