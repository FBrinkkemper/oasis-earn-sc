/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface IPoolStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approvedTransferors"
      | "auctionInfo"
      | "borrowerInfo"
      | "bucketInfo"
      | "burnInfo"
      | "currentBurnEpoch"
      | "debtInfo"
      | "emasInfo"
      | "inflatorInfo"
      | "interestRateInfo"
      | "kickerInfo"
      | "lenderInfo"
      | "loanInfo"
      | "loansInfo"
      | "lpAllowance"
      | "pledgedCollateral"
      | "reservesInfo"
      | "totalAuctionsInPool"
      | "totalT0Debt"
      | "totalT0DebtInAuction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvedTransferors",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBurnEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "emasInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inflatorInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loanInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "loansInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lpAllowance",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgedCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservesInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAuctionsInPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalT0Debt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalT0DebtInAuction",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedTransferors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bucketInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBurnEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emasInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inflatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kickerInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenderInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loanInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loansInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pledgedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAuctionsInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalT0Debt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalT0DebtInAuction",
    data: BytesLike
  ): Result;
}

export interface IPoolState extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolState;
  waitForDeployment(): Promise<this>;

  interface: IPoolStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approvedTransferors: TypedContractMethod<
    [lender_: AddressLike, transferor_: AddressLike],
    [boolean],
    "view"
  >;

  auctionInfo: TypedContractMethod<
    [borrower_: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        boolean
      ] & {
        kicker_: string;
        bondFactor_: bigint;
        bondSize_: bigint;
        kickTime_: bigint;
        kickMomp_: bigint;
        neutralPrice_: bigint;
        head_: string;
        next_: string;
        prev_: string;
        alreadyTaken_: boolean;
      }
    ],
    "view"
  >;

  borrowerInfo: TypedContractMethod<
    [borrower_: AddressLike],
    [
      [bigint, bigint, bigint] & {
        t0Debt_: bigint;
        collateral_: bigint;
        t0Np_: bigint;
      }
    ],
    "view"
  >;

  bucketInfo: TypedContractMethod<
    [index_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        lpAccumulator_: bigint;
        availableCollateral_: bigint;
        bankruptcyTime_: bigint;
        bucketDeposit_: bigint;
        bucketScale_: bigint;
      }
    ],
    "view"
  >;

  burnInfo: TypedContractMethod<
    [burnEventEpoch_: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;

  currentBurnEpoch: TypedContractMethod<[], [bigint], "view">;

  debtInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        debt_: bigint;
        accruedDebt_: bigint;
        debtInAuction_: bigint;
        t0Debt2ToCollateral_: bigint;
      }
    ],
    "view"
  >;

  emasInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        debtColEma_: bigint;
        lupt0DebtEma_: bigint;
        debtEma_: bigint;
        depositEma_: bigint;
      }
    ],
    "view"
  >;

  inflatorInfo: TypedContractMethod<
    [],
    [[bigint, bigint] & { inflator_: bigint; lastUpdate_: bigint }],
    "view"
  >;

  interestRateInfo: TypedContractMethod<
    [],
    [[bigint, bigint] & { interestRate_: bigint; interestRateUpdate_: bigint }],
    "view"
  >;

  kickerInfo: TypedContractMethod<
    [kicker_: AddressLike],
    [[bigint, bigint] & { claimable_: bigint; locked_: bigint }],
    "view"
  >;

  lenderInfo: TypedContractMethod<
    [index_: BigNumberish, lender_: AddressLike],
    [[bigint, bigint] & { lpBalance_: bigint; depositTime_: bigint }],
    "view"
  >;

  loanInfo: TypedContractMethod<
    [loanId_: BigNumberish],
    [[string, bigint] & { borrower_: string; thresholdPrice_: bigint }],
    "view"
  >;

  loansInfo: TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        maxBorrower_: string;
        maxThresholdPrice_: bigint;
        noOfLoans_: bigint;
      }
    ],
    "view"
  >;

  lpAllowance: TypedContractMethod<
    [index_: BigNumberish, spender_: AddressLike, owner_: AddressLike],
    [bigint],
    "view"
  >;

  pledgedCollateral: TypedContractMethod<[], [bigint], "view">;

  reservesInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        liquidationBondEscrowed_: bigint;
        reserveAuctionUnclaimed_: bigint;
        reserveAuctionKicked_: bigint;
        totalInterestEarned_: bigint;
      }
    ],
    "view"
  >;

  totalAuctionsInPool: TypedContractMethod<[], [bigint], "view">;

  totalT0Debt: TypedContractMethod<[], [bigint], "view">;

  totalT0DebtInAuction: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approvedTransferors"
  ): TypedContractMethod<
    [lender_: AddressLike, transferor_: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctionInfo"
  ): TypedContractMethod<
    [borrower_: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        boolean
      ] & {
        kicker_: string;
        bondFactor_: bigint;
        bondSize_: bigint;
        kickTime_: bigint;
        kickMomp_: bigint;
        neutralPrice_: bigint;
        head_: string;
        next_: string;
        prev_: string;
        alreadyTaken_: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowerInfo"
  ): TypedContractMethod<
    [borrower_: AddressLike],
    [
      [bigint, bigint, bigint] & {
        t0Debt_: bigint;
        collateral_: bigint;
        t0Np_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bucketInfo"
  ): TypedContractMethod<
    [index_: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        lpAccumulator_: bigint;
        availableCollateral_: bigint;
        bankruptcyTime_: bigint;
        bucketDeposit_: bigint;
        bucketScale_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "burnInfo"
  ): TypedContractMethod<
    [burnEventEpoch_: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentBurnEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "debtInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        debt_: bigint;
        accruedDebt_: bigint;
        debtInAuction_: bigint;
        t0Debt2ToCollateral_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emasInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        debtColEma_: bigint;
        lupt0DebtEma_: bigint;
        debtEma_: bigint;
        depositEma_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "inflatorInfo"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { inflator_: bigint; lastUpdate_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "interestRateInfo"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { interestRate_: bigint; interestRateUpdate_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "kickerInfo"
  ): TypedContractMethod<
    [kicker_: AddressLike],
    [[bigint, bigint] & { claimable_: bigint; locked_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lenderInfo"
  ): TypedContractMethod<
    [index_: BigNumberish, lender_: AddressLike],
    [[bigint, bigint] & { lpBalance_: bigint; depositTime_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "loanInfo"
  ): TypedContractMethod<
    [loanId_: BigNumberish],
    [[string, bigint] & { borrower_: string; thresholdPrice_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "loansInfo"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint] & {
        maxBorrower_: string;
        maxThresholdPrice_: bigint;
        noOfLoans_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lpAllowance"
  ): TypedContractMethod<
    [index_: BigNumberish, spender_: AddressLike, owner_: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pledgedCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reservesInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        liquidationBondEscrowed_: bigint;
        reserveAuctionUnclaimed_: bigint;
        reserveAuctionKicked_: bigint;
        totalInterestEarned_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalAuctionsInPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalT0Debt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalT0DebtInAuction"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
