/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface IPoolLPActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveLPTransferors"
      | "decreaseLPAllowance"
      | "increaseLPAllowance"
      | "revokeLPAllowance"
      | "revokeLPTransferors"
      | "transferLP"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveLPTransferors",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLPAllowance",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLPAllowance",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLPAllowance",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLPTransferors",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLP",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveLPTransferors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLPTransferors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferLP", data: BytesLike): Result;
}

export interface IPoolLPActions extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolLPActions;
  waitForDeployment(): Promise<this>;

  interface: IPoolLPActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveLPTransferors: TypedContractMethod<
    [transferors_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  decreaseLPAllowance: TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[], amounts_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  increaseLPAllowance: TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[], amounts_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  revokeLPAllowance: TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  revokeLPTransferors: TypedContractMethod<
    [transferors_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  transferLP: TypedContractMethod<
    [owner_: AddressLike, newOwner_: AddressLike, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveLPTransferors"
  ): TypedContractMethod<[transferors_: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decreaseLPAllowance"
  ): TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[], amounts_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLPAllowance"
  ): TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[], amounts_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeLPAllowance"
  ): TypedContractMethod<
    [spender_: AddressLike, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeLPTransferors"
  ): TypedContractMethod<[transferors_: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferLP"
  ): TypedContractMethod<
    [owner_: AddressLike, newOwner_: AddressLike, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
