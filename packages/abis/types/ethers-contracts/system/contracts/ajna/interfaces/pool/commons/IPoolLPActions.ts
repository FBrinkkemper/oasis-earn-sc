/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IPoolLPActionsInterface extends utils.Interface {
  functions: {
    "approveLPTransferors(address[])": FunctionFragment;
    "decreaseLPAllowance(address,uint256[],uint256[])": FunctionFragment;
    "increaseLPAllowance(address,uint256[],uint256[])": FunctionFragment;
    "revokeLPAllowance(address,uint256[])": FunctionFragment;
    "revokeLPTransferors(address[])": FunctionFragment;
    "transferLP(address,address,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveLPTransferors"
      | "decreaseLPAllowance"
      | "increaseLPAllowance"
      | "revokeLPAllowance"
      | "revokeLPTransferors"
      | "transferLP"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveLPTransferors",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLPAllowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLPAllowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLPAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLPTransferors",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLP",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveLPTransferors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLPAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLPTransferors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferLP", data: BytesLike): Result;

  events: {};
}

export interface IPoolLPActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolLPActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveLPTransferors(
      transferors_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeLPTransferors(
      transferors_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferLP(
      owner_: PromiseOrValue<string>,
      newOwner_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveLPTransferors(
    transferors_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseLPAllowance(
    spender_: PromiseOrValue<string>,
    indexes_: PromiseOrValue<BigNumberish>[],
    amounts_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseLPAllowance(
    spender_: PromiseOrValue<string>,
    indexes_: PromiseOrValue<BigNumberish>[],
    amounts_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeLPAllowance(
    spender_: PromiseOrValue<string>,
    indexes_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeLPTransferors(
    transferors_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferLP(
    owner_: PromiseOrValue<string>,
    newOwner_: PromiseOrValue<string>,
    indexes_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveLPTransferors(
      transferors_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeLPTransferors(
      transferors_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferLP(
      owner_: PromiseOrValue<string>,
      newOwner_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveLPTransferors(
      transferors_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeLPTransferors(
      transferors_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferLP(
      owner_: PromiseOrValue<string>,
      newOwner_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveLPTransferors(
      transferors_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeLPAllowance(
      spender_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeLPTransferors(
      transferors_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferLP(
      owner_: PromiseOrValue<string>,
      newOwner_: PromiseOrValue<string>,
      indexes_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
