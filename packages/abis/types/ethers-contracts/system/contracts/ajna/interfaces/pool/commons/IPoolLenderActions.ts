/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface IPoolLenderActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addQuoteToken"
      | "moveQuoteToken"
      | "removeCollateral"
      | "removeQuoteToken"
      | "updateInterest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addQuoteToken",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuoteToken",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeQuoteToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterest",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterest",
    data: BytesLike
  ): Result;
}

export interface IPoolLenderActions extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolLenderActions;
  waitForDeployment(): Promise<this>;

  interface: IPoolLenderActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addQuoteToken: TypedContractMethod<
    [
      amount_: BigNumberish,
      index_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  moveQuoteToken: TypedContractMethod<
    [
      maxAmount_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [
      [bigint, bigint, bigint] & {
        fromBucketLP_: bigint;
        toBucketLP_: bigint;
        movedAmount_: bigint;
      }
    ],
    "nonpayable"
  >;

  removeCollateral: TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { removedAmount_: bigint; redeemedLP_: bigint }],
    "nonpayable"
  >;

  removeQuoteToken: TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { removedAmount_: bigint; redeemedLP_: bigint }],
    "nonpayable"
  >;

  updateInterest: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addQuoteToken"
  ): TypedContractMethod<
    [
      amount_: BigNumberish,
      index_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "moveQuoteToken"
  ): TypedContractMethod<
    [
      maxAmount_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [
      [bigint, bigint, bigint] & {
        fromBucketLP_: bigint;
        toBucketLP_: bigint;
        movedAmount_: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeCollateral"
  ): TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { removedAmount_: bigint; redeemedLP_: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeQuoteToken"
  ): TypedContractMethod<
    [maxAmount_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint] & { removedAmount_: bigint; redeemedLP_: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateInterest"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
