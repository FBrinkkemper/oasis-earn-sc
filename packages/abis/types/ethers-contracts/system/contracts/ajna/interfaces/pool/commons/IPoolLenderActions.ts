/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IPoolLenderActionsInterface extends utils.Interface {
  functions: {
    "addQuoteToken(uint256,uint256,uint256)": FunctionFragment;
    "moveQuoteToken(uint256,uint256,uint256,uint256)": FunctionFragment;
    "removeCollateral(uint256,uint256)": FunctionFragment;
    "removeQuoteToken(uint256,uint256)": FunctionFragment;
    "updateInterest()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addQuoteToken"
      | "moveQuoteToken"
      | "removeCollateral"
      | "removeQuoteToken"
      | "updateInterest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addQuoteToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "moveQuoteToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeQuoteToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterest",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterest",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPoolLenderActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolLenderActionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addQuoteToken(
      amount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addQuoteToken(
    amount_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    expiry_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveQuoteToken(
    maxAmount_: PromiseOrValue<BigNumberish>,
    fromIndex_: PromiseOrValue<BigNumberish>,
    toIndex_: PromiseOrValue<BigNumberish>,
    expiry_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    maxAmount_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeQuoteToken(
    maxAmount_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInterest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addQuoteToken(
      amount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bucketLP_: BigNumber; addedAmount_: BigNumber }
    >;

    moveQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fromBucketLP_: BigNumber;
        toBucketLP_: BigNumber;
        movedAmount_: BigNumber;
      }
    >;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        removedAmount_: BigNumber;
        redeemedLP_: BigNumber;
      }
    >;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        removedAmount_: BigNumber;
        redeemedLP_: BigNumber;
      }
    >;

    updateInterest(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addQuoteToken(
      amount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addQuoteToken(
      amount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      fromIndex_: PromiseOrValue<BigNumberish>,
      toIndex_: PromiseOrValue<BigNumberish>,
      expiry_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeQuoteToken(
      maxAmount_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInterest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
