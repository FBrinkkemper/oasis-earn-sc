/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IPositionManagerDerivedStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getLP"
      | "getPositionIndexes"
      | "getPositionIndexesFiltered"
      | "getPositionInfo"
      | "isAjnaPool"
      | "isIndexInPosition"
      | "isPositionBucketBankrupt"
      | "poolKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLP",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIndexesFiltered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAjnaPool",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIndexInPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionBucketBankrupt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolKey",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIndexesFiltered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAjnaPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIndexInPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionBucketBankrupt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolKey", data: BytesLike): Result;
}

export interface IPositionManagerDerivedState extends BaseContract {
  connect(runner?: ContractRunner | null): IPositionManagerDerivedState;
  waitForDeployment(): Promise<this>;

  interface: IPositionManagerDerivedStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLP: TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;

  getPositionIndexes: TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint[]],
    "view"
  >;

  getPositionIndexesFiltered: TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint[]],
    "view"
  >;

  getPositionInfo: TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  isAjnaPool: TypedContractMethod<
    [pool_: AddressLike, subsetHash_: BytesLike],
    [boolean],
    "view"
  >;

  isIndexInPosition: TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [boolean],
    "view"
  >;

  isPositionBucketBankrupt: TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [boolean],
    "view"
  >;

  poolKey: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLP"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionIndexes"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPositionIndexesFiltered"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPositionInfo"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAjnaPool"
  ): TypedContractMethod<
    [pool_: AddressLike, subsetHash_: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isIndexInPosition"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPositionBucketBankrupt"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolKey"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  filters: {};
}
