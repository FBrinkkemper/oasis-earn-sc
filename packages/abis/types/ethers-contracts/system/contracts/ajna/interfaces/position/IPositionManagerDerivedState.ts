/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IPositionManagerDerivedStateInterface extends utils.Interface {
  functions: {
    "getLP(uint256,uint256)": FunctionFragment;
    "getPositionIndexes(uint256)": FunctionFragment;
    "getPositionIndexesFiltered(uint256)": FunctionFragment;
    "getPositionInfo(uint256,uint256)": FunctionFragment;
    "isAjnaPool(address,bytes32)": FunctionFragment;
    "isIndexInPosition(uint256,uint256)": FunctionFragment;
    "isPositionBucketBankrupt(uint256,uint256)": FunctionFragment;
    "poolKey(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getLP"
      | "getPositionIndexes"
      | "getPositionIndexesFiltered"
      | "getPositionInfo"
      | "isAjnaPool"
      | "isIndexInPosition"
      | "isPositionBucketBankrupt"
      | "poolKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLP",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIndexes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIndexesFiltered",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAjnaPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isIndexInPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionBucketBankrupt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIndexesFiltered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAjnaPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIndexInPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionBucketBankrupt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolKey", data: BytesLike): Result;

  events: {};
}

export interface IPositionManagerDerivedState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPositionManagerDerivedStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLP(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lp_: BigNumber }>;

    getPositionIndexes(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPositionIndexesFiltered(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPositionInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isAjnaPool(
      pool_: PromiseOrValue<string>,
      subsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isAjnaPool_: boolean }>;

    isIndexInPosition(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { bucketInPosition_: boolean }>;

    isPositionBucketBankrupt(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isBankrupt_: boolean }>;

    poolKey(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getLP(
    tokenId_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionIndexes(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPositionIndexesFiltered(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPositionInfo(
    tokenId_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  isAjnaPool(
    pool_: PromiseOrValue<string>,
    subsetHash_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIndexInPosition(
    tokenId_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPositionBucketBankrupt(
    tokenId_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  poolKey(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getLP(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionIndexes(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPositionIndexesFiltered(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPositionInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isAjnaPool(
      pool_: PromiseOrValue<string>,
      subsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIndexInPosition(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPositionBucketBankrupt(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    poolKey(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getLP(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionIndexes(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionIndexesFiltered(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAjnaPool(
      pool_: PromiseOrValue<string>,
      subsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIndexInPosition(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPositionBucketBankrupt(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolKey(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLP(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionIndexes(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionIndexesFiltered(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAjnaPool(
      pool_: PromiseOrValue<string>,
      subsetHash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIndexInPosition(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPositionBucketBankrupt(
      tokenId_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolKey(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
