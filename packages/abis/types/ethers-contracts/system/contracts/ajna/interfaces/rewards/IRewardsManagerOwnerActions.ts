/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IRewardsManagerOwnerActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRewards"
      | "emergencyUnstake"
      | "stake"
      | "unstake"
      | "updateBucketExchangeRatesAndClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBucketExchangeRatesAndClaim",
    values: [AddressLike, BytesLike, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBucketExchangeRatesAndClaim",
    data: BytesLike
  ): Result;
}

export interface IRewardsManagerOwnerActions extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardsManagerOwnerActions;
  waitForDeployment(): Promise<this>;

  interface: IRewardsManagerOwnerActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRewards: TypedContractMethod<
    [
      tokenId_: BigNumberish,
      epochToClaim_: BigNumberish,
      minAmount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emergencyUnstake: TypedContractMethod<
    [tokenId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[tokenId_: BigNumberish], [void], "nonpayable">;

  unstake: TypedContractMethod<[tokenId_: BigNumberish], [void], "nonpayable">;

  updateBucketExchangeRatesAndClaim: TypedContractMethod<
    [pool_: AddressLike, subsetHash_: BytesLike, indexes_: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [
      tokenId_: BigNumberish,
      epochToClaim_: BigNumberish,
      minAmount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyUnstake"
  ): TypedContractMethod<[tokenId_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[tokenId_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[tokenId_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBucketExchangeRatesAndClaim"
  ): TypedContractMethod<
    [pool_: AddressLike, subsetHash_: BytesLike, indexes_: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
