/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../../common";

export interface IERC721PoolEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AddCollateralNFT"
      | "DrawDebtNFT"
      | "MergeOrRemoveCollateralNFT"
  ): EventFragment;
}

export namespace AddCollateralNFTEvent {
  export type InputTuple = [
    actor: AddressLike,
    index: BigNumberish,
    tokenIds: BigNumberish[],
    lpAwarded: BigNumberish
  ];
  export type OutputTuple = [
    actor: string,
    index: bigint,
    tokenIds: bigint[],
    lpAwarded: bigint
  ];
  export interface OutputObject {
    actor: string;
    index: bigint;
    tokenIds: bigint[];
    lpAwarded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DrawDebtNFTEvent {
  export type InputTuple = [
    borrower: AddressLike,
    amountBorrowed: BigNumberish,
    tokenIdsPledged: BigNumberish[],
    lup: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    amountBorrowed: bigint,
    tokenIdsPledged: bigint[],
    lup: bigint
  ];
  export interface OutputObject {
    borrower: string;
    amountBorrowed: bigint;
    tokenIdsPledged: bigint[];
    lup: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MergeOrRemoveCollateralNFTEvent {
  export type InputTuple = [
    actor: AddressLike,
    collateralMerged: BigNumberish,
    toIndexLps: BigNumberish
  ];
  export type OutputTuple = [
    actor: string,
    collateralMerged: bigint,
    toIndexLps: bigint
  ];
  export interface OutputObject {
    actor: string;
    collateralMerged: bigint;
    toIndexLps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC721PoolEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IERC721PoolEvents;
  waitForDeployment(): Promise<this>;

  interface: IERC721PoolEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AddCollateralNFT"
  ): TypedContractEvent<
    AddCollateralNFTEvent.InputTuple,
    AddCollateralNFTEvent.OutputTuple,
    AddCollateralNFTEvent.OutputObject
  >;
  getEvent(
    key: "DrawDebtNFT"
  ): TypedContractEvent<
    DrawDebtNFTEvent.InputTuple,
    DrawDebtNFTEvent.OutputTuple,
    DrawDebtNFTEvent.OutputObject
  >;
  getEvent(
    key: "MergeOrRemoveCollateralNFT"
  ): TypedContractEvent<
    MergeOrRemoveCollateralNFTEvent.InputTuple,
    MergeOrRemoveCollateralNFTEvent.OutputTuple,
    MergeOrRemoveCollateralNFTEvent.OutputObject
  >;

  filters: {
    "AddCollateralNFT(address,uint256,uint256[],uint256)": TypedContractEvent<
      AddCollateralNFTEvent.InputTuple,
      AddCollateralNFTEvent.OutputTuple,
      AddCollateralNFTEvent.OutputObject
    >;
    AddCollateralNFT: TypedContractEvent<
      AddCollateralNFTEvent.InputTuple,
      AddCollateralNFTEvent.OutputTuple,
      AddCollateralNFTEvent.OutputObject
    >;

    "DrawDebtNFT(address,uint256,uint256[],uint256)": TypedContractEvent<
      DrawDebtNFTEvent.InputTuple,
      DrawDebtNFTEvent.OutputTuple,
      DrawDebtNFTEvent.OutputObject
    >;
    DrawDebtNFT: TypedContractEvent<
      DrawDebtNFTEvent.InputTuple,
      DrawDebtNFTEvent.OutputTuple,
      DrawDebtNFTEvent.OutputObject
    >;

    "MergeOrRemoveCollateralNFT(address,uint256,uint256)": TypedContractEvent<
      MergeOrRemoveCollateralNFTEvent.InputTuple,
      MergeOrRemoveCollateralNFTEvent.OutputTuple,
      MergeOrRemoveCollateralNFTEvent.OutputObject
    >;
    MergeOrRemoveCollateralNFT: TypedContractEvent<
      MergeOrRemoveCollateralNFTEvent.InputTuple,
      MergeOrRemoveCollateralNFTEvent.OutputTuple,
      MergeOrRemoveCollateralNFTEvent.OutputObject
    >;
  };
}
