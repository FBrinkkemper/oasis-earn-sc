/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IERC20PoolEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AddCollateral(address,uint256,uint256,uint256)": EventFragment;
    "DrawDebt(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawDebt"): EventFragment;
}

export interface AddCollateralEventObject {
  actor: string;
  index: BigNumber;
  amount: BigNumber;
  lpAwarded: BigNumber;
}
export type AddCollateralEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AddCollateralEventObject
>;

export type AddCollateralEventFilter = TypedEventFilter<AddCollateralEvent>;

export interface DrawDebtEventObject {
  borrower: string;
  amountBorrowed: BigNumber;
  collateralPledged: BigNumber;
  lup: BigNumber;
}
export type DrawDebtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DrawDebtEventObject
>;

export type DrawDebtEventFilter = TypedEventFilter<DrawDebtEvent>;

export interface IERC20PoolEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC20PoolEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddCollateral(address,uint256,uint256,uint256)"(
      actor?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null
    ): AddCollateralEventFilter;
    AddCollateral(
      actor?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lpAwarded?: null
    ): AddCollateralEventFilter;

    "DrawDebt(address,uint256,uint256,uint256)"(
      borrower?: PromiseOrValue<string> | null,
      amountBorrowed?: null,
      collateralPledged?: null,
      lup?: null
    ): DrawDebtEventFilter;
    DrawDebt(
      borrower?: PromiseOrValue<string> | null,
      amountBorrowed?: null,
      collateralPledged?: null,
      lup?: null
    ): DrawDebtEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
