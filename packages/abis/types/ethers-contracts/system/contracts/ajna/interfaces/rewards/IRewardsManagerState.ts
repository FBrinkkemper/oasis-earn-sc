/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IRewardsManagerStateInterface extends utils.Interface {
  functions: {
    "getBucketStateStakeInfo(uint256,uint256)": FunctionFragment;
    "getRewardsClaimed(address,uint256)": FunctionFragment;
    "getStakeInfo(uint256)": FunctionFragment;
    "getUpdateRewardsClaimed(address,uint256)": FunctionFragment;
    "isBucketUpdated(address,uint256,uint256)": FunctionFragment;
    "isEpochClaimed(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBucketStateStakeInfo"
      | "getRewardsClaimed"
      | "getStakeInfo"
      | "getUpdateRewardsClaimed"
      | "isBucketUpdated"
      | "isEpochClaimed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBucketStateStakeInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsClaimed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateRewardsClaimed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBucketUpdated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEpochClaimed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBucketStateStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateRewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBucketUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEpochClaimed",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRewardsManagerState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardsManagerStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBucketStateStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      bucketId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRewardsClaimed(
      pool_: PromiseOrValue<string>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner_: string;
        pool_: string;
        lastClaimedEpoch_: BigNumber;
      }
    >;

    getUpdateRewardsClaimed(
      pool_: PromiseOrValue<string>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isBucketUpdated(
      pool_: PromiseOrValue<string>,
      bucketIndex_: PromiseOrValue<BigNumberish>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEpochClaimed(
      tokenId_: PromiseOrValue<BigNumberish>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getBucketStateStakeInfo(
    tokenId_: PromiseOrValue<BigNumberish>,
    bucketId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getRewardsClaimed(
    pool_: PromiseOrValue<string>,
    epoch_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeInfo(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      owner_: string;
      pool_: string;
      lastClaimedEpoch_: BigNumber;
    }
  >;

  getUpdateRewardsClaimed(
    pool_: PromiseOrValue<string>,
    epoch_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isBucketUpdated(
    pool_: PromiseOrValue<string>,
    bucketIndex_: PromiseOrValue<BigNumberish>,
    epoch_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEpochClaimed(
    tokenId_: PromiseOrValue<BigNumberish>,
    epoch_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getBucketStateStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      bucketId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRewardsClaimed(
      pool_: PromiseOrValue<string>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner_: string;
        pool_: string;
        lastClaimedEpoch_: BigNumber;
      }
    >;

    getUpdateRewardsClaimed(
      pool_: PromiseOrValue<string>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBucketUpdated(
      pool_: PromiseOrValue<string>,
      bucketIndex_: PromiseOrValue<BigNumberish>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEpochClaimed(
      tokenId_: PromiseOrValue<BigNumberish>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getBucketStateStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      bucketId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsClaimed(
      pool_: PromiseOrValue<string>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdateRewardsClaimed(
      pool_: PromiseOrValue<string>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBucketUpdated(
      pool_: PromiseOrValue<string>,
      bucketIndex_: PromiseOrValue<BigNumberish>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEpochClaimed(
      tokenId_: PromiseOrValue<BigNumberish>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBucketStateStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      bucketId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsClaimed(
      pool_: PromiseOrValue<string>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdateRewardsClaimed(
      pool_: PromiseOrValue<string>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBucketUpdated(
      pool_: PromiseOrValue<string>,
      bucketIndex_: PromiseOrValue<BigNumberish>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEpochClaimed(
      tokenId_: PromiseOrValue<BigNumberish>,
      epoch_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
