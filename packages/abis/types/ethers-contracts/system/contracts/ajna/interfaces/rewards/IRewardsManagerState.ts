/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IRewardsManagerStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBucketStateStakeInfo"
      | "getStakeInfo"
      | "isBucketUpdated"
      | "isEpochClaimed"
      | "rewardsClaimed"
      | "updateRewardsClaimed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBucketStateStakeInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBucketUpdated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEpochClaimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardsClaimed",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBucketStateStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBucketUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEpochClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardsClaimed",
    data: BytesLike
  ): Result;
}

export interface IRewardsManagerState extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardsManagerState;
  waitForDeployment(): Promise<this>;

  interface: IRewardsManagerStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBucketStateStakeInfo: TypedContractMethod<
    [tokenId_: BigNumberish, bucketId_: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  getStakeInfo: TypedContractMethod<
    [tokenId_: BigNumberish],
    [
      [string, string, bigint] & {
        owner_: string;
        pool_: string;
        lastClaimedEpoch_: bigint;
      }
    ],
    "view"
  >;

  isBucketUpdated: TypedContractMethod<
    [pool_: AddressLike, bucketIndex_: BigNumberish, epoch_: BigNumberish],
    [boolean],
    "view"
  >;

  isEpochClaimed: TypedContractMethod<
    [tokenId_: BigNumberish, epoch_: BigNumberish],
    [boolean],
    "view"
  >;

  rewardsClaimed: TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;

  updateRewardsClaimed: TypedContractMethod<
    [epoch_: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBucketStateStakeInfo"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, bucketId_: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakeInfo"
  ): TypedContractMethod<
    [tokenId_: BigNumberish],
    [
      [string, string, bigint] & {
        owner_: string;
        pool_: string;
        lastClaimedEpoch_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBucketUpdated"
  ): TypedContractMethod<
    [pool_: AddressLike, bucketIndex_: BigNumberish, epoch_: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEpochClaimed"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, epoch_: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardsClaimed"
  ): TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateRewardsClaimed"
  ): TypedContractMethod<[epoch_: BigNumberish], [bigint], "view">;

  filters: {};
}
