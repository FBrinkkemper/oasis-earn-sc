/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PositionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "PERMIT_TYPEHASH"
      | "approve"
      | "balanceOf"
      | "burn"
      | "getApproved"
      | "getLP"
      | "getPositionIndexes"
      | "getPositionIndexesFiltered"
      | "getPositionInfo"
      | "isAjnaPool"
      | "isApprovedForAll"
      | "isIndexInPosition"
      | "isPositionBucketBankrupt"
      | "memorializePositions"
      | "mint"
      | "moveLiquidity"
      | "multicall"
      | "name"
      | "nonces"
      | "ownerOf"
      | "permit"
      | "poolKey"
      | "redeemPositions"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Burn"
      | "MemorializePosition"
      | "Mint"
      | "MoveLiquidity"
      | "RedeemPosition"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLP",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIndexesFiltered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAjnaPool",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIndexInPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionBucketBankrupt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "memorializePositions",
    values: [AddressLike, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moveLiquidity",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPositions",
    values: [AddressLike, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIndexesFiltered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAjnaPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIndexInPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionBucketBankrupt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memorializePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [lender: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [lender: string, tokenId: bigint];
  export interface OutputObject {
    lender: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemorializePositionEvent {
  export type InputTuple = [
    lender: AddressLike,
    tokenId: BigNumberish,
    indexes: BigNumberish[]
  ];
  export type OutputTuple = [
    lender: string,
    tokenId: bigint,
    indexes: bigint[]
  ];
  export interface OutputObject {
    lender: string;
    tokenId: bigint;
    indexes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    lender: AddressLike,
    pool: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [lender: string, pool: string, tokenId: bigint];
  export interface OutputObject {
    lender: string;
    pool: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoveLiquidityEvent {
  export type InputTuple = [
    lender: AddressLike,
    tokenId: BigNumberish,
    fromIndex: BigNumberish,
    toIndex: BigNumberish,
    lpRedeemedFrom: BigNumberish,
    lpAwardedTo: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    tokenId: bigint,
    fromIndex: bigint,
    toIndex: bigint,
    lpRedeemedFrom: bigint,
    lpAwardedTo: bigint
  ];
  export interface OutputObject {
    lender: string;
    tokenId: bigint;
    fromIndex: bigint;
    toIndex: bigint;
    lpRedeemedFrom: bigint;
    lpAwardedTo: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemPositionEvent {
  export type InputTuple = [
    lender: AddressLike,
    tokenId: BigNumberish,
    indexes: BigNumberish[]
  ];
  export type OutputTuple = [
    lender: string,
    tokenId: bigint,
    indexes: bigint[]
  ];
  export interface OutputObject {
    lender: string;
    tokenId: bigint;
    indexes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionManager extends BaseContract {
  connect(runner?: ContractRunner | null): PositionManager;
  waitForDeployment(): Promise<this>;

  interface: PositionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<
    [pool_: AddressLike, tokenId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getLP: TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;

  getPositionIndexes: TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint[]],
    "view"
  >;

  getPositionIndexesFiltered: TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint[]],
    "view"
  >;

  getPositionInfo: TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  isAjnaPool: TypedContractMethod<
    [pool_: AddressLike, subsetHash_: BytesLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isIndexInPosition: TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [boolean],
    "view"
  >;

  isPositionBucketBankrupt: TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [boolean],
    "view"
  >;

  memorializePositions: TypedContractMethod<
    [pool_: AddressLike, tokenId_: BigNumberish, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [pool_: AddressLike, recipient_: AddressLike, poolSubsetHash_: BytesLike],
    [bigint],
    "nonpayable"
  >;

  moveLiquidity: TypedContractMethod<
    [
      pool_: AddressLike,
      tokenId_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [void],
    "nonpayable"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  permit: TypedContractMethod<
    [
      spender_: AddressLike,
      tokenId_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  poolKey: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  redeemPositions: TypedContractMethod<
    [pool_: AddressLike, tokenId_: BigNumberish, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [pool_: AddressLike, tokenId_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLP"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionIndexes"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPositionIndexesFiltered"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPositionInfo"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAjnaPool"
  ): TypedContractMethod<
    [pool_: AddressLike, subsetHash_: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isIndexInPosition"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPositionBucketBankrupt"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, index_: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "memorializePositions"
  ): TypedContractMethod<
    [pool_: AddressLike, tokenId_: BigNumberish, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [pool_: AddressLike, recipient_: AddressLike, poolSubsetHash_: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "moveLiquidity"
  ): TypedContractMethod<
    [
      pool_: AddressLike,
      tokenId_: BigNumberish,
      fromIndex_: BigNumberish,
      toIndex_: BigNumberish,
      expiry_: BigNumberish,
      revertIfBelowLup_: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      spender_: AddressLike,
      tokenId_: BigNumberish,
      deadline_: BigNumberish,
      signature_: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolKey"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "redeemPositions"
  ): TypedContractMethod<
    [pool_: AddressLike, tokenId_: BigNumberish, indexes_: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "MemorializePosition"
  ): TypedContractEvent<
    MemorializePositionEvent.InputTuple,
    MemorializePositionEvent.OutputTuple,
    MemorializePositionEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "MoveLiquidity"
  ): TypedContractEvent<
    MoveLiquidityEvent.InputTuple,
    MoveLiquidityEvent.OutputTuple,
    MoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "RedeemPosition"
  ): TypedContractEvent<
    RedeemPositionEvent.InputTuple,
    RedeemPositionEvent.OutputTuple,
    RedeemPositionEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Burn(address,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "MemorializePosition(address,uint256,uint256[])": TypedContractEvent<
      MemorializePositionEvent.InputTuple,
      MemorializePositionEvent.OutputTuple,
      MemorializePositionEvent.OutputObject
    >;
    MemorializePosition: TypedContractEvent<
      MemorializePositionEvent.InputTuple,
      MemorializePositionEvent.OutputTuple,
      MemorializePositionEvent.OutputObject
    >;

    "Mint(address,address,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "MoveLiquidity(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MoveLiquidityEvent.InputTuple,
      MoveLiquidityEvent.OutputTuple,
      MoveLiquidityEvent.OutputObject
    >;
    MoveLiquidity: TypedContractEvent<
      MoveLiquidityEvent.InputTuple,
      MoveLiquidityEvent.OutputTuple,
      MoveLiquidityEvent.OutputObject
    >;

    "RedeemPosition(address,uint256,uint256[])": TypedContractEvent<
      RedeemPositionEvent.InputTuple,
      RedeemPositionEvent.OutputTuple,
      RedeemPositionEvent.OutputObject
    >;
    RedeemPosition: TypedContractEvent<
      RedeemPositionEvent.InputTuple,
      RedeemPositionEvent.OutputTuple,
      RedeemPositionEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
