/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface ExampleCloneInterface extends utils.Interface {
  functions: {
    "param1()": FunctionFragment;
    "param2()": FunctionFragment;
    "param3()": FunctionFragment;
    "param4()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "param1" | "param2" | "param3" | "param4"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "param1", values?: undefined): string;
  encodeFunctionData(functionFragment: "param2", values?: undefined): string;
  encodeFunctionData(functionFragment: "param3", values?: undefined): string;
  encodeFunctionData(functionFragment: "param4", values?: undefined): string;

  decodeFunctionResult(functionFragment: "param1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "param2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "param3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "param4", data: BytesLike): Result;

  events: {};
}

export interface ExampleClone extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExampleCloneInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    param1(overrides?: CallOverrides): Promise<[string]>;

    param2(overrides?: CallOverrides): Promise<[BigNumber]>;

    param3(overrides?: CallOverrides): Promise<[BigNumber]>;

    param4(overrides?: CallOverrides): Promise<[number]>;
  };

  param1(overrides?: CallOverrides): Promise<string>;

  param2(overrides?: CallOverrides): Promise<BigNumber>;

  param3(overrides?: CallOverrides): Promise<BigNumber>;

  param4(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    param1(overrides?: CallOverrides): Promise<string>;

    param2(overrides?: CallOverrides): Promise<BigNumber>;

    param3(overrides?: CallOverrides): Promise<BigNumber>;

    param4(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    param1(overrides?: CallOverrides): Promise<BigNumber>;

    param2(overrides?: CallOverrides): Promise<BigNumber>;

    param3(overrides?: CallOverrides): Promise<BigNumber>;

    param4(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    param1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    param2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    param3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    param4(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
