/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type MarketParamsStruct = {
  loanToken: PromiseOrValue<string>;
  collateralToken: PromiseOrValue<string>;
  oracle: PromiseOrValue<string>;
  irm: PromiseOrValue<string>;
  lltv: PromiseOrValue<BigNumberish>;
};

export type MarketParamsStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber
] & {
  loanToken: string;
  collateralToken: string;
  oracle: string;
  irm: string;
  lltv: BigNumber;
};

export type MarketStruct = {
  totalSupplyAssets: PromiseOrValue<BigNumberish>;
  totalSupplyShares: PromiseOrValue<BigNumberish>;
  totalBorrowAssets: PromiseOrValue<BigNumberish>;
  totalBorrowShares: PromiseOrValue<BigNumberish>;
  lastUpdate: PromiseOrValue<BigNumberish>;
  fee: PromiseOrValue<BigNumberish>;
};

export type MarketStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  totalSupplyAssets: BigNumber;
  totalSupplyShares: BigNumber;
  totalBorrowAssets: BigNumber;
  totalBorrowShares: BigNumber;
  lastUpdate: BigNumber;
  fee: BigNumber;
};

export interface IrmMockInterface extends utils.Interface {
  functions: {
    "borrowRate((address,address,address,address,uint256),(uint128,uint128,uint128,uint128,uint128,uint128))": FunctionFragment;
    "borrowRateView((address,address,address,address,uint256),(uint128,uint128,uint128,uint128,uint128,uint128))": FunctionFragment;
    "forcedRate()": FunctionFragment;
    "forcedRateEnabled()": FunctionFragment;
    "setForcedRate(uint256)": FunctionFragment;
    "setForcedRateEnabled(bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowRate"
      | "borrowRateView"
      | "forcedRate"
      | "forcedRateEnabled"
      | "setForcedRate"
      | "setForcedRateEnabled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowRate",
    values: [MarketParamsStruct, MarketStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRateView",
    values: [MarketParamsStruct, MarketStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forcedRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forcedRateEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setForcedRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setForcedRateEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "borrowRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowRateView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forcedRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forcedRateEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForcedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForcedRateEnabled",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IrmMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IrmMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowRate(
      marketParams: MarketParamsStruct,
      market: MarketStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowRateView(
      arg0: MarketParamsStruct,
      market: MarketStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forcedRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    forcedRateEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    setForcedRate(
      _forcedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setForcedRateEnabled(
      _forcedRateEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  borrowRate(
    marketParams: MarketParamsStruct,
    market: MarketStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowRateView(
    arg0: MarketParamsStruct,
    market: MarketStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forcedRate(overrides?: CallOverrides): Promise<BigNumber>;

  forcedRateEnabled(overrides?: CallOverrides): Promise<boolean>;

  setForcedRate(
    _forcedRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setForcedRateEnabled(
    _forcedRateEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowRate(
      marketParams: MarketParamsStruct,
      market: MarketStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowRateView(
      arg0: MarketParamsStruct,
      market: MarketStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forcedRate(overrides?: CallOverrides): Promise<BigNumber>;

    forcedRateEnabled(overrides?: CallOverrides): Promise<boolean>;

    setForcedRate(
      _forcedRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setForcedRateEnabled(
      _forcedRateEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrowRate(
      marketParams: MarketParamsStruct,
      market: MarketStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowRateView(
      arg0: MarketParamsStruct,
      market: MarketStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forcedRate(overrides?: CallOverrides): Promise<BigNumber>;

    forcedRateEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    setForcedRate(
      _forcedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setForcedRateEnabled(
      _forcedRateEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowRate(
      marketParams: MarketParamsStruct,
      market: MarketStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowRateView(
      arg0: MarketParamsStruct,
      market: MarketStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forcedRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forcedRateEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setForcedRate(
      _forcedRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setForcedRateEnabled(
      _forcedRateEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
