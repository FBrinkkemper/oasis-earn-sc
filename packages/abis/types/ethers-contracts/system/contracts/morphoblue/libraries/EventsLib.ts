/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type MarketParamsStruct = {
  loanToken: PromiseOrValue<string>;
  collateralToken: PromiseOrValue<string>;
  oracle: PromiseOrValue<string>;
  irm: PromiseOrValue<string>;
  lltv: PromiseOrValue<BigNumberish>;
};

export type MarketParamsStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber
] & {
  loanToken: string;
  collateralToken: string;
  oracle: string;
  irm: string;
  lltv: BigNumber;
};

export interface EventsLibInterface extends utils.Interface {
  functions: {};

  events: {
    "AccrueInterest(bytes32,uint256,uint256,uint256)": EventFragment;
    "Borrow(bytes32,address,address,address,uint256,uint256)": EventFragment;
    "CreateMarket(bytes32,tuple)": EventFragment;
    "EnableIrm(address)": EventFragment;
    "EnableLltv(uint256)": EventFragment;
    "FlashLoan(address,address,uint256)": EventFragment;
    "IncrementNonce(address,address,uint256)": EventFragment;
    "Liquidate(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Repay(bytes32,address,address,uint256,uint256)": EventFragment;
    "SetAuthorization(address,address,address,bool)": EventFragment;
    "SetFee(bytes32,uint256)": EventFragment;
    "SetFeeRecipient(address)": EventFragment;
    "SetOwner(address)": EventFragment;
    "Supply(bytes32,address,address,uint256,uint256)": EventFragment;
    "SupplyCollateral(bytes32,address,address,uint256)": EventFragment;
    "Withdraw(bytes32,address,address,address,uint256,uint256)": EventFragment;
    "WithdrawCollateral(bytes32,address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableIrm"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableLltv"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncrementNonce"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
}

export interface AccrueInterestEventObject {
  id: string;
  prevBorrowRate: BigNumber;
  interest: BigNumber;
  feeShares: BigNumber;
}
export type AccrueInterestEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AccrueInterestEventObject
>;

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>;

export interface BorrowEventObject {
  id: string;
  caller: string;
  onBehalf: string;
  receiver: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface CreateMarketEventObject {
  id: string;
  marketParams: MarketParamsStructOutput;
}
export type CreateMarketEvent = TypedEvent<
  [string, MarketParamsStructOutput],
  CreateMarketEventObject
>;

export type CreateMarketEventFilter = TypedEventFilter<CreateMarketEvent>;

export interface EnableIrmEventObject {
  irm: string;
}
export type EnableIrmEvent = TypedEvent<[string], EnableIrmEventObject>;

export type EnableIrmEventFilter = TypedEventFilter<EnableIrmEvent>;

export interface EnableLltvEventObject {
  lltv: BigNumber;
}
export type EnableLltvEvent = TypedEvent<[BigNumber], EnableLltvEventObject>;

export type EnableLltvEventFilter = TypedEventFilter<EnableLltvEvent>;

export interface FlashLoanEventObject {
  caller: string;
  token: string;
  assets: BigNumber;
}
export type FlashLoanEvent = TypedEvent<
  [string, string, BigNumber],
  FlashLoanEventObject
>;

export type FlashLoanEventFilter = TypedEventFilter<FlashLoanEvent>;

export interface IncrementNonceEventObject {
  caller: string;
  authorizer: string;
  usedNonce: BigNumber;
}
export type IncrementNonceEvent = TypedEvent<
  [string, string, BigNumber],
  IncrementNonceEventObject
>;

export type IncrementNonceEventFilter = TypedEventFilter<IncrementNonceEvent>;

export interface LiquidateEventObject {
  id: string;
  caller: string;
  borrower: string;
  repaidAssets: BigNumber;
  repaidShares: BigNumber;
  seizedAssets: BigNumber;
  badDebtShares: BigNumber;
}
export type LiquidateEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface RepayEventObject {
  id: string;
  caller: string;
  onBehalf: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type RepayEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  RepayEventObject
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface SetAuthorizationEventObject {
  caller: string;
  authorizer: string;
  authorized: string;
  newIsAuthorized: boolean;
}
export type SetAuthorizationEvent = TypedEvent<
  [string, string, string, boolean],
  SetAuthorizationEventObject
>;

export type SetAuthorizationEventFilter =
  TypedEventFilter<SetAuthorizationEvent>;

export interface SetFeeEventObject {
  id: string;
  newFee: BigNumber;
}
export type SetFeeEvent = TypedEvent<[string, BigNumber], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetFeeRecipientEventObject {
  newFeeRecipient: string;
}
export type SetFeeRecipientEvent = TypedEvent<
  [string],
  SetFeeRecipientEventObject
>;

export type SetFeeRecipientEventFilter = TypedEventFilter<SetFeeRecipientEvent>;

export interface SetOwnerEventObject {
  newOwner: string;
}
export type SetOwnerEvent = TypedEvent<[string], SetOwnerEventObject>;

export type SetOwnerEventFilter = TypedEventFilter<SetOwnerEvent>;

export interface SupplyEventObject {
  id: string;
  caller: string;
  onBehalf: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type SupplyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  SupplyEventObject
>;

export type SupplyEventFilter = TypedEventFilter<SupplyEvent>;

export interface SupplyCollateralEventObject {
  id: string;
  caller: string;
  onBehalf: string;
  assets: BigNumber;
}
export type SupplyCollateralEvent = TypedEvent<
  [string, string, string, BigNumber],
  SupplyCollateralEventObject
>;

export type SupplyCollateralEventFilter =
  TypedEventFilter<SupplyCollateralEvent>;

export interface WithdrawEventObject {
  id: string;
  caller: string;
  onBehalf: string;
  receiver: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawCollateralEventObject {
  id: string;
  caller: string;
  onBehalf: string;
  receiver: string;
  assets: BigNumber;
}
export type WithdrawCollateralEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  WithdrawCollateralEventObject
>;

export type WithdrawCollateralEventFilter =
  TypedEventFilter<WithdrawCollateralEvent>;

export interface EventsLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AccrueInterest(bytes32,uint256,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      prevBorrowRate?: null,
      interest?: null,
      feeShares?: null
    ): AccrueInterestEventFilter;
    AccrueInterest(
      id?: PromiseOrValue<BytesLike> | null,
      prevBorrowRate?: null,
      interest?: null,
      feeShares?: null
    ): AccrueInterestEventFilter;

    "Borrow(bytes32,address,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: null,
      onBehalf?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): BorrowEventFilter;
    Borrow(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: null,
      onBehalf?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): BorrowEventFilter;

    "CreateMarket(bytes32,tuple)"(
      id?: PromiseOrValue<BytesLike> | null,
      marketParams?: null
    ): CreateMarketEventFilter;
    CreateMarket(
      id?: PromiseOrValue<BytesLike> | null,
      marketParams?: null
    ): CreateMarketEventFilter;

    "EnableIrm(address)"(
      irm?: PromiseOrValue<string> | null
    ): EnableIrmEventFilter;
    EnableIrm(irm?: PromiseOrValue<string> | null): EnableIrmEventFilter;

    "EnableLltv(uint256)"(lltv?: null): EnableLltvEventFilter;
    EnableLltv(lltv?: null): EnableLltvEventFilter;

    "FlashLoan(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      assets?: null
    ): FlashLoanEventFilter;
    FlashLoan(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      assets?: null
    ): FlashLoanEventFilter;

    "IncrementNonce(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      authorizer?: PromiseOrValue<string> | null,
      usedNonce?: null
    ): IncrementNonceEventFilter;
    IncrementNonce(
      caller?: PromiseOrValue<string> | null,
      authorizer?: PromiseOrValue<string> | null,
      usedNonce?: null
    ): IncrementNonceEventFilter;

    "Liquidate(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      repaidAssets?: null,
      repaidShares?: null,
      seizedAssets?: null,
      badDebtShares?: null
    ): LiquidateEventFilter;
    Liquidate(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      repaidAssets?: null,
      repaidShares?: null,
      seizedAssets?: null,
      badDebtShares?: null
    ): LiquidateEventFilter;

    "Repay(bytes32,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      onBehalf?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): RepayEventFilter;
    Repay(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      onBehalf?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): RepayEventFilter;

    "SetAuthorization(address,address,address,bool)"(
      caller?: PromiseOrValue<string> | null,
      authorizer?: PromiseOrValue<string> | null,
      authorized?: PromiseOrValue<string> | null,
      newIsAuthorized?: null
    ): SetAuthorizationEventFilter;
    SetAuthorization(
      caller?: PromiseOrValue<string> | null,
      authorizer?: PromiseOrValue<string> | null,
      authorized?: PromiseOrValue<string> | null,
      newIsAuthorized?: null
    ): SetAuthorizationEventFilter;

    "SetFee(bytes32,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      newFee?: null
    ): SetFeeEventFilter;
    SetFee(
      id?: PromiseOrValue<BytesLike> | null,
      newFee?: null
    ): SetFeeEventFilter;

    "SetFeeRecipient(address)"(
      newFeeRecipient?: PromiseOrValue<string> | null
    ): SetFeeRecipientEventFilter;
    SetFeeRecipient(
      newFeeRecipient?: PromiseOrValue<string> | null
    ): SetFeeRecipientEventFilter;

    "SetOwner(address)"(
      newOwner?: PromiseOrValue<string> | null
    ): SetOwnerEventFilter;
    SetOwner(newOwner?: PromiseOrValue<string> | null): SetOwnerEventFilter;

    "Supply(bytes32,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      onBehalf?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): SupplyEventFilter;
    Supply(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      onBehalf?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): SupplyEventFilter;

    "SupplyCollateral(bytes32,address,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      onBehalf?: PromiseOrValue<string> | null,
      assets?: null
    ): SupplyCollateralEventFilter;
    SupplyCollateral(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: PromiseOrValue<string> | null,
      onBehalf?: PromiseOrValue<string> | null,
      assets?: null
    ): SupplyCollateralEventFilter;

    "Withdraw(bytes32,address,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: null,
      onBehalf?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: null,
      onBehalf?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;

    "WithdrawCollateral(bytes32,address,address,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: null,
      onBehalf?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      assets?: null
    ): WithdrawCollateralEventFilter;
    WithdrawCollateral(
      id?: PromiseOrValue<BytesLike> | null,
      caller?: null,
      onBehalf?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      assets?: null
    ): WithdrawCollateralEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
