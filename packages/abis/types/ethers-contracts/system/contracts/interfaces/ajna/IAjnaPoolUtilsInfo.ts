/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IAjnaPoolUtilsInfoInterface extends utils.Interface {
  functions: {
    "borrowerInfo(address,address)": FunctionFragment;
    "bucketInfo(address,uint256)": FunctionFragment;
    "lpToQuoteTokens(address,uint256,uint256)": FunctionFragment;
    "poolPricesInfo(address)": FunctionFragment;
    "priceToIndex(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowerInfo"
      | "bucketInfo"
      | "lpToQuoteTokens"
      | "poolPricesInfo"
      | "priceToIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowerInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bucketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpToQuoteTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "poolPricesInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceToIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bucketInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpToQuoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolPricesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceToIndex",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAjnaPoolUtilsInfo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAjnaPoolUtilsInfoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowerInfo(
      pool_: PromiseOrValue<string>,
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        debt_: BigNumber;
        collateral_: BigNumber;
        index_: BigNumber;
      }
    >;

    bucketInfo(
      ajnaPool_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price_: BigNumber;
        quoteTokens_: BigNumber;
        collateral_: BigNumber;
        bucketLP_: BigNumber;
        scale_: BigNumber;
        exchangeRate_: BigNumber;
      }
    >;

    lpToQuoteTokens(
      ajnaPool_: PromiseOrValue<string>,
      lp_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteAmount_: BigNumber }>;

    poolPricesInfo(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        hpb_: BigNumber;
        hpbIndex_: BigNumber;
        htp_: BigNumber;
        htpIndex_: BigNumber;
        lup_: BigNumber;
        lupIndex_: BigNumber;
      }
    >;

    priceToIndex(
      price_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  borrowerInfo(
    pool_: PromiseOrValue<string>,
    borrower_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      debt_: BigNumber;
      collateral_: BigNumber;
      index_: BigNumber;
    }
  >;

  bucketInfo(
    ajnaPool_: PromiseOrValue<string>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      price_: BigNumber;
      quoteTokens_: BigNumber;
      collateral_: BigNumber;
      bucketLP_: BigNumber;
      scale_: BigNumber;
      exchangeRate_: BigNumber;
    }
  >;

  lpToQuoteTokens(
    ajnaPool_: PromiseOrValue<string>,
    lp_: PromiseOrValue<BigNumberish>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolPricesInfo(
    ajnaPool_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      hpb_: BigNumber;
      hpbIndex_: BigNumber;
      htp_: BigNumber;
      htpIndex_: BigNumber;
      lup_: BigNumber;
      lupIndex_: BigNumber;
    }
  >;

  priceToIndex(
    price_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    borrowerInfo(
      pool_: PromiseOrValue<string>,
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        debt_: BigNumber;
        collateral_: BigNumber;
        index_: BigNumber;
      }
    >;

    bucketInfo(
      ajnaPool_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price_: BigNumber;
        quoteTokens_: BigNumber;
        collateral_: BigNumber;
        bucketLP_: BigNumber;
        scale_: BigNumber;
        exchangeRate_: BigNumber;
      }
    >;

    lpToQuoteTokens(
      ajnaPool_: PromiseOrValue<string>,
      lp_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolPricesInfo(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        hpb_: BigNumber;
        hpbIndex_: BigNumber;
        htp_: BigNumber;
        htpIndex_: BigNumber;
        lup_: BigNumber;
        lupIndex_: BigNumber;
      }
    >;

    priceToIndex(
      price_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    borrowerInfo(
      pool_: PromiseOrValue<string>,
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bucketInfo(
      ajnaPool_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpToQuoteTokens(
      ajnaPool_: PromiseOrValue<string>,
      lp_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolPricesInfo(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceToIndex(
      price_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowerInfo(
      pool_: PromiseOrValue<string>,
      borrower_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bucketInfo(
      ajnaPool_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToQuoteTokens(
      ajnaPool_: PromiseOrValue<string>,
      lp_: PromiseOrValue<BigNumberish>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolPricesInfo(
      ajnaPool_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceToIndex(
      price_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
