/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IVatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "can"
      | "dai"
      | "fork"
      | "frob"
      | "gem"
      | "hope"
      | "ilks"
      | "move"
      | "urns"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "can",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dai", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "fork",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frob",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gem",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hope", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "ilks", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "urns",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "can", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hope", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urns", data: BytesLike): Result;
}

export interface IVat extends BaseContract {
  connect(runner?: ContractRunner | null): IVat;
  waitForDeployment(): Promise<this>;

  interface: IVatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  can: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  dai: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  fork: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      arg4: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  frob: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: AddressLike,
      arg4: BigNumberish,
      arg5: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  gem: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  hope: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  ilks: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        Art: bigint;
        rate: bigint;
        spot: bigint;
        line: bigint;
        dust: bigint;
      }
    ],
    "view"
  >;

  move: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;

  urns: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [[bigint, bigint] & { ink: bigint; art: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "can"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "dai"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fork"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      arg4: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "frob"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: AddressLike,
      arg4: BigNumberish,
      arg5: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gem"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hope"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ilks"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        Art: bigint;
        rate: bigint;
        spot: bigint;
        line: bigint;
        dust: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "urns"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [[bigint, bigint] & { ink: bigint; art: bigint }],
    "view"
  >;

  filters: {};
}
