/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cdpAllow"
      | "cdpCan"
      | "enter"
      | "exit"
      | "flux"
      | "frob"
      | "give"
      | "ilks"
      | "last"
      | "move"
      | "open"
      | "owns"
      | "quit"
      | "shift"
      | "urnAllow"
      | "urns"
      | "vat"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cdpAllow",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cdpCan",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flux",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frob",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ilks", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "last", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owns", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shift",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "urnAllow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "urns", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cdpAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cdpCan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flux", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "last", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urnAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
}

export interface IManager extends BaseContract {
  connect(runner?: ContractRunner | null): IManager;
  waitForDeployment(): Promise<this>;

  interface: IManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cdpAllow: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;

  cdpCan: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;

  enter: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  exit: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: AddressLike,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  flux: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;

  frob: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;

  give: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [void],
    "nonpayable"
  >;

  ilks: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  last: TypedContractMethod<[arg0: AddressLike], [bigint], "nonpayable">;

  move: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;

  open: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "nonpayable"
  >;

  owns: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  quit: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [void],
    "nonpayable"
  >;

  shift: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  urnAllow: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  urns: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  vat: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cdpAllow"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cdpCan"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "enter"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exit"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: AddressLike,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flux"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "frob"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "give"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ilks"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "last"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "open"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owns"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "quit"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shift"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "urnAllow"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "urns"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "vat"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
