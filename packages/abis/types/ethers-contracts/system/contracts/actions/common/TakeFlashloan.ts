/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type CallStruct = {
  targetHash: BytesLike;
  callData: BytesLike;
  skipped: boolean;
};

export type CallStructOutput = [
  targetHash: string,
  callData: string,
  skipped: boolean
] & { targetHash: string; callData: string; skipped: boolean };

export type FlashloanDataStruct = {
  amount: BigNumberish;
  asset: AddressLike;
  isProxyFlashloan: boolean;
  isDPMProxy: boolean;
  provider: BigNumberish;
  calls: CallStruct[];
};

export type FlashloanDataStructOutput = [
  amount: bigint,
  asset: string,
  isProxyFlashloan: boolean,
  isDPMProxy: boolean,
  provider: bigint,
  calls: CallStructOutput[]
] & {
  amount: bigint;
  asset: string;
  isProxyFlashloan: boolean;
  isDPMProxy: boolean;
  provider: bigint;
  calls: CallStructOutput[];
};

export interface TakeFlashloanInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALLOWED_METHOD_HASH"
      | "execute"
      | "givePermission"
      | "parseInputs"
      | "removePermission"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ALLOWED_METHOD_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "givePermission",
    values: [boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseInputs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removePermission",
    values: [boolean, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ALLOWED_METHOD_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "givePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseInputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePermission",
    data: BytesLike
  ): Result;
}

export interface TakeFlashloan extends BaseContract {
  connect(runner?: ContractRunner | null): TakeFlashloan;
  waitForDeployment(): Promise<this>;

  interface: TakeFlashloanInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALLOWED_METHOD_HASH: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [data: BytesLike, arg1: BigNumberish[]],
    [void],
    "payable"
  >;

  givePermission: TypedContractMethod<
    [isDPMProxy: boolean, _contractAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  parseInputs: TypedContractMethod<
    [_callData: BytesLike],
    [FlashloanDataStructOutput],
    "view"
  >;

  removePermission: TypedContractMethod<
    [isDPMProxy: boolean, _contractAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALLOWED_METHOD_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [data: BytesLike, arg1: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "givePermission"
  ): TypedContractMethod<
    [isDPMProxy: boolean, _contractAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "parseInputs"
  ): TypedContractMethod<
    [_callData: BytesLike],
    [FlashloanDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "removePermission"
  ): TypedContractMethod<
    [isDPMProxy: boolean, _contractAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
