/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type RepayWithdrawDataStruct = {
  quoteToken: PromiseOrValue<string>;
  collateralToken: PromiseOrValue<string>;
  withdrawAmount: PromiseOrValue<BigNumberish>;
  repayAmount: PromiseOrValue<BigNumberish>;
  paybackAll: PromiseOrValue<boolean>;
  withdrawAll: PromiseOrValue<boolean>;
  price: PromiseOrValue<BigNumberish>;
};

export type RepayWithdrawDataStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  BigNumber
] & {
  quoteToken: string;
  collateralToken: string;
  withdrawAmount: BigNumber;
  repayAmount: BigNumber;
  paybackAll: boolean;
  withdrawAll: boolean;
  price: BigNumber;
};

export interface AjnaRepayWithdrawInterface extends utils.Interface {
  functions: {
    "erc20PoolFactory()": FunctionFragment;
    "execute(bytes,uint8[])": FunctionFragment;
    "parseInputs(bytes)": FunctionFragment;
    "poolUtilsInfo()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "erc20PoolFactory"
      | "execute"
      | "parseInputs"
      | "poolUtilsInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "erc20PoolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "parseInputs",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolUtilsInfo",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "erc20PoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseInputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolUtilsInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AjnaRepayWithdraw extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AjnaRepayWithdrawInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    erc20PoolFactory(overrides?: CallOverrides): Promise<[string]>;

    execute(
      data: PromiseOrValue<BytesLike>,
      paramsMap: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    parseInputs(
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [RepayWithdrawDataStructOutput] & {
        params: RepayWithdrawDataStructOutput;
      }
    >;

    poolUtilsInfo(overrides?: CallOverrides): Promise<[string]>;
  };

  erc20PoolFactory(overrides?: CallOverrides): Promise<string>;

  execute(
    data: PromiseOrValue<BytesLike>,
    paramsMap: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  parseInputs(
    _callData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<RepayWithdrawDataStructOutput>;

  poolUtilsInfo(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    erc20PoolFactory(overrides?: CallOverrides): Promise<string>;

    execute(
      data: PromiseOrValue<BytesLike>,
      paramsMap: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    parseInputs(
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<RepayWithdrawDataStructOutput>;

    poolUtilsInfo(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    erc20PoolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      data: PromiseOrValue<BytesLike>,
      paramsMap: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    parseInputs(
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolUtilsInfo(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    erc20PoolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      data: PromiseOrValue<BytesLike>,
      paramsMap: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    parseInputs(
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolUtilsInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
