/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../../common";

export interface DSGuardEventsInterface extends Interface {
  getEvent(nameOrSignatureOrTopic: "LogPermit" | "LogForbid"): EventFragment;
}

export namespace LogPermitEvent {
  export type InputTuple = [src: BytesLike, dst: BytesLike, sig: BytesLike];
  export type OutputTuple = [src: string, dst: string, sig: string];
  export interface OutputObject {
    src: string;
    dst: string;
    sig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogForbidEvent {
  export type InputTuple = [src: BytesLike, dst: BytesLike, sig: BytesLike];
  export type OutputTuple = [src: string, dst: string, sig: string];
  export interface OutputObject {
    src: string;
    dst: string;
    sig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DSGuardEvents extends BaseContract {
  connect(runner?: ContractRunner | null): DSGuardEvents;
  waitForDeployment(): Promise<this>;

  interface: DSGuardEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "LogPermit"
  ): TypedContractEvent<
    LogPermitEvent.InputTuple,
    LogPermitEvent.OutputTuple,
    LogPermitEvent.OutputObject
  >;
  getEvent(
    key: "LogForbid"
  ): TypedContractEvent<
    LogForbidEvent.InputTuple,
    LogForbidEvent.OutputTuple,
    LogForbidEvent.OutputObject
  >;

  filters: {
    "LogPermit(bytes32,bytes32,bytes32)": TypedContractEvent<
      LogPermitEvent.InputTuple,
      LogPermitEvent.OutputTuple,
      LogPermitEvent.OutputObject
    >;
    LogPermit: TypedContractEvent<
      LogPermitEvent.InputTuple,
      LogPermitEvent.OutputTuple,
      LogPermitEvent.OutputObject
    >;

    "LogForbid(bytes32,bytes32,bytes32)": TypedContractEvent<
      LogForbidEvent.InputTuple,
      LogForbidEvent.OutputTuple,
      LogForbidEvent.OutputObject
    >;
    LogForbid: TypedContractEvent<
      LogForbidEvent.InputTuple,
      LogForbidEvent.OutputTuple,
      LogForbidEvent.OutputObject
    >;
  };
}
