/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface DSGuardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "setOwner"
      | "forbid(address,address,bytes32)"
      | "forbid(bytes32,bytes32,bytes32)"
      | "setAuthority"
      | "owner"
      | "ANY"
      | "canCall"
      | "authority"
      | "permit(address,address,bytes32)"
      | "permit(bytes32,bytes32,bytes32)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogPermit"
      | "LogForbid"
      | "LogSetAuthority"
      | "LogSetOwner"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forbid(address,address,bytes32)",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forbid(bytes32,bytes32,bytes32)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ANY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canCall",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,bytes32)",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(bytes32,bytes32,bytes32)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forbid(address,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forbid(bytes32,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ANY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permit(bytes32,bytes32,bytes32)",
    data: BytesLike
  ): Result;
}

export namespace LogPermitEvent {
  export type InputTuple = [src: BytesLike, dst: BytesLike, sig: BytesLike];
  export type OutputTuple = [src: string, dst: string, sig: string];
  export interface OutputObject {
    src: string;
    dst: string;
    sig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogForbidEvent {
  export type InputTuple = [src: BytesLike, dst: BytesLike, sig: BytesLike];
  export type OutputTuple = [src: string, dst: string, sig: string];
  export interface OutputObject {
    src: string;
    dst: string;
    sig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetAuthorityEvent {
  export type InputTuple = [authority: AddressLike];
  export type OutputTuple = [authority: string];
  export interface OutputObject {
    authority: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetOwnerEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DSGuard extends BaseContract {
  connect(runner?: ContractRunner | null): DSGuard;
  waitForDeployment(): Promise<this>;

  interface: DSGuardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setOwner: TypedContractMethod<[owner_: AddressLike], [void], "nonpayable">;

  "forbid(address,address,bytes32)": TypedContractMethod<
    [src: AddressLike, dst: AddressLike, sig: BytesLike],
    [void],
    "nonpayable"
  >;

  "forbid(bytes32,bytes32,bytes32)": TypedContractMethod<
    [src: BytesLike, dst: BytesLike, sig: BytesLike],
    [void],
    "nonpayable"
  >;

  setAuthority: TypedContractMethod<
    [authority_: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ANY: TypedContractMethod<[], [string], "view">;

  canCall: TypedContractMethod<
    [src_: AddressLike, dst_: AddressLike, sig: BytesLike],
    [boolean],
    "view"
  >;

  authority: TypedContractMethod<[], [string], "view">;

  "permit(address,address,bytes32)": TypedContractMethod<
    [src: AddressLike, dst: AddressLike, sig: BytesLike],
    [void],
    "nonpayable"
  >;

  "permit(bytes32,bytes32,bytes32)": TypedContractMethod<
    [src: BytesLike, dst: BytesLike, sig: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[owner_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forbid(address,address,bytes32)"
  ): TypedContractMethod<
    [src: AddressLike, dst: AddressLike, sig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forbid(bytes32,bytes32,bytes32)"
  ): TypedContractMethod<
    [src: BytesLike, dst: BytesLike, sig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthority"
  ): TypedContractMethod<[authority_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ANY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "canCall"
  ): TypedContractMethod<
    [src_: AddressLike, dst_: AddressLike, sig: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "authority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit(address,address,bytes32)"
  ): TypedContractMethod<
    [src: AddressLike, dst: AddressLike, sig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permit(bytes32,bytes32,bytes32)"
  ): TypedContractMethod<
    [src: BytesLike, dst: BytesLike, sig: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LogPermit"
  ): TypedContractEvent<
    LogPermitEvent.InputTuple,
    LogPermitEvent.OutputTuple,
    LogPermitEvent.OutputObject
  >;
  getEvent(
    key: "LogForbid"
  ): TypedContractEvent<
    LogForbidEvent.InputTuple,
    LogForbidEvent.OutputTuple,
    LogForbidEvent.OutputObject
  >;
  getEvent(
    key: "LogSetAuthority"
  ): TypedContractEvent<
    LogSetAuthorityEvent.InputTuple,
    LogSetAuthorityEvent.OutputTuple,
    LogSetAuthorityEvent.OutputObject
  >;
  getEvent(
    key: "LogSetOwner"
  ): TypedContractEvent<
    LogSetOwnerEvent.InputTuple,
    LogSetOwnerEvent.OutputTuple,
    LogSetOwnerEvent.OutputObject
  >;

  filters: {
    "LogPermit(bytes32,bytes32,bytes32)": TypedContractEvent<
      LogPermitEvent.InputTuple,
      LogPermitEvent.OutputTuple,
      LogPermitEvent.OutputObject
    >;
    LogPermit: TypedContractEvent<
      LogPermitEvent.InputTuple,
      LogPermitEvent.OutputTuple,
      LogPermitEvent.OutputObject
    >;

    "LogForbid(bytes32,bytes32,bytes32)": TypedContractEvent<
      LogForbidEvent.InputTuple,
      LogForbidEvent.OutputTuple,
      LogForbidEvent.OutputObject
    >;
    LogForbid: TypedContractEvent<
      LogForbidEvent.InputTuple,
      LogForbidEvent.OutputTuple,
      LogForbidEvent.OutputObject
    >;

    "LogSetAuthority(address)": TypedContractEvent<
      LogSetAuthorityEvent.InputTuple,
      LogSetAuthorityEvent.OutputTuple,
      LogSetAuthorityEvent.OutputObject
    >;
    LogSetAuthority: TypedContractEvent<
      LogSetAuthorityEvent.InputTuple,
      LogSetAuthorityEvent.OutputTuple,
      LogSetAuthorityEvent.OutputObject
    >;

    "LogSetOwner(address)": TypedContractEvent<
      LogSetOwnerEvent.InputTuple,
      LogSetOwnerEvent.OutputTuple,
      LogSetOwnerEvent.OutputObject
    >;
    LogSetOwner: TypedContractEvent<
      LogSetOwnerEvent.InputTuple,
      LogSetOwnerEvent.OutputTuple,
      LogSetOwnerEvent.OutputObject
    >;
  };
}
