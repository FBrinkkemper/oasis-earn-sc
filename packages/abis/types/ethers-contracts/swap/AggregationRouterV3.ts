/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace AggregationRouterV3 {
  export type SwapDescriptionStruct = {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
    permit: BytesLike;
  };

  export type SwapDescriptionStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: BigNumber;
    minReturnAmount: BigNumber;
    flags: BigNumber;
    permit: string;
  };
}

export interface AggregationRouterV3Interface extends utils.Interface {
  functions: {
    "destroy()": FunctionFragment;
    "discountedSwap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueFunds(address,uint256)": FunctionFragment;
    "swap(address,(address,address,address,address,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unoswap(address,uint256,uint256,bytes32[])": FunctionFragment;
    "unoswapWithPermit(address,uint256,uint256,bytes32[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "destroy"
      | "discountedSwap"
      | "owner"
      | "renounceOwnership"
      | "rescueFunds"
      | "swap"
      | "transferOwnership"
      | "unoswap"
      | "unoswapWithPermit"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "discountedSwap",
    values: [string, AggregationRouterV3.SwapDescriptionStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFunds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, AggregationRouterV3.SwapDescriptionStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswap",
    values: [string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswapWithPermit",
    values: [string, BigNumberish, BigNumberish, BytesLike[], BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unoswap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unoswapWithPermit",
    data: BytesLike
  ): Result;

  events: {
    "Error(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Swapped(address,address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Error"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
}

export interface ErrorEventObject {
  reason: string;
}
export type ErrorEvent = TypedEvent<[string], ErrorEventObject>;

export type ErrorEventFilter = TypedEventFilter<ErrorEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwappedEventObject {
  sender: string;
  srcToken: string;
  dstToken: string;
  dstReceiver: string;
  spentAmount: BigNumber;
  returnAmount: BigNumber;
}
export type SwappedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  SwappedEventObject
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

export interface AggregationRouterV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AggregationRouterV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    destroy(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    discountedSwap(
      caller: string,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swap(
      caller: string,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unoswap(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    unoswapWithPermit(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  destroy(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  discountedSwap(
    caller: string,
    desc: AggregationRouterV3.SwapDescriptionStruct,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rescueFunds(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swap(
    caller: string,
    desc: AggregationRouterV3.SwapDescriptionStruct,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unoswap(
    srcToken: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    arg3: BytesLike[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  unoswapWithPermit(
    srcToken: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    pools: BytesLike[],
    permit: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    destroy(overrides?: CallOverrides): Promise<void>;

    discountedSwap(
      caller: string,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        returnAmount: BigNumber;
        gasLeft: BigNumber;
        chiSpent: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      caller: string,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { returnAmount: BigNumber; gasLeft: BigNumber }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unoswap(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unoswapWithPermit(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Error(string)"(reason?: null): ErrorEventFilter;
    Error(reason?: null): ErrorEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Swapped(address,address,address,address,uint256,uint256)"(
      sender?: null,
      srcToken?: null,
      dstToken?: null,
      dstReceiver?: null,
      spentAmount?: null,
      returnAmount?: null
    ): SwappedEventFilter;
    Swapped(
      sender?: null,
      srcToken?: null,
      dstToken?: null,
      dstReceiver?: null,
      spentAmount?: null,
      returnAmount?: null
    ): SwappedEventFilter;
  };

  estimateGas: {
    destroy(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    discountedSwap(
      caller: string,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swap(
      caller: string,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unoswap(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    unoswapWithPermit(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    destroy(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    discountedSwap(
      caller: string,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swap(
      caller: string,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unoswap(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unoswapWithPermit(
      srcToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
