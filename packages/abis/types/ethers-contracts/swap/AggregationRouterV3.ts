/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AggregationRouterV3 {
  export type SwapDescriptionStruct = {
    srcToken: AddressLike;
    dstToken: AddressLike;
    srcReceiver: AddressLike;
    dstReceiver: AddressLike;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
    permit: BytesLike;
  };

  export type SwapDescriptionStructOutput = [
    srcToken: string,
    dstToken: string,
    srcReceiver: string,
    dstReceiver: string,
    amount: bigint,
    minReturnAmount: bigint,
    flags: bigint,
    permit: string
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: bigint;
    minReturnAmount: bigint;
    flags: bigint;
    permit: string;
  };
}

export interface AggregationRouterV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "destroy"
      | "discountedSwap"
      | "owner"
      | "renounceOwnership"
      | "rescueFunds"
      | "swap"
      | "transferOwnership"
      | "unoswap"
      | "unoswapWithPermit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Error" | "OwnershipTransferred" | "Swapped"
  ): EventFragment;

  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "discountedSwap",
    values: [AddressLike, AggregationRouterV3.SwapDescriptionStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, AggregationRouterV3.SwapDescriptionStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswap",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswapWithPermit",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike[], BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unoswap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unoswapWithPermit",
    data: BytesLike
  ): Result;
}

export namespace ErrorEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwappedEvent {
  export type InputTuple = [
    sender: AddressLike,
    srcToken: AddressLike,
    dstToken: AddressLike,
    dstReceiver: AddressLike,
    spentAmount: BigNumberish,
    returnAmount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    srcToken: string,
    dstToken: string,
    dstReceiver: string,
    spentAmount: bigint,
    returnAmount: bigint
  ];
  export interface OutputObject {
    sender: string;
    srcToken: string;
    dstToken: string;
    dstReceiver: string;
    spentAmount: bigint;
    returnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AggregationRouterV3 extends BaseContract {
  connect(runner?: ContractRunner | null): AggregationRouterV3;
  waitForDeployment(): Promise<this>;

  interface: AggregationRouterV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  destroy: TypedContractMethod<[], [void], "nonpayable">;

  discountedSwap: TypedContractMethod<
    [
      caller: AddressLike,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike
    ],
    [
      [bigint, bigint, bigint] & {
        returnAmount: bigint;
        gasLeft: bigint;
        chiSpent: bigint;
      }
    ],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rescueFunds: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<
    [
      caller: AddressLike,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; gasLeft: bigint }],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unoswap: TypedContractMethod<
    [
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[]
    ],
    [bigint],
    "payable"
  >;

  unoswapWithPermit: TypedContractMethod<
    [
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "destroy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "discountedSwap"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike
    ],
    [
      [bigint, bigint, bigint] & {
        returnAmount: bigint;
        gasLeft: bigint;
        chiSpent: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueFunds"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      desc: AggregationRouterV3.SwapDescriptionStruct,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; gasLeft: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unoswap"
  ): TypedContractMethod<
    [
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      arg3: BytesLike[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unoswapWithPermit"
  ): TypedContractMethod<
    [
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BytesLike[],
      permit: BytesLike
    ],
    [bigint],
    "payable"
  >;

  getEvent(
    key: "Error"
  ): TypedContractEvent<
    ErrorEvent.InputTuple,
    ErrorEvent.OutputTuple,
    ErrorEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Swapped"
  ): TypedContractEvent<
    SwappedEvent.InputTuple,
    SwappedEvent.OutputTuple,
    SwappedEvent.OutputObject
  >;

  filters: {
    "Error(string)": TypedContractEvent<
      ErrorEvent.InputTuple,
      ErrorEvent.OutputTuple,
      ErrorEvent.OutputObject
    >;
    Error: TypedContractEvent<
      ErrorEvent.InputTuple,
      ErrorEvent.OutputTuple,
      ErrorEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Swapped(address,address,address,address,uint256,uint256)": TypedContractEvent<
      SwappedEvent.InputTuple,
      SwappedEvent.OutputTuple,
      SwappedEvent.OutputObject
    >;
    Swapped: TypedContractEvent<
      SwappedEvent.InputTuple,
      SwappedEvent.OutputTuple,
      SwappedEvent.OutputObject
    >;
  };
}
